
el20b032_Haude_Final_Projekt_Tempsensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000829c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800842c  0800842c  0000942c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008554  08008554  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008554  08008554  00009554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800855c  0800855c  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800855c  0800855c  0000955c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008560  08008560  00009560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008564  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cc8  20000060  080085c4  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d28  080085c4  0000ad28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb84  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003de2  00000000  00000000  00028c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  0002c9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001442  00000000  00000000  0002e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045a9  00000000  00000000  0002f832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e80a  00000000  00000000  00033ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7245  00000000  00000000  000525e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012982a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073ec  00000000  00000000  00129870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00130c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008414 	.word	0x08008414

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08008414 	.word	0x08008414

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d50:	f000 fca5 	bl	800169e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d54:	f000 f836 	bl	8000dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d58:	f000 f936 	bl	8000fc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d5c:	f000 f904 	bl	8000f68 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d60:	f000 f892 	bl	8000e88 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d64:	f000 f8d0 	bl	8000f08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d68:	f003 fec4 	bl	8004af4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of tempfreeQueue */
  tempfreeQueueHandle = osMessageQueueNew (16, sizeof(int), &tempfreeQueue_attributes);
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000da4 <main+0x58>)
 8000d6e:	2104      	movs	r1, #4
 8000d70:	2010      	movs	r0, #16
 8000d72:	f003 ffb6 	bl	8004ce2 <osMessageQueueNew>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4a0b      	ldr	r2, [pc, #44]	@ (8000da8 <main+0x5c>)
 8000d7a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TempTask */
  TempTaskHandle = osThreadNew(StartTempTask, NULL, &TempTask_attributes);
 8000d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dac <main+0x60>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	480b      	ldr	r0, [pc, #44]	@ (8000db0 <main+0x64>)
 8000d82:	f003 ff01 	bl	8004b88 <osThreadNew>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a0a      	ldr	r2, [pc, #40]	@ (8000db4 <main+0x68>)
 8000d8a:	6013      	str	r3, [r2, #0]

  /* creation of Transmit */
  TransmitHandle = osThreadNew(TransmitTask, NULL, &Transmit_attributes);
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <main+0x6c>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	480a      	ldr	r0, [pc, #40]	@ (8000dbc <main+0x70>)
 8000d92:	f003 fef9 	bl	8004b88 <osThreadNew>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a09      	ldr	r2, [pc, #36]	@ (8000dc0 <main+0x74>)
 8000d9a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d9c:	f003 fece 	bl	8004b3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <main+0x54>
 8000da4:	080084c0 	.word	0x080084c0
 8000da8:	200001e8 	.word	0x200001e8
 8000dac:	08008478 	.word	0x08008478
 8000db0:	08001061 	.word	0x08001061
 8000db4:	200001e0 	.word	0x200001e0
 8000db8:	0800849c 	.word	0x0800849c
 8000dbc:	08001165 	.word	0x08001165
 8000dc0:	200001e4 	.word	0x200001e4

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b096      	sub	sp, #88	@ 0x58
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	2244      	movs	r2, #68	@ 0x44
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f006 fe48 	bl	8007a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000de6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000dea:	f001 fd0b 	bl	8002804 <HAL_PWREx_ControlVoltageScaling>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000df4:	f000 f9f8 	bl	80011e8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000df8:	f001 fce6 	bl	80027c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000dfc:	4b21      	ldr	r3, [pc, #132]	@ (8000e84 <SystemClock_Config+0xc0>)
 8000dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e02:	4a20      	ldr	r2, [pc, #128]	@ (8000e84 <SystemClock_Config+0xc0>)
 8000e04:	f023 0318 	bic.w	r3, r3, #24
 8000e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000e0c:	2314      	movs	r3, #20
 8000e0e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e10:	2301      	movs	r3, #1
 8000e12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e14:	2301      	movs	r3, #1
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e1c:	2360      	movs	r3, #96	@ 0x60
 8000e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e20:	2302      	movs	r3, #2
 8000e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e24:	2301      	movs	r3, #1
 8000e26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000e2c:	2310      	movs	r3, #16
 8000e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e30:	2307      	movs	r3, #7
 8000e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 fd35 	bl	80028b0 <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000e4c:	f000 f9cc 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e50:	230f      	movs	r3, #15
 8000e52:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e54:	2303      	movs	r3, #3
 8000e56:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e64:	463b      	mov	r3, r7
 8000e66:	2101      	movs	r1, #1
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f002 f935 	bl	80030d8 <HAL_RCC_ClockConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e74:	f000 f9b8 	bl	80011e8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000e78:	f002 fd7a 	bl	8003970 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000e7c:	bf00      	nop
 8000e7e:	3758      	adds	r7, #88	@ 0x58
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40021000 	.word	0x40021000

08000e88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000efc <MX_I2C1_Init+0x74>)
 8000e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f00 <MX_I2C1_Init+0x78>)
 8000e90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <MX_I2C1_Init+0x74>)
 8000e94:	4a1b      	ldr	r2, [pc, #108]	@ (8000f04 <MX_I2C1_Init+0x7c>)
 8000e96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e98:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <MX_I2C1_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e9e:	4b17      	ldr	r3, [pc, #92]	@ (8000efc <MX_I2C1_Init+0x74>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea4:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <MX_I2C1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eaa:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <MX_I2C1_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <MX_I2C1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <MX_I2C1_Init+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <MX_I2C1_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec2:	480e      	ldr	r0, [pc, #56]	@ (8000efc <MX_I2C1_Init+0x74>)
 8000ec4:	f000 feac 	bl	8001c20 <HAL_I2C_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ece:	f000 f98b 	bl	80011e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4809      	ldr	r0, [pc, #36]	@ (8000efc <MX_I2C1_Init+0x74>)
 8000ed6:	f001 fbdf 	bl	8002698 <HAL_I2CEx_ConfigAnalogFilter>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ee0:	f000 f982 	bl	80011e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4805      	ldr	r0, [pc, #20]	@ (8000efc <MX_I2C1_Init+0x74>)
 8000ee8:	f001 fc21 	bl	800272e <HAL_I2CEx_ConfigDigitalFilter>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ef2:	f000 f979 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000007c 	.word	0x2000007c
 8000f00:	40005400 	.word	0x40005400
 8000f04:	00707cbb 	.word	0x00707cbb

08000f08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <MX_USART1_UART_Init+0x58>)
 8000f0e:	4a15      	ldr	r2, [pc, #84]	@ (8000f64 <MX_USART1_UART_Init+0x5c>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f12:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <MX_USART1_UART_Init+0x58>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <MX_USART1_UART_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <MX_USART1_UART_Init+0x58>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <MX_USART1_UART_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <MX_USART1_UART_Init+0x58>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	@ (8000f60 <MX_USART1_UART_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <MX_USART1_UART_Init+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <MX_USART1_UART_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <MX_USART1_UART_Init+0x58>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	@ (8000f60 <MX_USART1_UART_Init+0x58>)
 8000f4c:	f003 f874 	bl	8004038 <HAL_UART_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f56:	f000 f947 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200000d0 	.word	0x200000d0
 8000f64:	40013800 	.word	0x40013800

08000f68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <MX_USART2_UART_Init+0x58>)
 8000f6e:	4a15      	ldr	r2, [pc, #84]	@ (8000fc4 <MX_USART2_UART_Init+0x5c>)
 8000f70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f72:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <MX_USART2_UART_Init+0x58>)
 8000f74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <MX_USART2_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <MX_USART2_UART_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <MX_USART2_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <MX_USART2_UART_Init+0x58>)
 8000f8e:	220c      	movs	r2, #12
 8000f90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <MX_USART2_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f98:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <MX_USART2_UART_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <MX_USART2_UART_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <MX_USART2_UART_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <MX_USART2_UART_Init+0x58>)
 8000fac:	f003 f844 	bl	8004038 <HAL_UART_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fb6:	f000 f917 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000158 	.word	0x20000158
 8000fc4:	40004400 	.word	0x40004400

08000fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <MX_GPIO_Init+0x8c>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8001054 <MX_GPIO_Init+0x8c>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <MX_GPIO_Init+0x8c>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <MX_GPIO_Init+0x8c>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	4a16      	ldr	r2, [pc, #88]	@ (8001054 <MX_GPIO_Init+0x8c>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <MX_GPIO_Init+0x8c>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <MX_GPIO_Init+0x8c>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001012:	4a10      	ldr	r2, [pc, #64]	@ (8001054 <MX_GPIO_Init+0x8c>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <MX_GPIO_Init+0x8c>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2108      	movs	r1, #8
 800102a:	480b      	ldr	r0, [pc, #44]	@ (8001058 <MX_GPIO_Init+0x90>)
 800102c:	f000 fde0 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001030:	2308      	movs	r3, #8
 8001032:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	4619      	mov	r1, r3
 8001046:	4804      	ldr	r0, [pc, #16]	@ (8001058 <MX_GPIO_Init+0x90>)
 8001048:	f000 fc68 	bl	800191c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800104c:	bf00      	nop
 800104e:	3720      	adds	r7, #32
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40021000 	.word	0x40021000
 8001058:	48000400 	.word	0x48000400
 800105c:	00000000 	.word	0x00000000

08001060 <StartTempTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTempTask */
void StartTempTask(void *argument)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af02      	add	r7, sp, #8
 8001066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 uint8_t reset_cmd = 0x1E;
 8001068:	231e      	movs	r3, #30
 800106a:	757b      	strb	r3, [r7, #21]
	 uint8_t start_conv_cmd = 0x46;
 800106c:	2346      	movs	r3, #70	@ 0x46
 800106e:	753b      	strb	r3, [r7, #20]
	 uint8_t adc_read_cmd = 0x00;
 8001070:	2300      	movs	r3, #0
 8001072:	74fb      	strb	r3, [r7, #19]
	 uint8_t adc_data[3];

	    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(TSYS03_I2C_ADDRESS << 1), &reset_cmd, 1, HAL_MAX_DELAY);
 8001074:	f107 0215 	add.w	r2, r7, #21
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2301      	movs	r3, #1
 8001080:	2180      	movs	r1, #128	@ 0x80
 8001082:	4835      	ldr	r0, [pc, #212]	@ (8001158 <StartTempTask+0xf8>)
 8001084:	f000 fe68 	bl	8001d58 <HAL_I2C_Master_Transmit>
	    HAL_Delay(20);
 8001088:	2014      	movs	r0, #20
 800108a:	f000 fb41 	bl	8001710 <HAL_Delay>

	    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(TSYS03_I2C_ADDRESS << 1), &start_conv_cmd, 1, HAL_MAX_DELAY);
 800108e:	f107 0214 	add.w	r2, r7, #20
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	2180      	movs	r1, #128	@ 0x80
 800109c:	482e      	ldr	r0, [pc, #184]	@ (8001158 <StartTempTask+0xf8>)
 800109e:	f000 fe5b 	bl	8001d58 <HAL_I2C_Master_Transmit>
	    HAL_Delay(20);
 80010a2:	2014      	movs	r0, #20
 80010a4:	f000 fb34 	bl	8001710 <HAL_Delay>

	    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(TSYS03_I2C_ADDRESS << 1), &adc_read_cmd, 1, HAL_MAX_DELAY);
 80010a8:	f107 0213 	add.w	r2, r7, #19
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2301      	movs	r3, #1
 80010b4:	2180      	movs	r1, #128	@ 0x80
 80010b6:	4828      	ldr	r0, [pc, #160]	@ (8001158 <StartTempTask+0xf8>)
 80010b8:	f000 fe4e 	bl	8001d58 <HAL_I2C_Master_Transmit>
	    HAL_Delay(20);
 80010bc:	2014      	movs	r0, #20
 80010be:	f000 fb27 	bl	8001710 <HAL_Delay>

	    HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(TSYS03_I2C_ADDRESS << 1), adc_data, 3, HAL_MAX_DELAY);
 80010c2:	f107 0210 	add.w	r2, r7, #16
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2303      	movs	r3, #3
 80010ce:	2180      	movs	r1, #128	@ 0x80
 80010d0:	4821      	ldr	r0, [pc, #132]	@ (8001158 <StartTempTask+0xf8>)
 80010d2:	f000 ff59 	bl	8001f88 <HAL_I2C_Master_Receive>


	    	    uint16_t adc_value = (adc_data[0] << 8) | adc_data[1];
 80010d6:	7c3b      	ldrb	r3, [r7, #16]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	7c7b      	ldrb	r3, [r7, #17]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	82fb      	strh	r3, [r7, #22]
	    	    int temperature = -40.0 + (165.0 * adc_value / 65535.0);
 80010e6:	8afb      	ldrh	r3, [r7, #22]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fa13 	bl	8000514 <__aeabi_i2d>
 80010ee:	a316      	add	r3, pc, #88	@ (adr r3, 8001148 <StartTempTask+0xe8>)
 80010f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f4:	f7ff fa78 	bl	80005e8 <__aeabi_dmul>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	a313      	add	r3, pc, #76	@ (adr r3, 8001150 <StartTempTask+0xf0>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fb99 	bl	800083c <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <StartTempTask+0xfc>)
 8001118:	f7ff f8ae 	bl	8000278 <__aeabi_dsub>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fc72 	bl	8000a0c <__aeabi_d2iz>
 8001128:	4603      	mov	r3, r0
 800112a:	60fb      	str	r3, [r7, #12]

	     osMessageQueuePut(tempfreeQueueHandle, &temperature, 0, osWaitForever);
 800112c:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <StartTempTask+0x100>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f107 010c 	add.w	r1, r7, #12
 8001134:	f04f 33ff 	mov.w	r3, #4294967295
 8001138:	2200      	movs	r2, #0
 800113a:	f003 fe45 	bl	8004dc8 <osMessageQueuePut>

	 osDelay(100);
 800113e:	2064      	movs	r0, #100	@ 0x64
 8001140:	f003 fdb4 	bl	8004cac <osDelay>
  {
 8001144:	bf00      	nop
 8001146:	e78f      	b.n	8001068 <StartTempTask+0x8>
 8001148:	00000000 	.word	0x00000000
 800114c:	4064a000 	.word	0x4064a000
 8001150:	00000000 	.word	0x00000000
 8001154:	40efffe0 	.word	0x40efffe0
 8001158:	2000007c 	.word	0x2000007c
 800115c:	40440000 	.word	0x40440000
 8001160:	200001e8 	.word	0x200001e8

08001164 <TransmitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TransmitTask */
void TransmitTask(void *argument)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	int temperature;

  for(;;)
  {
	  osMessageQueueGet(tempfreeQueueHandle, &temperature, NULL, osWaitForever);
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <TransmitTask+0x54>)
 800116e:	6818      	ldr	r0, [r3, #0]
 8001170:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
 8001178:	2200      	movs	r2, #0
 800117a:	f003 fe85 	bl	8004e88 <osMessageQueueGet>

	  char str[20];
	  sprintf(str, "Temp: %d", temperature);
 800117e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	490d      	ldr	r1, [pc, #52]	@ (80011bc <TransmitTask+0x58>)
 8001186:	4618      	mov	r0, r3
 8001188:	f006 fc4e 	bl	8007a28 <siprintf>

	  transmit_string(&huart1, str);
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4619      	mov	r1, r3
 8001192:	480b      	ldr	r0, [pc, #44]	@ (80011c0 <TransmitTask+0x5c>)
 8001194:	f000 fa40 	bl	8001618 <transmit_string>

	  uint8_t msg[] = "\n";
 8001198:	230a      	movs	r3, #10
 800119a:	81bb      	strh	r3, [r7, #12]
	  HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY); //change to huart2 for terminal output
 800119c:	f107 010c 	add.w	r1, r7, #12
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	2201      	movs	r2, #1
 80011a6:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <TransmitTask+0x5c>)
 80011a8:	f002 ff94 	bl	80040d4 <HAL_UART_Transmit>

	  osDelay(1);
 80011ac:	2001      	movs	r0, #1
 80011ae:	f003 fd7d 	bl	8004cac <osDelay>
  {
 80011b2:	bf00      	nop
 80011b4:	e7da      	b.n	800116c <TransmitTask+0x8>
 80011b6:	bf00      	nop
 80011b8:	200001e8 	.word	0x200001e8
 80011bc:	08008454 	.word	0x08008454
 80011c0:	200000d0 	.word	0x200000d0

080011c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011d6:	f000 fa7b 	bl	80016d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40001000 	.word	0x40001000

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <Error_Handler+0x8>

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <HAL_MspInit+0x4c>)
 80011fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011fe:	4a10      	ldr	r2, [pc, #64]	@ (8001240 <HAL_MspInit+0x4c>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6613      	str	r3, [r2, #96]	@ 0x60
 8001206:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <HAL_MspInit+0x4c>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <HAL_MspInit+0x4c>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <HAL_MspInit+0x4c>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800121c:	6593      	str	r3, [r2, #88]	@ 0x58
 800121e:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <HAL_MspInit+0x4c>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	210f      	movs	r1, #15
 800122e:	f06f 0001 	mvn.w	r0, #1
 8001232:	f000 fb49 	bl	80018c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b09e      	sub	sp, #120	@ 0x78
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	2254      	movs	r2, #84	@ 0x54
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f006 fbff 	bl	8007a68 <memset>
  if(hi2c->Instance==I2C1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a1e      	ldr	r2, [pc, #120]	@ (80012e8 <HAL_I2C_MspInit+0xa4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d135      	bne.n	80012e0 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001274:	2340      	movs	r3, #64	@ 0x40
 8001276:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001278:	2300      	movs	r3, #0
 800127a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4618      	mov	r0, r3
 8001282:	f002 f97f 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800128c:	f7ff ffac 	bl	80011e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	4b16      	ldr	r3, [pc, #88]	@ (80012ec <HAL_I2C_MspInit+0xa8>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001294:	4a15      	ldr	r2, [pc, #84]	@ (80012ec <HAL_I2C_MspInit+0xa8>)
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129c:	4b13      	ldr	r3, [pc, #76]	@ (80012ec <HAL_I2C_MspInit+0xa8>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012a8:	23c0      	movs	r3, #192	@ 0xc0
 80012aa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ac:	2312      	movs	r3, #18
 80012ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012b8:	2304      	movs	r3, #4
 80012ba:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012c0:	4619      	mov	r1, r3
 80012c2:	480b      	ldr	r0, [pc, #44]	@ (80012f0 <HAL_I2C_MspInit+0xac>)
 80012c4:	f000 fb2a 	bl	800191c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <HAL_I2C_MspInit+0xa8>)
 80012ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012cc:	4a07      	ldr	r2, [pc, #28]	@ (80012ec <HAL_I2C_MspInit+0xa8>)
 80012ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <HAL_I2C_MspInit+0xa8>)
 80012d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	3778      	adds	r7, #120	@ 0x78
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40005400 	.word	0x40005400
 80012ec:	40021000 	.word	0x40021000
 80012f0:	48000400 	.word	0x48000400

080012f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b0a0      	sub	sp, #128	@ 0x80
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800130c:	f107 0318 	add.w	r3, r7, #24
 8001310:	2254      	movs	r2, #84	@ 0x54
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f006 fba7 	bl	8007a68 <memset>
  if(huart->Instance==USART1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a47      	ldr	r2, [pc, #284]	@ (800143c <HAL_UART_MspInit+0x148>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d138      	bne.n	8001396 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001324:	2301      	movs	r3, #1
 8001326:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001328:	2300      	movs	r3, #0
 800132a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132c:	f107 0318 	add.w	r3, r7, #24
 8001330:	4618      	mov	r0, r3
 8001332:	f002 f927 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800133c:	f7ff ff54 	bl	80011e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001340:	4b3f      	ldr	r3, [pc, #252]	@ (8001440 <HAL_UART_MspInit+0x14c>)
 8001342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001344:	4a3e      	ldr	r2, [pc, #248]	@ (8001440 <HAL_UART_MspInit+0x14c>)
 8001346:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800134a:	6613      	str	r3, [r2, #96]	@ 0x60
 800134c:	4b3c      	ldr	r3, [pc, #240]	@ (8001440 <HAL_UART_MspInit+0x14c>)
 800134e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b39      	ldr	r3, [pc, #228]	@ (8001440 <HAL_UART_MspInit+0x14c>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135c:	4a38      	ldr	r2, [pc, #224]	@ (8001440 <HAL_UART_MspInit+0x14c>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001364:	4b36      	ldr	r3, [pc, #216]	@ (8001440 <HAL_UART_MspInit+0x14c>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001370:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001374:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001382:	2307      	movs	r3, #7
 8001384:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001390:	f000 fac4 	bl	800191c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001394:	e04d      	b.n	8001432 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a2a      	ldr	r2, [pc, #168]	@ (8001444 <HAL_UART_MspInit+0x150>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d148      	bne.n	8001432 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a8:	f107 0318 	add.w	r3, r7, #24
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 f8e9 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80013b8:	f7ff ff16 	bl	80011e8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013bc:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <HAL_UART_MspInit+0x14c>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001440 <HAL_UART_MspInit+0x14c>)
 80013c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80013c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <HAL_UART_MspInit+0x14c>)
 80013ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <HAL_UART_MspInit+0x14c>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	4a19      	ldr	r2, [pc, #100]	@ (8001440 <HAL_UART_MspInit+0x14c>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e0:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <HAL_UART_MspInit+0x14c>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80013ec:	2304      	movs	r3, #4
 80013ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013fc:	2307      	movs	r3, #7
 80013fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001404:	4619      	mov	r1, r3
 8001406:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140a:	f000 fa87 	bl	800191c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800140e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001412:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001420:	2303      	movs	r3, #3
 8001422:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001424:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001428:	4619      	mov	r1, r3
 800142a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800142e:	f000 fa75 	bl	800191c <HAL_GPIO_Init>
}
 8001432:	bf00      	nop
 8001434:	3780      	adds	r7, #128	@ 0x80
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40013800 	.word	0x40013800
 8001440:	40021000 	.word	0x40021000
 8001444:	40004400 	.word	0x40004400

08001448 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	@ 0x38
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001456:	4b34      	ldr	r3, [pc, #208]	@ (8001528 <HAL_InitTick+0xe0>)
 8001458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145a:	4a33      	ldr	r2, [pc, #204]	@ (8001528 <HAL_InitTick+0xe0>)
 800145c:	f043 0310 	orr.w	r3, r3, #16
 8001460:	6593      	str	r3, [r2, #88]	@ 0x58
 8001462:	4b31      	ldr	r3, [pc, #196]	@ (8001528 <HAL_InitTick+0xe0>)
 8001464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800146e:	f107 0210 	add.w	r2, r7, #16
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f001 fff1 	bl	8003460 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001484:	2b00      	cmp	r3, #0
 8001486:	d103      	bne.n	8001490 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001488:	f001 ffbe 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 800148c:	6378      	str	r0, [r7, #52]	@ 0x34
 800148e:	e004      	b.n	800149a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001490:	f001 ffba 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 8001494:	4603      	mov	r3, r0
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800149a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800149c:	4a23      	ldr	r2, [pc, #140]	@ (800152c <HAL_InitTick+0xe4>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0c9b      	lsrs	r3, r3, #18
 80014a4:	3b01      	subs	r3, #1
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014a8:	4b21      	ldr	r3, [pc, #132]	@ (8001530 <HAL_InitTick+0xe8>)
 80014aa:	4a22      	ldr	r2, [pc, #136]	@ (8001534 <HAL_InitTick+0xec>)
 80014ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014ae:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <HAL_InitTick+0xe8>)
 80014b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001530 <HAL_InitTick+0xe8>)
 80014b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <HAL_InitTick+0xe8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001530 <HAL_InitTick+0xe8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c8:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <HAL_InitTick+0xe8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80014ce:	4818      	ldr	r0, [pc, #96]	@ (8001530 <HAL_InitTick+0xe8>)
 80014d0:	f002 fb50 	bl	8003b74 <HAL_TIM_Base_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80014da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d11b      	bne.n	800151a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014e2:	4813      	ldr	r0, [pc, #76]	@ (8001530 <HAL_InitTick+0xe8>)
 80014e4:	f002 fba8 	bl	8003c38 <HAL_TIM_Base_Start_IT>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80014ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d111      	bne.n	800151a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014f6:	2036      	movs	r0, #54	@ 0x36
 80014f8:	f000 fa02 	bl	8001900 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b0f      	cmp	r3, #15
 8001500:	d808      	bhi.n	8001514 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001502:	2200      	movs	r2, #0
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	2036      	movs	r0, #54	@ 0x36
 8001508:	f000 f9de 	bl	80018c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800150c:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <HAL_InitTick+0xf0>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e002      	b.n	800151a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800151a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800151e:	4618      	mov	r0, r3
 8001520:	3738      	adds	r7, #56	@ 0x38
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	431bde83 	.word	0x431bde83
 8001530:	200001ec 	.word	0x200001ec
 8001534:	40001000 	.word	0x40001000
 8001538:	20000004 	.word	0x20000004

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <NMI_Handler+0x4>

08001544 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <MemManage_Handler+0x4>

08001554 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <UsageFault_Handler+0x4>

08001564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001578:	4802      	ldr	r0, [pc, #8]	@ (8001584 <TIM6_DAC_IRQHandler+0x10>)
 800157a:	f002 fbb1 	bl	8003ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200001ec 	.word	0x200001ec

08001588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001590:	4a14      	ldr	r2, [pc, #80]	@ (80015e4 <_sbrk+0x5c>)
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <_sbrk+0x60>)
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800159c:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <_sbrk+0x64>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <_sbrk+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d207      	bcs.n	80015c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b8:	f006 fab4 	bl	8007b24 <__errno>
 80015bc:	4603      	mov	r3, r0
 80015be:	220c      	movs	r2, #12
 80015c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e009      	b.n	80015dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c8:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a05      	ldr	r2, [pc, #20]	@ (80015ec <_sbrk+0x64>)
 80015d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20010000 	.word	0x20010000
 80015e8:	00000400 	.word	0x00000400
 80015ec:	20000238 	.word	0x20000238
 80015f0:	20001d28 	.word	0x20001d28

080015f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <SystemInit+0x20>)
 80015fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015fe:	4a05      	ldr	r2, [pc, #20]	@ (8001614 <SystemInit+0x20>)
 8001600:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001604:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <transmit_string>:

extern UART_HandleTypeDef huart2;


void transmit_string(UART_HandleTypeDef *huart, char *str)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
    // Loop through each character in the string
    while (*str != '\0')
 8001622:	e009      	b.n	8001638 <transmit_string+0x20>
    {
        // Transmit the character using HAL_UART_Transmit
        HAL_UART_Transmit(huart, (uint8_t *)str, 1, HAL_MAX_DELAY);
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	2201      	movs	r2, #1
 800162a:	6839      	ldr	r1, [r7, #0]
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f002 fd51 	bl	80040d4 <HAL_UART_Transmit>

        // Move to the next character
        str++;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	603b      	str	r3, [r7, #0]
    while (*str != '\0')
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f1      	bne.n	8001624 <transmit_string+0xc>
    }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800164c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001684 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001650:	f7ff ffd0 	bl	80015f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001654:	480c      	ldr	r0, [pc, #48]	@ (8001688 <LoopForever+0x6>)
  ldr r1, =_edata
 8001656:	490d      	ldr	r1, [pc, #52]	@ (800168c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001658:	4a0d      	ldr	r2, [pc, #52]	@ (8001690 <LoopForever+0xe>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <LoopForever+0x12>)
  ldr r4, =_ebss
 800166c:	4c0a      	ldr	r4, [pc, #40]	@ (8001698 <LoopForever+0x16>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167a:	f006 fa59 	bl	8007b30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800167e:	f7ff fb65 	bl	8000d4c <main>

08001682 <LoopForever>:

LoopForever:
    b LoopForever
 8001682:	e7fe      	b.n	8001682 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001684:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001690:	08008564 	.word	0x08008564
  ldr r2, =_sbss
 8001694:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001698:	20001d28 	.word	0x20001d28

0800169c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC1_IRQHandler>

0800169e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f902 	bl	80018b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ae:	200f      	movs	r0, #15
 80016b0:	f7ff feca 	bl	8001448 <HAL_InitTick>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	71fb      	strb	r3, [r7, #7]
 80016be:	e001      	b.n	80016c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016c0:	f7ff fd98 	bl	80011f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016c4:	79fb      	ldrb	r3, [r7, #7]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_IncTick+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_IncTick+0x24>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	@ (80016f4 <HAL_IncTick+0x24>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000008 	.word	0x20000008
 80016f4:	2000023c 	.word	0x2000023c

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	@ (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	2000023c 	.word	0x2000023c

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff ffee 	bl	80016f8 <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <HAL_Delay+0x44>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001736:	bf00      	nop
 8001738:	f7ff ffde 	bl	80016f8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	@ (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4907      	ldr	r1, [pc, #28]	@ (80017f4 <__NVIC_EnableIRQ+0x38>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	@ (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	@ (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	@ 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	@ 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ff4c 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018da:	f7ff ff61 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 80018de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	6978      	ldr	r0, [r7, #20]
 80018e6:	f7ff ffb1 	bl	800184c <NVIC_EncodePriority>
 80018ea:	4602      	mov	r2, r0
 80018ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff80 	bl	80017f8 <__NVIC_SetPriority>
}
 80018f8:	bf00      	nop
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff54 	bl	80017bc <__NVIC_EnableIRQ>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192a:	e148      	b.n	8001bbe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2101      	movs	r1, #1
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 813a 	beq.w	8001bb8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b01      	cmp	r3, #1
 800194e:	d005      	beq.n	800195c <HAL_GPIO_Init+0x40>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d130      	bne.n	80019be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001992:	2201      	movs	r2, #1
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	091b      	lsrs	r3, r3, #4
 80019a8:	f003 0201 	and.w	r2, r3, #1
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d017      	beq.n	80019fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	2203      	movs	r2, #3
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d123      	bne.n	8001a4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	08da      	lsrs	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3208      	adds	r2, #8
 8001a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	691a      	ldr	r2, [r3, #16]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	08da      	lsrs	r2, r3, #3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3208      	adds	r2, #8
 8001a48:	6939      	ldr	r1, [r7, #16]
 8001a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	2203      	movs	r2, #3
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0203 	and.w	r2, r3, #3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8094 	beq.w	8001bb8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a90:	4b52      	ldr	r3, [pc, #328]	@ (8001bdc <HAL_GPIO_Init+0x2c0>)
 8001a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a94:	4a51      	ldr	r2, [pc, #324]	@ (8001bdc <HAL_GPIO_Init+0x2c0>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a9c:	4b4f      	ldr	r3, [pc, #316]	@ (8001bdc <HAL_GPIO_Init+0x2c0>)
 8001a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aa8:	4a4d      	ldr	r2, [pc, #308]	@ (8001be0 <HAL_GPIO_Init+0x2c4>)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ad2:	d00d      	beq.n	8001af0 <HAL_GPIO_Init+0x1d4>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a43      	ldr	r2, [pc, #268]	@ (8001be4 <HAL_GPIO_Init+0x2c8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d007      	beq.n	8001aec <HAL_GPIO_Init+0x1d0>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a42      	ldr	r2, [pc, #264]	@ (8001be8 <HAL_GPIO_Init+0x2cc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <HAL_GPIO_Init+0x1cc>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e004      	b.n	8001af2 <HAL_GPIO_Init+0x1d6>
 8001ae8:	2307      	movs	r3, #7
 8001aea:	e002      	b.n	8001af2 <HAL_GPIO_Init+0x1d6>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <HAL_GPIO_Init+0x1d6>
 8001af0:	2300      	movs	r3, #0
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	f002 0203 	and.w	r2, r2, #3
 8001af8:	0092      	lsls	r2, r2, #2
 8001afa:	4093      	lsls	r3, r2
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b02:	4937      	ldr	r1, [pc, #220]	@ (8001be0 <HAL_GPIO_Init+0x2c4>)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	3302      	adds	r3, #2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b10:	4b36      	ldr	r3, [pc, #216]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b34:	4a2d      	ldr	r2, [pc, #180]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b5e:	4a23      	ldr	r2, [pc, #140]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b64:	4b21      	ldr	r3, [pc, #132]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b88:	4a18      	ldr	r2, [pc, #96]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b8e:	4b17      	ldr	r3, [pc, #92]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f47f aeaf 	bne.w	800192c <HAL_GPIO_Init+0x10>
  }
}
 8001bce:	bf00      	nop
 8001bd0:	bf00      	nop
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010000 	.word	0x40010000
 8001be4:	48000400 	.word	0x48000400
 8001be8:	48000800 	.word	0x48000800
 8001bec:	40010400 	.word	0x40010400

08001bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c0c:	e002      	b.n	8001c14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e08d      	b.n	8001d4e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fafc 	bl	8001244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2224      	movs	r2, #36	@ 0x24
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d107      	bne.n	8001c9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	e006      	b.n	8001ca8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ca6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d108      	bne.n	8001cc2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	e007      	b.n	8001cd2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ce0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ce4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cf4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69d9      	ldr	r1, [r3, #28]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1a      	ldr	r2, [r3, #32]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	461a      	mov	r2, r3
 8001d64:	460b      	mov	r3, r1
 8001d66:	817b      	strh	r3, [r7, #10]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b20      	cmp	r3, #32
 8001d76:	f040 80fd 	bne.w	8001f74 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_I2C_Master_Transmit+0x30>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e0f6      	b.n	8001f76 <HAL_I2C_Master_Transmit+0x21e>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d90:	f7ff fcb2 	bl	80016f8 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	2319      	movs	r3, #25
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 fa0a 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0e1      	b.n	8001f76 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2221      	movs	r2, #33	@ 0x21
 8001db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2210      	movs	r2, #16
 8001dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	893a      	ldrh	r2, [r7, #8]
 8001dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2bff      	cmp	r3, #255	@ 0xff
 8001de2:	d906      	bls.n	8001df2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	22ff      	movs	r2, #255	@ 0xff
 8001de8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001dea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e007      	b.n	8001e02 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001dfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e00:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d024      	beq.n	8001e54 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	781a      	ldrb	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	3301      	adds	r3, #1
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	8979      	ldrh	r1, [r7, #10]
 8001e46:	4b4e      	ldr	r3, [pc, #312]	@ (8001f80 <HAL_I2C_Master_Transmit+0x228>)
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 fbf1 	bl	8002634 <I2C_TransferConfig>
 8001e52:	e066      	b.n	8001f22 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	8979      	ldrh	r1, [r7, #10]
 8001e5c:	4b48      	ldr	r3, [pc, #288]	@ (8001f80 <HAL_I2C_Master_Transmit+0x228>)
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 fbe6 	bl	8002634 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e68:	e05b      	b.n	8001f22 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	6a39      	ldr	r1, [r7, #32]
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f9f3 	bl	800225a <I2C_WaitOnTXISFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e07b      	b.n	8001f76 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d034      	beq.n	8001f22 <HAL_I2C_Master_Transmit+0x1ca>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d130      	bne.n	8001f22 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2180      	movs	r1, #128	@ 0x80
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f976 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e04d      	b.n	8001f76 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2bff      	cmp	r3, #255	@ 0xff
 8001ee2:	d90e      	bls.n	8001f02 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	22ff      	movs	r2, #255	@ 0xff
 8001ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	8979      	ldrh	r1, [r7, #10]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fb9a 	bl	8002634 <I2C_TransferConfig>
 8001f00:	e00f      	b.n	8001f22 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	8979      	ldrh	r1, [r7, #10]
 8001f14:	2300      	movs	r3, #0
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 fb89 	bl	8002634 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d19e      	bne.n	8001e6a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	6a39      	ldr	r1, [r7, #32]
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 f9d9 	bl	80022e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e01a      	b.n	8001f76 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2220      	movs	r2, #32
 8001f46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6859      	ldr	r1, [r3, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <HAL_I2C_Master_Transmit+0x22c>)
 8001f54:	400b      	ands	r3, r1
 8001f56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e000      	b.n	8001f76 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001f74:	2302      	movs	r3, #2
  }
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	80002000 	.word	0x80002000
 8001f84:	fe00e800 	.word	0xfe00e800

08001f88 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	461a      	mov	r2, r3
 8001f94:	460b      	mov	r3, r1
 8001f96:	817b      	strh	r3, [r7, #10]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	f040 80db 	bne.w	8002160 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_I2C_Master_Receive+0x30>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e0d4      	b.n	8002162 <HAL_I2C_Master_Receive+0x1da>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fc0:	f7ff fb9a 	bl	80016f8 <HAL_GetTick>
 8001fc4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2319      	movs	r3, #25
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f8f2 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e0bf      	b.n	8002162 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2222      	movs	r2, #34	@ 0x22
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2210      	movs	r2, #16
 8001fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	893a      	ldrh	r2, [r7, #8]
 8002002:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800200e:	b29b      	uxth	r3, r3
 8002010:	2bff      	cmp	r3, #255	@ 0xff
 8002012:	d90e      	bls.n	8002032 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	22ff      	movs	r2, #255	@ 0xff
 8002018:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201e:	b2da      	uxtb	r2, r3
 8002020:	8979      	ldrh	r1, [r7, #10]
 8002022:	4b52      	ldr	r3, [pc, #328]	@ (800216c <HAL_I2C_Master_Receive+0x1e4>)
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 fb02 	bl	8002634 <I2C_TransferConfig>
 8002030:	e06d      	b.n	800210e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002040:	b2da      	uxtb	r2, r3
 8002042:	8979      	ldrh	r1, [r7, #10]
 8002044:	4b49      	ldr	r3, [pc, #292]	@ (800216c <HAL_I2C_Master_Receive+0x1e4>)
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 faf1 	bl	8002634 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002052:	e05c      	b.n	800210e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	6a39      	ldr	r1, [r7, #32]
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 f989 	bl	8002370 <I2C_WaitOnRXNEFlagUntilTimeout>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e07c      	b.n	8002162 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800209e:	b29b      	uxth	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d034      	beq.n	800210e <HAL_I2C_Master_Receive+0x186>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d130      	bne.n	800210e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	2200      	movs	r2, #0
 80020b4:	2180      	movs	r1, #128	@ 0x80
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f880 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e04d      	b.n	8002162 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2bff      	cmp	r3, #255	@ 0xff
 80020ce:	d90e      	bls.n	80020ee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	22ff      	movs	r2, #255	@ 0xff
 80020d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	8979      	ldrh	r1, [r7, #10]
 80020de:	2300      	movs	r3, #0
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 faa4 	bl	8002634 <I2C_TransferConfig>
 80020ec:	e00f      	b.n	800210e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	8979      	ldrh	r1, [r7, #10]
 8002100:	2300      	movs	r3, #0
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 fa93 	bl	8002634 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002112:	b29b      	uxth	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d19d      	bne.n	8002054 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	6a39      	ldr	r1, [r7, #32]
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f8e3 	bl	80022e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e01a      	b.n	8002162 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2220      	movs	r2, #32
 8002132:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6859      	ldr	r1, [r3, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <HAL_I2C_Master_Receive+0x1e8>)
 8002140:	400b      	ands	r3, r1
 8002142:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	e000      	b.n	8002162 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002160:	2302      	movs	r3, #2
  }
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	80002400 	.word	0x80002400
 8002170:	fe00e800 	.word	0xfe00e800

08002174 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b02      	cmp	r3, #2
 8002188:	d103      	bne.n	8002192 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2200      	movs	r2, #0
 8002190:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b01      	cmp	r3, #1
 800219e:	d007      	beq.n	80021b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	619a      	str	r2, [r3, #24]
  }
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021cc:	e031      	b.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d4:	d02d      	beq.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d6:	f7ff fa8f 	bl	80016f8 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d302      	bcc.n	80021ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d122      	bne.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	4013      	ands	r3, r2
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	461a      	mov	r2, r3
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	429a      	cmp	r2, r3
 8002208:	d113      	bne.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	f043 0220 	orr.w	r2, r3, #32
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e00f      	b.n	8002252 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699a      	ldr	r2, [r3, #24]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4013      	ands	r3, r2
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	429a      	cmp	r2, r3
 8002240:	bf0c      	ite	eq
 8002242:	2301      	moveq	r3, #1
 8002244:	2300      	movne	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	429a      	cmp	r2, r3
 800224e:	d0be      	beq.n	80021ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002266:	e033      	b.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68b9      	ldr	r1, [r7, #8]
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 f901 	bl	8002474 <I2C_IsErrorOccurred>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e031      	b.n	80022e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002282:	d025      	beq.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002284:	f7ff fa38 	bl	80016f8 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	429a      	cmp	r2, r3
 8002292:	d302      	bcc.n	800229a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d11a      	bne.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d013      	beq.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ac:	f043 0220 	orr.w	r2, r3, #32
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e007      	b.n	80022e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d1c4      	bne.n	8002268 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022f4:	e02f      	b.n	8002356 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f8ba 	bl	8002474 <I2C_IsErrorOccurred>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e02d      	b.n	8002366 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230a:	f7ff f9f5 	bl	80016f8 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	429a      	cmp	r2, r3
 8002318:	d302      	bcc.n	8002320 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d11a      	bne.n	8002356 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b20      	cmp	r3, #32
 800232c:	d013      	beq.n	8002356 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	f043 0220 	orr.w	r2, r3, #32
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e007      	b.n	8002366 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b20      	cmp	r3, #32
 8002362:	d1c8      	bne.n	80022f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800237c:	e06b      	b.n	8002456 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f876 	bl	8002474 <I2C_IsErrorOccurred>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e069      	b.n	8002466 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b20      	cmp	r3, #32
 800239e:	d138      	bne.n	8002412 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d105      	bne.n	80023ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e055      	b.n	8002466 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b10      	cmp	r3, #16
 80023c6:	d107      	bne.n	80023d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2210      	movs	r2, #16
 80023ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2204      	movs	r2, #4
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
 80023d6:	e002      	b.n	80023de <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2220      	movs	r2, #32
 80023e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002470 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80023f2:	400b      	ands	r3, r1
 80023f4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e029      	b.n	8002466 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002412:	f7ff f971 	bl	80016f8 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	429a      	cmp	r2, r3
 8002420:	d302      	bcc.n	8002428 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d116      	bne.n	8002456 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b04      	cmp	r3, #4
 8002434:	d00f      	beq.n	8002456 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	f043 0220 	orr.w	r2, r3, #32
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e007      	b.n	8002466 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b04      	cmp	r3, #4
 8002462:	d18c      	bne.n	800237e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	fe00e800 	.word	0xfe00e800

08002474 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	@ 0x28
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	d068      	beq.n	8002572 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2210      	movs	r2, #16
 80024a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024a8:	e049      	b.n	800253e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d045      	beq.n	800253e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024b2:	f7ff f921 	bl	80016f8 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d302      	bcc.n	80024c8 <I2C_IsErrorOccurred+0x54>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d13a      	bne.n	800253e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80024da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024ea:	d121      	bne.n	8002530 <I2C_IsErrorOccurred+0xbc>
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024f2:	d01d      	beq.n	8002530 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d01a      	beq.n	8002530 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002508:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800250a:	f7ff f8f5 	bl	80016f8 <HAL_GetTick>
 800250e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002510:	e00e      	b.n	8002530 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002512:	f7ff f8f1 	bl	80016f8 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b19      	cmp	r3, #25
 800251e:	d907      	bls.n	8002530 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	f043 0320 	orr.w	r3, r3, #32
 8002526:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800252e:	e006      	b.n	800253e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b20      	cmp	r3, #32
 800253c:	d1e9      	bne.n	8002512 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b20      	cmp	r3, #32
 800254a:	d003      	beq.n	8002554 <I2C_IsErrorOccurred+0xe0>
 800254c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0aa      	beq.n	80024aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002558:	2b00      	cmp	r3, #0
 800255a:	d103      	bne.n	8002564 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2220      	movs	r2, #32
 8002562:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	f043 0304 	orr.w	r3, r3, #4
 800256a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00b      	beq.n	800259c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002594:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	f043 0308 	orr.w	r3, r3, #8
 80025ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00b      	beq.n	80025e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80025e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01c      	beq.n	8002622 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f7ff fdc3 	bl	8002174 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002630 <I2C_IsErrorOccurred+0x1bc>)
 80025fa:	400b      	ands	r3, r1
 80025fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	431a      	orrs	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2220      	movs	r2, #32
 800260e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002622:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002626:	4618      	mov	r0, r3
 8002628:	3728      	adds	r7, #40	@ 0x28
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	fe00e800 	.word	0xfe00e800

08002634 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	817b      	strh	r3, [r7, #10]
 8002642:	4613      	mov	r3, r2
 8002644:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002646:	897b      	ldrh	r3, [r7, #10]
 8002648:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800264c:	7a7b      	ldrb	r3, [r7, #9]
 800264e:	041b      	lsls	r3, r3, #16
 8002650:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002654:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	4313      	orrs	r3, r2
 800265e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002662:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	0d5b      	lsrs	r3, r3, #21
 800266e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002672:	4b08      	ldr	r3, [pc, #32]	@ (8002694 <I2C_TransferConfig+0x60>)
 8002674:	430b      	orrs	r3, r1
 8002676:	43db      	mvns	r3, r3
 8002678:	ea02 0103 	and.w	r1, r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002686:	bf00      	nop
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	03ff63ff 	.word	0x03ff63ff

08002698 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d138      	bne.n	8002720 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e032      	b.n	8002722 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2224      	movs	r2, #36	@ 0x24
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0201 	bic.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80026ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6819      	ldr	r1, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	e000      	b.n	8002722 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002720:	2302      	movs	r3, #2
  }
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800272e:	b480      	push	{r7}
 8002730:	b085      	sub	sp, #20
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b20      	cmp	r3, #32
 8002742:	d139      	bne.n	80027b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800274e:	2302      	movs	r3, #2
 8002750:	e033      	b.n	80027ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2224      	movs	r2, #36	@ 0x24
 800275e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0201 	bic.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002780:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e000      	b.n	80027ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027b8:	2302      	movs	r3, #2
  }
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027cc:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a04      	ldr	r2, [pc, #16]	@ (80027e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40007000 	.word	0x40007000

080027e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027ec:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <HAL_PWREx_GetVoltageRange+0x18>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40007000 	.word	0x40007000

08002804 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002812:	d130      	bne.n	8002876 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002814:	4b23      	ldr	r3, [pc, #140]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800281c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002820:	d038      	beq.n	8002894 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002822:	4b20      	ldr	r3, [pc, #128]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800282a:	4a1e      	ldr	r2, [pc, #120]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800282c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002830:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002832:	4b1d      	ldr	r3, [pc, #116]	@ (80028a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2232      	movs	r2, #50	@ 0x32
 8002838:	fb02 f303 	mul.w	r3, r2, r3
 800283c:	4a1b      	ldr	r2, [pc, #108]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	0c9b      	lsrs	r3, r3, #18
 8002844:	3301      	adds	r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002848:	e002      	b.n	8002850 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3b01      	subs	r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002850:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800285c:	d102      	bne.n	8002864 <HAL_PWREx_ControlVoltageScaling+0x60>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f2      	bne.n	800284a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002864:	4b0f      	ldr	r3, [pc, #60]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800286c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002870:	d110      	bne.n	8002894 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e00f      	b.n	8002896 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002876:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800287e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002882:	d007      	beq.n	8002894 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002884:	4b07      	ldr	r3, [pc, #28]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800288c:	4a05      	ldr	r2, [pc, #20]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800288e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002892:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40007000 	.word	0x40007000
 80028a8:	20000000 	.word	0x20000000
 80028ac:	431bde83 	.word	0x431bde83

080028b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	f000 bc02 	b.w	80030c8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028c4:	4b96      	ldr	r3, [pc, #600]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028ce:	4b94      	ldr	r3, [pc, #592]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80e4 	beq.w	8002aae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <HAL_RCC_OscConfig+0x4c>
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	f040 808b 	bne.w	8002a0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	f040 8087 	bne.w	8002a0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028fc:	4b88      	ldr	r3, [pc, #544]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_OscConfig+0x64>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e3d9      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	4b81      	ldr	r3, [pc, #516]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <HAL_RCC_OscConfig+0x7e>
 8002924:	4b7e      	ldr	r3, [pc, #504]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800292c:	e005      	b.n	800293a <HAL_RCC_OscConfig+0x8a>
 800292e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002930:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800293a:	4293      	cmp	r3, r2
 800293c:	d223      	bcs.n	8002986 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fdbe 	bl	80034c4 <RCC_SetFlashLatencyFromMSIRange>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e3ba      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002952:	4b73      	ldr	r3, [pc, #460]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a72      	ldr	r2, [pc, #456]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002958:	f043 0308 	orr.w	r3, r3, #8
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b70      	ldr	r3, [pc, #448]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	496d      	ldr	r1, [pc, #436]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 800296c:	4313      	orrs	r3, r2
 800296e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002970:	4b6b      	ldr	r3, [pc, #428]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	4968      	ldr	r1, [pc, #416]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]
 8002984:	e025      	b.n	80029d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002986:	4b66      	ldr	r3, [pc, #408]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a65      	ldr	r2, [pc, #404]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 800298c:	f043 0308 	orr.w	r3, r3, #8
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b63      	ldr	r3, [pc, #396]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	4960      	ldr	r1, [pc, #384]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029a4:	4b5e      	ldr	r3, [pc, #376]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	495b      	ldr	r1, [pc, #364]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fd7e 	bl	80034c4 <RCC_SetFlashLatencyFromMSIRange>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e37a      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029d2:	f000 fc81 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 80029d6:	4602      	mov	r2, r0
 80029d8:	4b51      	ldr	r3, [pc, #324]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	4950      	ldr	r1, [pc, #320]	@ (8002b24 <HAL_RCC_OscConfig+0x274>)
 80029e4:	5ccb      	ldrb	r3, [r1, r3]
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	fa22 f303 	lsr.w	r3, r2, r3
 80029ee:	4a4e      	ldr	r2, [pc, #312]	@ (8002b28 <HAL_RCC_OscConfig+0x278>)
 80029f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029f2:	4b4e      	ldr	r3, [pc, #312]	@ (8002b2c <HAL_RCC_OscConfig+0x27c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe fd26 	bl	8001448 <HAL_InitTick>
 80029fc:	4603      	mov	r3, r0
 80029fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d052      	beq.n	8002aac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	e35e      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d032      	beq.n	8002a78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a12:	4b43      	ldr	r3, [pc, #268]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a42      	ldr	r2, [pc, #264]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fe6b 	bl	80016f8 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a26:	f7fe fe67 	bl	80016f8 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e347      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a38:	4b39      	ldr	r3, [pc, #228]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a44:	4b36      	ldr	r3, [pc, #216]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a35      	ldr	r2, [pc, #212]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a4a:	f043 0308 	orr.w	r3, r3, #8
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b33      	ldr	r3, [pc, #204]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	4930      	ldr	r1, [pc, #192]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a62:	4b2f      	ldr	r3, [pc, #188]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	492b      	ldr	r1, [pc, #172]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
 8002a76:	e01a      	b.n	8002aae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a78:	4b29      	ldr	r3, [pc, #164]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a28      	ldr	r2, [pc, #160]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a84:	f7fe fe38 	bl	80016f8 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a8c:	f7fe fe34 	bl	80016f8 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e314      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a9e:	4b20      	ldr	r3, [pc, #128]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x1dc>
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d073      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_OscConfig+0x21c>
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b0c      	cmp	r3, #12
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d10b      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002acc:	4b14      	ldr	r3, [pc, #80]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d063      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x2f0>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d15f      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e2f1      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aec:	d106      	bne.n	8002afc <HAL_RCC_OscConfig+0x24c>
 8002aee:	4b0c      	ldr	r3, [pc, #48]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a0b      	ldr	r2, [pc, #44]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e025      	b.n	8002b48 <HAL_RCC_OscConfig+0x298>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b04:	d114      	bne.n	8002b30 <HAL_RCC_OscConfig+0x280>
 8002b06:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a05      	ldr	r2, [pc, #20]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b03      	ldr	r3, [pc, #12]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a02      	ldr	r2, [pc, #8]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e013      	b.n	8002b48 <HAL_RCC_OscConfig+0x298>
 8002b20:	40021000 	.word	0x40021000
 8002b24:	080084d8 	.word	0x080084d8
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	20000004 	.word	0x20000004
 8002b30:	4ba0      	ldr	r3, [pc, #640]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a9f      	ldr	r2, [pc, #636]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002b36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	4b9d      	ldr	r3, [pc, #628]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a9c      	ldr	r2, [pc, #624]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002b42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d013      	beq.n	8002b78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fdd2 	bl	80016f8 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b58:	f7fe fdce 	bl	80016f8 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	@ 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e2ae      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b6a:	4b92      	ldr	r3, [pc, #584]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x2a8>
 8002b76:	e014      	b.n	8002ba2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe fdbe 	bl	80016f8 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b80:	f7fe fdba 	bl	80016f8 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	@ 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e29a      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b92:	4b88      	ldr	r3, [pc, #544]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x2d0>
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d060      	beq.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x310>
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	d119      	bne.n	8002bee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d116      	bne.n	8002bee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bc0:	4b7c      	ldr	r3, [pc, #496]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x328>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e277      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd8:	4b76      	ldr	r3, [pc, #472]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	4973      	ldr	r1, [pc, #460]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bec:	e040      	b.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d023      	beq.n	8002c3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf6:	4b6f      	ldr	r3, [pc, #444]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a6e      	ldr	r2, [pc, #440]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c02:	f7fe fd79 	bl	80016f8 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0a:	f7fe fd75 	bl	80016f8 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e255      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c1c:	4b65      	ldr	r3, [pc, #404]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c28:	4b62      	ldr	r3, [pc, #392]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	061b      	lsls	r3, r3, #24
 8002c36:	495f      	ldr	r1, [pc, #380]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
 8002c3c:	e018      	b.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a5c      	ldr	r2, [pc, #368]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002c44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7fe fd55 	bl	80016f8 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c52:	f7fe fd51 	bl	80016f8 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e231      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c64:	4b53      	ldr	r3, [pc, #332]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f0      	bne.n	8002c52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d03c      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d01c      	beq.n	8002cbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c84:	4b4b      	ldr	r3, [pc, #300]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c8a:	4a4a      	ldr	r2, [pc, #296]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c94:	f7fe fd30 	bl	80016f8 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9c:	f7fe fd2c 	bl	80016f8 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e20c      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cae:	4b41      	ldr	r3, [pc, #260]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ef      	beq.n	8002c9c <HAL_RCC_OscConfig+0x3ec>
 8002cbc:	e01b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cc4:	4a3b      	ldr	r2, [pc, #236]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002cc6:	f023 0301 	bic.w	r3, r3, #1
 8002cca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cce:	f7fe fd13 	bl	80016f8 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd6:	f7fe fd0f 	bl	80016f8 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e1ef      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce8:	4b32      	ldr	r3, [pc, #200]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1ef      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80a6 	beq.w	8002e50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d04:	2300      	movs	r3, #0
 8002d06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d08:	4b2a      	ldr	r3, [pc, #168]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10d      	bne.n	8002d30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d14:	4b27      	ldr	r3, [pc, #156]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d18:	4a26      	ldr	r2, [pc, #152]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d20:	4b24      	ldr	r3, [pc, #144]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d30:	4b21      	ldr	r3, [pc, #132]	@ (8002db8 <HAL_RCC_OscConfig+0x508>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d118      	bne.n	8002d6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002db8 <HAL_RCC_OscConfig+0x508>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a1d      	ldr	r2, [pc, #116]	@ (8002db8 <HAL_RCC_OscConfig+0x508>)
 8002d42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d48:	f7fe fcd6 	bl	80016f8 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d50:	f7fe fcd2 	bl	80016f8 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e1b2      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d62:	4b15      	ldr	r3, [pc, #84]	@ (8002db8 <HAL_RCC_OscConfig+0x508>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d108      	bne.n	8002d88 <HAL_RCC_OscConfig+0x4d8>
 8002d76:	4b0f      	ldr	r3, [pc, #60]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d86:	e029      	b.n	8002ddc <HAL_RCC_OscConfig+0x52c>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b05      	cmp	r3, #5
 8002d8e:	d115      	bne.n	8002dbc <HAL_RCC_OscConfig+0x50c>
 8002d90:	4b08      	ldr	r3, [pc, #32]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d96:	4a07      	ldr	r2, [pc, #28]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002da0:	4b04      	ldr	r3, [pc, #16]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da6:	4a03      	ldr	r2, [pc, #12]	@ (8002db4 <HAL_RCC_OscConfig+0x504>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002db0:	e014      	b.n	8002ddc <HAL_RCC_OscConfig+0x52c>
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	4b9a      	ldr	r3, [pc, #616]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc2:	4a99      	ldr	r2, [pc, #612]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dcc:	4b96      	ldr	r3, [pc, #600]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd2:	4a95      	ldr	r2, [pc, #596]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002dd4:	f023 0304 	bic.w	r3, r3, #4
 8002dd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d016      	beq.n	8002e12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7fe fc88 	bl	80016f8 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dec:	f7fe fc84 	bl	80016f8 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e162      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e02:	4b89      	ldr	r3, [pc, #548]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0ed      	beq.n	8002dec <HAL_RCC_OscConfig+0x53c>
 8002e10:	e015      	b.n	8002e3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e12:	f7fe fc71 	bl	80016f8 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7fe fc6d 	bl	80016f8 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e14b      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e30:	4b7d      	ldr	r3, [pc, #500]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1ed      	bne.n	8002e1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e3e:	7ffb      	ldrb	r3, [r7, #31]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d105      	bne.n	8002e50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e44:	4b78      	ldr	r3, [pc, #480]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e48:	4a77      	ldr	r2, [pc, #476]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e4e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d03c      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d01c      	beq.n	8002e9e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e64:	4b70      	ldr	r3, [pc, #448]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e6a:	4a6f      	ldr	r2, [pc, #444]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e74:	f7fe fc40 	bl	80016f8 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e7c:	f7fe fc3c 	bl	80016f8 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e11c      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e8e:	4b66      	ldr	r3, [pc, #408]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0ef      	beq.n	8002e7c <HAL_RCC_OscConfig+0x5cc>
 8002e9c:	e01b      	b.n	8002ed6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e9e:	4b62      	ldr	r3, [pc, #392]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002ea0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ea4:	4a60      	ldr	r2, [pc, #384]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eae:	f7fe fc23 	bl	80016f8 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eb6:	f7fe fc1f 	bl	80016f8 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e0ff      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ec8:	4b57      	ldr	r3, [pc, #348]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002eca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1ef      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 80f3 	beq.w	80030c6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	f040 80c9 	bne.w	800307c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002eea:	4b4f      	ldr	r3, [pc, #316]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f003 0203 	and.w	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d12c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d123      	bne.n	8002f58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f1a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d11b      	bne.n	8002f58 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d113      	bne.n	8002f58 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3a:	085b      	lsrs	r3, r3, #1
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d109      	bne.n	8002f58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	3b01      	subs	r3, #1
 8002f52:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d06b      	beq.n	8003030 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d062      	beq.n	8003024 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f5e:	4b32      	ldr	r3, [pc, #200]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e0ac      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a2d      	ldr	r2, [pc, #180]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002f74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f7a:	f7fe fbbd 	bl	80016f8 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f82:	f7fe fbb9 	bl	80016f8 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e099      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f94:	4b24      	ldr	r3, [pc, #144]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f0      	bne.n	8002f82 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa0:	4b21      	ldr	r3, [pc, #132]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	4b21      	ldr	r3, [pc, #132]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002fb0:	3a01      	subs	r2, #1
 8002fb2:	0112      	lsls	r2, r2, #4
 8002fb4:	4311      	orrs	r1, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002fba:	0212      	lsls	r2, r2, #8
 8002fbc:	4311      	orrs	r1, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fc2:	0852      	lsrs	r2, r2, #1
 8002fc4:	3a01      	subs	r2, #1
 8002fc6:	0552      	lsls	r2, r2, #21
 8002fc8:	4311      	orrs	r1, r2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002fce:	0852      	lsrs	r2, r2, #1
 8002fd0:	3a01      	subs	r2, #1
 8002fd2:	0652      	lsls	r2, r2, #25
 8002fd4:	4311      	orrs	r1, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002fda:	06d2      	lsls	r2, r2, #27
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	4912      	ldr	r1, [pc, #72]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fe4:	4b10      	ldr	r3, [pc, #64]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a0f      	ldr	r2, [pc, #60]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002fea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8002ff6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ffa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ffc:	f7fe fb7c 	bl	80016f8 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe fb78 	bl	80016f8 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e058      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003016:	4b04      	ldr	r3, [pc, #16]	@ (8003028 <HAL_RCC_OscConfig+0x778>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003022:	e050      	b.n	80030c6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e04f      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
 8003028:	40021000 	.word	0x40021000
 800302c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003030:	4b27      	ldr	r3, [pc, #156]	@ (80030d0 <HAL_RCC_OscConfig+0x820>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d144      	bne.n	80030c6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800303c:	4b24      	ldr	r3, [pc, #144]	@ (80030d0 <HAL_RCC_OscConfig+0x820>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a23      	ldr	r2, [pc, #140]	@ (80030d0 <HAL_RCC_OscConfig+0x820>)
 8003042:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003046:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003048:	4b21      	ldr	r3, [pc, #132]	@ (80030d0 <HAL_RCC_OscConfig+0x820>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a20      	ldr	r2, [pc, #128]	@ (80030d0 <HAL_RCC_OscConfig+0x820>)
 800304e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003052:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003054:	f7fe fb50 	bl	80016f8 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe fb4c 	bl	80016f8 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e02c      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306e:	4b18      	ldr	r3, [pc, #96]	@ (80030d0 <HAL_RCC_OscConfig+0x820>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x7ac>
 800307a:	e024      	b.n	80030c6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d01f      	beq.n	80030c2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003082:	4b13      	ldr	r3, [pc, #76]	@ (80030d0 <HAL_RCC_OscConfig+0x820>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a12      	ldr	r2, [pc, #72]	@ (80030d0 <HAL_RCC_OscConfig+0x820>)
 8003088:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800308c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308e:	f7fe fb33 	bl	80016f8 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003096:	f7fe fb2f 	bl	80016f8 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e00f      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a8:	4b09      	ldr	r3, [pc, #36]	@ (80030d0 <HAL_RCC_OscConfig+0x820>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f0      	bne.n	8003096 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80030b4:	4b06      	ldr	r3, [pc, #24]	@ (80030d0 <HAL_RCC_OscConfig+0x820>)
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	4905      	ldr	r1, [pc, #20]	@ (80030d0 <HAL_RCC_OscConfig+0x820>)
 80030ba:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <HAL_RCC_OscConfig+0x824>)
 80030bc:	4013      	ands	r3, r2
 80030be:	60cb      	str	r3, [r1, #12]
 80030c0:	e001      	b.n	80030c6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3720      	adds	r7, #32
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000
 80030d4:	feeefffc 	.word	0xfeeefffc

080030d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0e7      	b.n	80032bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030ec:	4b75      	ldr	r3, [pc, #468]	@ (80032c4 <HAL_RCC_ClockConfig+0x1ec>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d910      	bls.n	800311c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b72      	ldr	r3, [pc, #456]	@ (80032c4 <HAL_RCC_ClockConfig+0x1ec>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 0207 	bic.w	r2, r3, #7
 8003102:	4970      	ldr	r1, [pc, #448]	@ (80032c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b6e      	ldr	r3, [pc, #440]	@ (80032c4 <HAL_RCC_ClockConfig+0x1ec>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0cf      	b.n	80032bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d010      	beq.n	800314a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	4b66      	ldr	r3, [pc, #408]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003134:	429a      	cmp	r2, r3
 8003136:	d908      	bls.n	800314a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003138:	4b63      	ldr	r3, [pc, #396]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4960      	ldr	r1, [pc, #384]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d04c      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315e:	4b5a      	ldr	r3, [pc, #360]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d121      	bne.n	80031ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0a6      	b.n	80032bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003176:	4b54      	ldr	r3, [pc, #336]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d115      	bne.n	80031ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e09a      	b.n	80032bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800318e:	4b4e      	ldr	r3, [pc, #312]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e08e      	b.n	80032bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800319e:	4b4a      	ldr	r3, [pc, #296]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e086      	b.n	80032bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031ae:	4b46      	ldr	r3, [pc, #280]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f023 0203 	bic.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4943      	ldr	r1, [pc, #268]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c0:	f7fe fa9a 	bl	80016f8 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	e00a      	b.n	80031de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c8:	f7fe fa96 	bl	80016f8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e06e      	b.n	80032bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	4b3a      	ldr	r3, [pc, #232]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 020c 	and.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d1eb      	bne.n	80031c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d010      	beq.n	800321e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	4b31      	ldr	r3, [pc, #196]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003208:	429a      	cmp	r2, r3
 800320a:	d208      	bcs.n	800321e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320c:	4b2e      	ldr	r3, [pc, #184]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	492b      	ldr	r1, [pc, #172]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800321e:	4b29      	ldr	r3, [pc, #164]	@ (80032c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d210      	bcs.n	800324e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322c:	4b25      	ldr	r3, [pc, #148]	@ (80032c4 <HAL_RCC_ClockConfig+0x1ec>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f023 0207 	bic.w	r2, r3, #7
 8003234:	4923      	ldr	r1, [pc, #140]	@ (80032c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	4313      	orrs	r3, r2
 800323a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323c:	4b21      	ldr	r3, [pc, #132]	@ (80032c4 <HAL_RCC_ClockConfig+0x1ec>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d001      	beq.n	800324e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e036      	b.n	80032bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800325a:	4b1b      	ldr	r3, [pc, #108]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	4918      	ldr	r1, [pc, #96]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003268:	4313      	orrs	r3, r2
 800326a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d009      	beq.n	800328c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003278:	4b13      	ldr	r3, [pc, #76]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4910      	ldr	r1, [pc, #64]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003288:	4313      	orrs	r3, r2
 800328a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800328c:	f000 f824 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 8003290:	4602      	mov	r2, r0
 8003292:	4b0d      	ldr	r3, [pc, #52]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	091b      	lsrs	r3, r3, #4
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	490b      	ldr	r1, [pc, #44]	@ (80032cc <HAL_RCC_ClockConfig+0x1f4>)
 800329e:	5ccb      	ldrb	r3, [r1, r3]
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	fa22 f303 	lsr.w	r3, r2, r3
 80032a8:	4a09      	ldr	r2, [pc, #36]	@ (80032d0 <HAL_RCC_ClockConfig+0x1f8>)
 80032aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032ac:	4b09      	ldr	r3, [pc, #36]	@ (80032d4 <HAL_RCC_ClockConfig+0x1fc>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe f8c9 	bl	8001448 <HAL_InitTick>
 80032b6:	4603      	mov	r3, r0
 80032b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80032ba:	7afb      	ldrb	r3, [r7, #11]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40022000 	.word	0x40022000
 80032c8:	40021000 	.word	0x40021000
 80032cc:	080084d8 	.word	0x080084d8
 80032d0:	20000000 	.word	0x20000000
 80032d4:	20000004 	.word	0x20000004

080032d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	@ 0x24
 80032dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032e6:	4b3e      	ldr	r3, [pc, #248]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032f0:	4b3b      	ldr	r3, [pc, #236]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x34>
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	2b0c      	cmp	r3, #12
 8003304:	d121      	bne.n	800334a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d11e      	bne.n	800334a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800330c:	4b34      	ldr	r3, [pc, #208]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d107      	bne.n	8003328 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003318:	4b31      	ldr	r3, [pc, #196]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800331a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800331e:	0a1b      	lsrs	r3, r3, #8
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	e005      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003328:	4b2d      	ldr	r3, [pc, #180]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003334:	4a2b      	ldr	r2, [pc, #172]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10d      	bne.n	8003360 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	2b04      	cmp	r3, #4
 800334e:	d102      	bne.n	8003356 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003350:	4b25      	ldr	r3, [pc, #148]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003352:	61bb      	str	r3, [r7, #24]
 8003354:	e004      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b08      	cmp	r3, #8
 800335a:	d101      	bne.n	8003360 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800335c:	4b23      	ldr	r3, [pc, #140]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x114>)
 800335e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	2b0c      	cmp	r3, #12
 8003364:	d134      	bne.n	80033d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003366:	4b1e      	ldr	r3, [pc, #120]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d003      	beq.n	800337e <HAL_RCC_GetSysClockFreq+0xa6>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d003      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0xac>
 800337c:	e005      	b.n	800338a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800337e:	4b1a      	ldr	r3, [pc, #104]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003380:	617b      	str	r3, [r7, #20]
      break;
 8003382:	e005      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003384:	4b19      	ldr	r3, [pc, #100]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x114>)
 8003386:	617b      	str	r3, [r7, #20]
      break;
 8003388:	e002      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	617b      	str	r3, [r7, #20]
      break;
 800338e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003390:	4b13      	ldr	r3, [pc, #76]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	3301      	adds	r3, #1
 800339c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800339e:	4b10      	ldr	r3, [pc, #64]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	fb03 f202 	mul.w	r2, r3, r2
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033b6:	4b0a      	ldr	r3, [pc, #40]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	0e5b      	lsrs	r3, r3, #25
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	3301      	adds	r3, #1
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033d0:	69bb      	ldr	r3, [r7, #24]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3724      	adds	r7, #36	@ 0x24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000
 80033e4:	080084f0 	.word	0x080084f0
 80033e8:	00f42400 	.word	0x00f42400
 80033ec:	007a1200 	.word	0x007a1200

080033f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f4:	4b03      	ldr	r3, [pc, #12]	@ (8003404 <HAL_RCC_GetHCLKFreq+0x14>)
 80033f6:	681b      	ldr	r3, [r3, #0]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000000 	.word	0x20000000

08003408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800340c:	f7ff fff0 	bl	80033f0 <HAL_RCC_GetHCLKFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	4b06      	ldr	r3, [pc, #24]	@ (800342c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	0a1b      	lsrs	r3, r3, #8
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	4904      	ldr	r1, [pc, #16]	@ (8003430 <HAL_RCC_GetPCLK1Freq+0x28>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40021000 	.word	0x40021000
 8003430:	080084e8 	.word	0x080084e8

08003434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003438:	f7ff ffda 	bl	80033f0 <HAL_RCC_GetHCLKFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b06      	ldr	r3, [pc, #24]	@ (8003458 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	0adb      	lsrs	r3, r3, #11
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4904      	ldr	r1, [pc, #16]	@ (800345c <HAL_RCC_GetPCLK2Freq+0x28>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40021000 	.word	0x40021000
 800345c:	080084e8 	.word	0x080084e8

08003460 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	220f      	movs	r2, #15
 800346e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003470:	4b12      	ldr	r3, [pc, #72]	@ (80034bc <HAL_RCC_GetClockConfig+0x5c>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0203 	and.w	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800347c:	4b0f      	ldr	r3, [pc, #60]	@ (80034bc <HAL_RCC_GetClockConfig+0x5c>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003488:	4b0c      	ldr	r3, [pc, #48]	@ (80034bc <HAL_RCC_GetClockConfig+0x5c>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003494:	4b09      	ldr	r3, [pc, #36]	@ (80034bc <HAL_RCC_GetClockConfig+0x5c>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	08db      	lsrs	r3, r3, #3
 800349a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80034a2:	4b07      	ldr	r3, [pc, #28]	@ (80034c0 <HAL_RCC_GetClockConfig+0x60>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0207 	and.w	r2, r3, #7
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	601a      	str	r2, [r3, #0]
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40022000 	.word	0x40022000

080034c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034d0:	4b2a      	ldr	r3, [pc, #168]	@ (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034dc:	f7ff f984 	bl	80027e8 <HAL_PWREx_GetVoltageRange>
 80034e0:	6178      	str	r0, [r7, #20]
 80034e2:	e014      	b.n	800350e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034e4:	4b25      	ldr	r3, [pc, #148]	@ (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e8:	4a24      	ldr	r2, [pc, #144]	@ (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80034f0:	4b22      	ldr	r3, [pc, #136]	@ (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034fc:	f7ff f974 	bl	80027e8 <HAL_PWREx_GetVoltageRange>
 8003500:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003502:	4b1e      	ldr	r3, [pc, #120]	@ (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003506:	4a1d      	ldr	r2, [pc, #116]	@ (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003508:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800350c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003514:	d10b      	bne.n	800352e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b80      	cmp	r3, #128	@ 0x80
 800351a:	d919      	bls.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003520:	d902      	bls.n	8003528 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003522:	2302      	movs	r3, #2
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	e013      	b.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003528:	2301      	movs	r3, #1
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	e010      	b.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b80      	cmp	r3, #128	@ 0x80
 8003532:	d902      	bls.n	800353a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003534:	2303      	movs	r3, #3
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	e00a      	b.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b80      	cmp	r3, #128	@ 0x80
 800353e:	d102      	bne.n	8003546 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003540:	2302      	movs	r3, #2
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	e004      	b.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b70      	cmp	r3, #112	@ 0x70
 800354a:	d101      	bne.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800354c:	2301      	movs	r3, #1
 800354e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003550:	4b0b      	ldr	r3, [pc, #44]	@ (8003580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 0207 	bic.w	r2, r3, #7
 8003558:	4909      	ldr	r1, [pc, #36]	@ (8003580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003560:	4b07      	ldr	r3, [pc, #28]	@ (8003580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	429a      	cmp	r2, r3
 800356c:	d001      	beq.n	8003572 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40021000 	.word	0x40021000
 8003580:	40022000 	.word	0x40022000

08003584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800358c:	2300      	movs	r3, #0
 800358e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003590:	2300      	movs	r3, #0
 8003592:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800359c:	2b00      	cmp	r3, #0
 800359e:	d031      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80035a8:	d01a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80035aa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80035ae:	d814      	bhi.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d009      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035b8:	d10f      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80035ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	4a5c      	ldr	r2, [pc, #368]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035c6:	e00c      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	2100      	movs	r1, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f9de 	bl	8003990 <RCCEx_PLLSAI1_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035d8:	e003      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	74fb      	strb	r3, [r7, #19]
      break;
 80035de:	e000      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80035e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e2:	7cfb      	ldrb	r3, [r7, #19]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035e8:	4b51      	ldr	r3, [pc, #324]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f6:	494e      	ldr	r1, [pc, #312]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80035fe:	e001      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 809e 	beq.w	800374e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003612:	2300      	movs	r3, #0
 8003614:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003616:	4b46      	ldr	r3, [pc, #280]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003626:	2300      	movs	r3, #0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00d      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362c:	4b40      	ldr	r3, [pc, #256]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003630:	4a3f      	ldr	r2, [pc, #252]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003636:	6593      	str	r3, [r2, #88]	@ 0x58
 8003638:	4b3d      	ldr	r3, [pc, #244]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800363a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003644:	2301      	movs	r3, #1
 8003646:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003648:	4b3a      	ldr	r3, [pc, #232]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a39      	ldr	r2, [pc, #228]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800364e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003652:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003654:	f7fe f850 	bl	80016f8 <HAL_GetTick>
 8003658:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800365a:	e009      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365c:	f7fe f84c 	bl	80016f8 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d902      	bls.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	74fb      	strb	r3, [r7, #19]
        break;
 800366e:	e005      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003670:	4b30      	ldr	r3, [pc, #192]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0ef      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800367c:	7cfb      	ldrb	r3, [r7, #19]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d15a      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003682:	4b2b      	ldr	r3, [pc, #172]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003688:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800368c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01e      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	429a      	cmp	r2, r3
 800369c:	d019      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800369e:	4b24      	ldr	r3, [pc, #144]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036aa:	4b21      	ldr	r3, [pc, #132]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036ca:	4a19      	ldr	r2, [pc, #100]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d016      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7fe f80c 	bl	80016f8 <HAL_GetTick>
 80036e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e2:	e00b      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e4:	f7fe f808 	bl	80016f8 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d902      	bls.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	74fb      	strb	r3, [r7, #19]
            break;
 80036fa:	e006      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0ec      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800370a:	7cfb      	ldrb	r3, [r7, #19]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003710:	4b07      	ldr	r3, [pc, #28]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003716:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800371e:	4904      	ldr	r1, [pc, #16]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003726:	e009      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003728:	7cfb      	ldrb	r3, [r7, #19]
 800372a:	74bb      	strb	r3, [r7, #18]
 800372c:	e006      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000
 8003734:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800373c:	7c7b      	ldrb	r3, [r7, #17]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d105      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003742:	4b8a      	ldr	r3, [pc, #552]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003746:	4a89      	ldr	r2, [pc, #548]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003748:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800374c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800375a:	4b84      	ldr	r3, [pc, #528]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003760:	f023 0203 	bic.w	r2, r3, #3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	4980      	ldr	r1, [pc, #512]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800377c:	4b7b      	ldr	r3, [pc, #492]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003782:	f023 020c 	bic.w	r2, r3, #12
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	4978      	ldr	r1, [pc, #480]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800379e:	4b73      	ldr	r3, [pc, #460]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ac:	496f      	ldr	r1, [pc, #444]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037c0:	4b6a      	ldr	r3, [pc, #424]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ce:	4967      	ldr	r1, [pc, #412]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037e2:	4b62      	ldr	r3, [pc, #392]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f0:	495e      	ldr	r1, [pc, #376]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003804:	4b59      	ldr	r3, [pc, #356]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003812:	4956      	ldr	r1, [pc, #344]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003826:	4b51      	ldr	r3, [pc, #324]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003834:	494d      	ldr	r1, [pc, #308]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d028      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003848:	4b48      	ldr	r3, [pc, #288]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	4945      	ldr	r1, [pc, #276]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003862:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003866:	d106      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003868:	4b40      	ldr	r3, [pc, #256]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4a3f      	ldr	r2, [pc, #252]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800386e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003872:	60d3      	str	r3, [r2, #12]
 8003874:	e011      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800387e:	d10c      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3304      	adds	r3, #4
 8003884:	2101      	movs	r1, #1
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f882 	bl	8003990 <RCCEx_PLLSAI1_Config>
 800388c:	4603      	mov	r3, r0
 800388e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003890:	7cfb      	ldrb	r3, [r7, #19]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003896:	7cfb      	ldrb	r3, [r7, #19]
 8003898:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d028      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038a6:	4b31      	ldr	r3, [pc, #196]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b4:	492d      	ldr	r1, [pc, #180]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038c4:	d106      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038c6:	4b29      	ldr	r3, [pc, #164]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	4a28      	ldr	r2, [pc, #160]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038d0:	60d3      	str	r3, [r2, #12]
 80038d2:	e011      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3304      	adds	r3, #4
 80038e2:	2101      	movs	r1, #1
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 f853 	bl	8003990 <RCCEx_PLLSAI1_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038ee:	7cfb      	ldrb	r3, [r7, #19]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01c      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003904:	4b19      	ldr	r3, [pc, #100]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003912:	4916      	ldr	r1, [pc, #88]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800391e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003922:	d10c      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3304      	adds	r3, #4
 8003928:	2102      	movs	r1, #2
 800392a:	4618      	mov	r0, r3
 800392c:	f000 f830 	bl	8003990 <RCCEx_PLLSAI1_Config>
 8003930:	4603      	mov	r3, r0
 8003932:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003934:	7cfb      	ldrb	r3, [r7, #19]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800393a:	7cfb      	ldrb	r3, [r7, #19]
 800393c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800394a:	4b08      	ldr	r3, [pc, #32]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003950:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003958:	4904      	ldr	r1, [pc, #16]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003960:	7cbb      	ldrb	r3, [r7, #18]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000

08003970 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003974:	4b05      	ldr	r3, [pc, #20]	@ (800398c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a04      	ldr	r2, [pc, #16]	@ (800398c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800397a:	f043 0304 	orr.w	r3, r3, #4
 800397e:	6013      	str	r3, [r2, #0]
}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40021000 	.word	0x40021000

08003990 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800399e:	4b74      	ldr	r3, [pc, #464]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d018      	beq.n	80039dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039aa:	4b71      	ldr	r3, [pc, #452]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 0203 	and.w	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d10d      	bne.n	80039d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
       ||
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039c2:	4b6b      	ldr	r3, [pc, #428]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
       ||
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d047      	beq.n	8003a66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
 80039da:	e044      	b.n	8003a66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d018      	beq.n	8003a16 <RCCEx_PLLSAI1_Config+0x86>
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d825      	bhi.n	8003a34 <RCCEx_PLLSAI1_Config+0xa4>
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d002      	beq.n	80039f2 <RCCEx_PLLSAI1_Config+0x62>
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d009      	beq.n	8003a04 <RCCEx_PLLSAI1_Config+0x74>
 80039f0:	e020      	b.n	8003a34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d11d      	bne.n	8003a3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a02:	e01a      	b.n	8003a3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a04:	4b5a      	ldr	r3, [pc, #360]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d116      	bne.n	8003a3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a14:	e013      	b.n	8003a3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a16:	4b56      	ldr	r3, [pc, #344]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10f      	bne.n	8003a42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a22:	4b53      	ldr	r3, [pc, #332]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a32:	e006      	b.n	8003a42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      break;
 8003a38:	e004      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a3a:	bf00      	nop
 8003a3c:	e002      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a3e:	bf00      	nop
 8003a40:	e000      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a42:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10d      	bne.n	8003a66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a4a:	4b49      	ldr	r3, [pc, #292]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	4943      	ldr	r1, [pc, #268]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d17c      	bne.n	8003b66 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a6c:	4b40      	ldr	r3, [pc, #256]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a3f      	ldr	r2, [pc, #252]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a78:	f7fd fe3e 	bl	80016f8 <HAL_GetTick>
 8003a7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a7e:	e009      	b.n	8003a94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a80:	f7fd fe3a 	bl	80016f8 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d902      	bls.n	8003a94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	73fb      	strb	r3, [r7, #15]
        break;
 8003a92:	e005      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a94:	4b36      	ldr	r3, [pc, #216]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ef      	bne.n	8003a80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d15f      	bne.n	8003b66 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d110      	bne.n	8003ace <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aac:	4b30      	ldr	r3, [pc, #192]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003ab4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6892      	ldr	r2, [r2, #8]
 8003abc:	0211      	lsls	r1, r2, #8
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68d2      	ldr	r2, [r2, #12]
 8003ac2:	06d2      	lsls	r2, r2, #27
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	492a      	ldr	r1, [pc, #168]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	610b      	str	r3, [r1, #16]
 8003acc:	e027      	b.n	8003b1e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d112      	bne.n	8003afa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ad4:	4b26      	ldr	r3, [pc, #152]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003adc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6892      	ldr	r2, [r2, #8]
 8003ae4:	0211      	lsls	r1, r2, #8
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6912      	ldr	r2, [r2, #16]
 8003aea:	0852      	lsrs	r2, r2, #1
 8003aec:	3a01      	subs	r2, #1
 8003aee:	0552      	lsls	r2, r2, #21
 8003af0:	430a      	orrs	r2, r1
 8003af2:	491f      	ldr	r1, [pc, #124]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	610b      	str	r3, [r1, #16]
 8003af8:	e011      	b.n	8003b1e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003afa:	4b1d      	ldr	r3, [pc, #116]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b02:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6892      	ldr	r2, [r2, #8]
 8003b0a:	0211      	lsls	r1, r2, #8
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6952      	ldr	r2, [r2, #20]
 8003b10:	0852      	lsrs	r2, r2, #1
 8003b12:	3a01      	subs	r2, #1
 8003b14:	0652      	lsls	r2, r2, #25
 8003b16:	430a      	orrs	r2, r1
 8003b18:	4915      	ldr	r1, [pc, #84]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b1e:	4b14      	ldr	r3, [pc, #80]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a13      	ldr	r2, [pc, #76]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b28:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2a:	f7fd fde5 	bl	80016f8 <HAL_GetTick>
 8003b2e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b30:	e009      	b.n	8003b46 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b32:	f7fd fde1 	bl	80016f8 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d902      	bls.n	8003b46 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	73fb      	strb	r3, [r7, #15]
          break;
 8003b44:	e005      	b.n	8003b52 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b46:	4b0a      	ldr	r3, [pc, #40]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0ef      	beq.n	8003b32 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b58:	4b05      	ldr	r3, [pc, #20]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	4903      	ldr	r1, [pc, #12]	@ (8003b70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40021000 	.word	0x40021000

08003b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e049      	b.n	8003c1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f841 	bl	8003c22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f000 f9be 	bl	8003f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d001      	beq.n	8003c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e03b      	b.n	8003cc8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a19      	ldr	r2, [pc, #100]	@ (8003cd4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d009      	beq.n	8003c86 <HAL_TIM_Base_Start_IT+0x4e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c7a:	d004      	beq.n	8003c86 <HAL_TIM_Base_Start_IT+0x4e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a15      	ldr	r2, [pc, #84]	@ (8003cd8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d115      	bne.n	8003cb2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	4b13      	ldr	r3, [pc, #76]	@ (8003cdc <HAL_TIM_Base_Start_IT+0xa4>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b06      	cmp	r3, #6
 8003c96:	d015      	beq.n	8003cc4 <HAL_TIM_Base_Start_IT+0x8c>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c9e:	d011      	beq.n	8003cc4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb0:	e008      	b.n	8003cc4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0201 	orr.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	e000      	b.n	8003cc6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	00010007 	.word	0x00010007

08003ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d020      	beq.n	8003d44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01b      	beq.n	8003d44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0202 	mvn.w	r2, #2
 8003d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f8e4 	bl	8003ef8 <HAL_TIM_IC_CaptureCallback>
 8003d30:	e005      	b.n	8003d3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f8d6 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f8e7 	bl	8003f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d020      	beq.n	8003d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01b      	beq.n	8003d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0204 	mvn.w	r2, #4
 8003d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f8be 	bl	8003ef8 <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f8b0 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f8c1 	bl	8003f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d020      	beq.n	8003ddc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d01b      	beq.n	8003ddc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0208 	mvn.w	r2, #8
 8003dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2204      	movs	r2, #4
 8003db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f898 	bl	8003ef8 <HAL_TIM_IC_CaptureCallback>
 8003dc8:	e005      	b.n	8003dd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f88a 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f89b 	bl	8003f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d020      	beq.n	8003e28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01b      	beq.n	8003e28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0210 	mvn.w	r2, #16
 8003df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f872 	bl	8003ef8 <HAL_TIM_IC_CaptureCallback>
 8003e14:	e005      	b.n	8003e22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f864 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f875 	bl	8003f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00c      	beq.n	8003e4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0201 	mvn.w	r2, #1
 8003e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fd f9bc 	bl	80011c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00c      	beq.n	8003e70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f8d0 	bl	8004010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00c      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d007      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f8c8 	bl	8004024 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00c      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d007      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f834 	bl	8003f20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00c      	beq.n	8003edc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0220 	mvn.w	r2, #32
 8003ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f890 	bl	8003ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a2a      	ldr	r2, [pc, #168]	@ (8003ff0 <TIM_Base_SetConfig+0xbc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d003      	beq.n	8003f54 <TIM_Base_SetConfig+0x20>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f52:	d108      	bne.n	8003f66 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a21      	ldr	r2, [pc, #132]	@ (8003ff0 <TIM_Base_SetConfig+0xbc>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00b      	beq.n	8003f86 <TIM_Base_SetConfig+0x52>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f74:	d007      	beq.n	8003f86 <TIM_Base_SetConfig+0x52>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff4 <TIM_Base_SetConfig+0xc0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d003      	beq.n	8003f86 <TIM_Base_SetConfig+0x52>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff8 <TIM_Base_SetConfig+0xc4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d108      	bne.n	8003f98 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8003ff0 <TIM_Base_SetConfig+0xbc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d007      	beq.n	8003fd4 <TIM_Base_SetConfig+0xa0>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a0b      	ldr	r2, [pc, #44]	@ (8003ff4 <TIM_Base_SetConfig+0xc0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_Base_SetConfig+0xa0>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff8 <TIM_Base_SetConfig+0xc4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d103      	bne.n	8003fdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	615a      	str	r2, [r3, #20]
}
 8003fe2:	bf00      	nop
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	40014000 	.word	0x40014000
 8003ff8:	40014400 	.word	0x40014400

08003ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e040      	b.n	80040cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fd f94a 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2224      	movs	r2, #36	@ 0x24
 8004064:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0201 	bic.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fade 	bl	8004640 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f8af 	bl	80041e8 <UART_SetConfig>
 800408a:	4603      	mov	r3, r0
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e01b      	b.n	80040cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fb5d 	bl	8004784 <UART_CheckIdleState>
 80040ca:	4603      	mov	r3, r0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	@ 0x28
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d177      	bne.n	80041dc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <HAL_UART_Transmit+0x24>
 80040f2:	88fb      	ldrh	r3, [r7, #6]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e070      	b.n	80041de <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2221      	movs	r2, #33	@ 0x21
 8004108:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800410a:	f7fd faf5 	bl	80016f8 <HAL_GetTick>
 800410e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	88fa      	ldrh	r2, [r7, #6]
 8004114:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	88fa      	ldrh	r2, [r7, #6]
 800411c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004128:	d108      	bne.n	800413c <HAL_UART_Transmit+0x68>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d104      	bne.n	800413c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	e003      	b.n	8004144 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004144:	e02f      	b.n	80041a6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2200      	movs	r2, #0
 800414e:	2180      	movs	r1, #128	@ 0x80
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fbbf 	bl	80048d4 <UART_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d004      	beq.n	8004166 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e03b      	b.n	80041de <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10b      	bne.n	8004184 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	881a      	ldrh	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004178:	b292      	uxth	r2, r2
 800417a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	3302      	adds	r3, #2
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	e007      	b.n	8004194 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	781a      	ldrb	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	3301      	adds	r3, #1
 8004192:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1c9      	bne.n	8004146 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2200      	movs	r2, #0
 80041ba:	2140      	movs	r1, #64	@ 0x40
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 fb89 	bl	80048d4 <UART_WaitOnFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d004      	beq.n	80041d2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e005      	b.n	80041de <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	e000      	b.n	80041de <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80041dc:	2302      	movs	r3, #2
  }
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3720      	adds	r7, #32
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041ec:	b08a      	sub	sp, #40	@ 0x28
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	431a      	orrs	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	431a      	orrs	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	4313      	orrs	r3, r2
 800420e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4bb4      	ldr	r3, [pc, #720]	@ (80044e8 <UART_SetConfig+0x300>)
 8004218:	4013      	ands	r3, r2
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004220:	430b      	orrs	r3, r1
 8004222:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4aa9      	ldr	r2, [pc, #676]	@ (80044ec <UART_SetConfig+0x304>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004250:	4313      	orrs	r3, r2
 8004252:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004264:	430a      	orrs	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4aa0      	ldr	r2, [pc, #640]	@ (80044f0 <UART_SetConfig+0x308>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d126      	bne.n	80042c0 <UART_SetConfig+0xd8>
 8004272:	4ba0      	ldr	r3, [pc, #640]	@ (80044f4 <UART_SetConfig+0x30c>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	2b03      	cmp	r3, #3
 800427e:	d81b      	bhi.n	80042b8 <UART_SetConfig+0xd0>
 8004280:	a201      	add	r2, pc, #4	@ (adr r2, 8004288 <UART_SetConfig+0xa0>)
 8004282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004286:	bf00      	nop
 8004288:	08004299 	.word	0x08004299
 800428c:	080042a9 	.word	0x080042a9
 8004290:	080042a1 	.word	0x080042a1
 8004294:	080042b1 	.word	0x080042b1
 8004298:	2301      	movs	r3, #1
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800429e:	e080      	b.n	80043a2 <UART_SetConfig+0x1ba>
 80042a0:	2302      	movs	r3, #2
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042a6:	e07c      	b.n	80043a2 <UART_SetConfig+0x1ba>
 80042a8:	2304      	movs	r3, #4
 80042aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ae:	e078      	b.n	80043a2 <UART_SetConfig+0x1ba>
 80042b0:	2308      	movs	r3, #8
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042b6:	e074      	b.n	80043a2 <UART_SetConfig+0x1ba>
 80042b8:	2310      	movs	r3, #16
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042be:	e070      	b.n	80043a2 <UART_SetConfig+0x1ba>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a8c      	ldr	r2, [pc, #560]	@ (80044f8 <UART_SetConfig+0x310>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d138      	bne.n	800433c <UART_SetConfig+0x154>
 80042ca:	4b8a      	ldr	r3, [pc, #552]	@ (80044f4 <UART_SetConfig+0x30c>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b0c      	cmp	r3, #12
 80042d6:	d82d      	bhi.n	8004334 <UART_SetConfig+0x14c>
 80042d8:	a201      	add	r2, pc, #4	@ (adr r2, 80042e0 <UART_SetConfig+0xf8>)
 80042da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042de:	bf00      	nop
 80042e0:	08004315 	.word	0x08004315
 80042e4:	08004335 	.word	0x08004335
 80042e8:	08004335 	.word	0x08004335
 80042ec:	08004335 	.word	0x08004335
 80042f0:	08004325 	.word	0x08004325
 80042f4:	08004335 	.word	0x08004335
 80042f8:	08004335 	.word	0x08004335
 80042fc:	08004335 	.word	0x08004335
 8004300:	0800431d 	.word	0x0800431d
 8004304:	08004335 	.word	0x08004335
 8004308:	08004335 	.word	0x08004335
 800430c:	08004335 	.word	0x08004335
 8004310:	0800432d 	.word	0x0800432d
 8004314:	2300      	movs	r3, #0
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800431a:	e042      	b.n	80043a2 <UART_SetConfig+0x1ba>
 800431c:	2302      	movs	r3, #2
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004322:	e03e      	b.n	80043a2 <UART_SetConfig+0x1ba>
 8004324:	2304      	movs	r3, #4
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800432a:	e03a      	b.n	80043a2 <UART_SetConfig+0x1ba>
 800432c:	2308      	movs	r3, #8
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004332:	e036      	b.n	80043a2 <UART_SetConfig+0x1ba>
 8004334:	2310      	movs	r3, #16
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433a:	e032      	b.n	80043a2 <UART_SetConfig+0x1ba>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a6a      	ldr	r2, [pc, #424]	@ (80044ec <UART_SetConfig+0x304>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d12a      	bne.n	800439c <UART_SetConfig+0x1b4>
 8004346:	4b6b      	ldr	r3, [pc, #428]	@ (80044f4 <UART_SetConfig+0x30c>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004350:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004354:	d01a      	beq.n	800438c <UART_SetConfig+0x1a4>
 8004356:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800435a:	d81b      	bhi.n	8004394 <UART_SetConfig+0x1ac>
 800435c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004360:	d00c      	beq.n	800437c <UART_SetConfig+0x194>
 8004362:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004366:	d815      	bhi.n	8004394 <UART_SetConfig+0x1ac>
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <UART_SetConfig+0x18c>
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004370:	d008      	beq.n	8004384 <UART_SetConfig+0x19c>
 8004372:	e00f      	b.n	8004394 <UART_SetConfig+0x1ac>
 8004374:	2300      	movs	r3, #0
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800437a:	e012      	b.n	80043a2 <UART_SetConfig+0x1ba>
 800437c:	2302      	movs	r3, #2
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004382:	e00e      	b.n	80043a2 <UART_SetConfig+0x1ba>
 8004384:	2304      	movs	r3, #4
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800438a:	e00a      	b.n	80043a2 <UART_SetConfig+0x1ba>
 800438c:	2308      	movs	r3, #8
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004392:	e006      	b.n	80043a2 <UART_SetConfig+0x1ba>
 8004394:	2310      	movs	r3, #16
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800439a:	e002      	b.n	80043a2 <UART_SetConfig+0x1ba>
 800439c:	2310      	movs	r3, #16
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a51      	ldr	r2, [pc, #324]	@ (80044ec <UART_SetConfig+0x304>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d17a      	bne.n	80044a2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d824      	bhi.n	80043fe <UART_SetConfig+0x216>
 80043b4:	a201      	add	r2, pc, #4	@ (adr r2, 80043bc <UART_SetConfig+0x1d4>)
 80043b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ba:	bf00      	nop
 80043bc:	080043e1 	.word	0x080043e1
 80043c0:	080043ff 	.word	0x080043ff
 80043c4:	080043e9 	.word	0x080043e9
 80043c8:	080043ff 	.word	0x080043ff
 80043cc:	080043ef 	.word	0x080043ef
 80043d0:	080043ff 	.word	0x080043ff
 80043d4:	080043ff 	.word	0x080043ff
 80043d8:	080043ff 	.word	0x080043ff
 80043dc:	080043f7 	.word	0x080043f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043e0:	f7ff f812 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 80043e4:	61f8      	str	r0, [r7, #28]
        break;
 80043e6:	e010      	b.n	800440a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043e8:	4b44      	ldr	r3, [pc, #272]	@ (80044fc <UART_SetConfig+0x314>)
 80043ea:	61fb      	str	r3, [r7, #28]
        break;
 80043ec:	e00d      	b.n	800440a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ee:	f7fe ff73 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 80043f2:	61f8      	str	r0, [r7, #28]
        break;
 80043f4:	e009      	b.n	800440a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043fa:	61fb      	str	r3, [r7, #28]
        break;
 80043fc:	e005      	b.n	800440a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004408:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 8107 	beq.w	8004620 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	4413      	add	r3, r2
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	429a      	cmp	r2, r3
 8004420:	d305      	bcc.n	800442e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	429a      	cmp	r2, r3
 800442c:	d903      	bls.n	8004436 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004434:	e0f4      	b.n	8004620 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	2200      	movs	r2, #0
 800443a:	461c      	mov	r4, r3
 800443c:	4615      	mov	r5, r2
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	022b      	lsls	r3, r5, #8
 8004448:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800444c:	0222      	lsls	r2, r4, #8
 800444e:	68f9      	ldr	r1, [r7, #12]
 8004450:	6849      	ldr	r1, [r1, #4]
 8004452:	0849      	lsrs	r1, r1, #1
 8004454:	2000      	movs	r0, #0
 8004456:	4688      	mov	r8, r1
 8004458:	4681      	mov	r9, r0
 800445a:	eb12 0a08 	adds.w	sl, r2, r8
 800445e:	eb43 0b09 	adc.w	fp, r3, r9
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004470:	4650      	mov	r0, sl
 8004472:	4659      	mov	r1, fp
 8004474:	f7fc faf2 	bl	8000a5c <__aeabi_uldivmod>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4613      	mov	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004486:	d308      	bcc.n	800449a <UART_SetConfig+0x2b2>
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800448e:	d204      	bcs.n	800449a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	60da      	str	r2, [r3, #12]
 8004498:	e0c2      	b.n	8004620 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044a0:	e0be      	b.n	8004620 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044aa:	d16a      	bne.n	8004582 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80044ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d834      	bhi.n	800451e <UART_SetConfig+0x336>
 80044b4:	a201      	add	r2, pc, #4	@ (adr r2, 80044bc <UART_SetConfig+0x2d4>)
 80044b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ba:	bf00      	nop
 80044bc:	080044e1 	.word	0x080044e1
 80044c0:	08004501 	.word	0x08004501
 80044c4:	08004509 	.word	0x08004509
 80044c8:	0800451f 	.word	0x0800451f
 80044cc:	0800450f 	.word	0x0800450f
 80044d0:	0800451f 	.word	0x0800451f
 80044d4:	0800451f 	.word	0x0800451f
 80044d8:	0800451f 	.word	0x0800451f
 80044dc:	08004517 	.word	0x08004517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044e0:	f7fe ff92 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 80044e4:	61f8      	str	r0, [r7, #28]
        break;
 80044e6:	e020      	b.n	800452a <UART_SetConfig+0x342>
 80044e8:	efff69f3 	.word	0xefff69f3
 80044ec:	40008000 	.word	0x40008000
 80044f0:	40013800 	.word	0x40013800
 80044f4:	40021000 	.word	0x40021000
 80044f8:	40004400 	.word	0x40004400
 80044fc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004500:	f7fe ff98 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 8004504:	61f8      	str	r0, [r7, #28]
        break;
 8004506:	e010      	b.n	800452a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004508:	4b4c      	ldr	r3, [pc, #304]	@ (800463c <UART_SetConfig+0x454>)
 800450a:	61fb      	str	r3, [r7, #28]
        break;
 800450c:	e00d      	b.n	800452a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800450e:	f7fe fee3 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 8004512:	61f8      	str	r0, [r7, #28]
        break;
 8004514:	e009      	b.n	800452a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800451a:	61fb      	str	r3, [r7, #28]
        break;
 800451c:	e005      	b.n	800452a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004528:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d077      	beq.n	8004620 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	005a      	lsls	r2, r3, #1
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	441a      	add	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b0f      	cmp	r3, #15
 800454a:	d916      	bls.n	800457a <UART_SetConfig+0x392>
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004552:	d212      	bcs.n	800457a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	b29b      	uxth	r3, r3
 8004558:	f023 030f 	bic.w	r3, r3, #15
 800455c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	b29b      	uxth	r3, r3
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	b29a      	uxth	r2, r3
 800456a:	8afb      	ldrh	r3, [r7, #22]
 800456c:	4313      	orrs	r3, r2
 800456e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	8afa      	ldrh	r2, [r7, #22]
 8004576:	60da      	str	r2, [r3, #12]
 8004578:	e052      	b.n	8004620 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004580:	e04e      	b.n	8004620 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004582:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004586:	2b08      	cmp	r3, #8
 8004588:	d827      	bhi.n	80045da <UART_SetConfig+0x3f2>
 800458a:	a201      	add	r2, pc, #4	@ (adr r2, 8004590 <UART_SetConfig+0x3a8>)
 800458c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004590:	080045b5 	.word	0x080045b5
 8004594:	080045bd 	.word	0x080045bd
 8004598:	080045c5 	.word	0x080045c5
 800459c:	080045db 	.word	0x080045db
 80045a0:	080045cb 	.word	0x080045cb
 80045a4:	080045db 	.word	0x080045db
 80045a8:	080045db 	.word	0x080045db
 80045ac:	080045db 	.word	0x080045db
 80045b0:	080045d3 	.word	0x080045d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b4:	f7fe ff28 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 80045b8:	61f8      	str	r0, [r7, #28]
        break;
 80045ba:	e014      	b.n	80045e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045bc:	f7fe ff3a 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 80045c0:	61f8      	str	r0, [r7, #28]
        break;
 80045c2:	e010      	b.n	80045e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c4:	4b1d      	ldr	r3, [pc, #116]	@ (800463c <UART_SetConfig+0x454>)
 80045c6:	61fb      	str	r3, [r7, #28]
        break;
 80045c8:	e00d      	b.n	80045e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ca:	f7fe fe85 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 80045ce:	61f8      	str	r0, [r7, #28]
        break;
 80045d0:	e009      	b.n	80045e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045d6:	61fb      	str	r3, [r7, #28]
        break;
 80045d8:	e005      	b.n	80045e6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045e4:	bf00      	nop
    }

    if (pclk != 0U)
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d019      	beq.n	8004620 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	085a      	lsrs	r2, r3, #1
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	441a      	add	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b0f      	cmp	r3, #15
 8004604:	d909      	bls.n	800461a <UART_SetConfig+0x432>
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800460c:	d205      	bcs.n	800461a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60da      	str	r2, [r3, #12]
 8004618:	e002      	b.n	8004620 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800462c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004630:	4618      	mov	r0, r3
 8004632:	3728      	adds	r7, #40	@ 0x28
 8004634:	46bd      	mov	sp, r7
 8004636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800463a:	bf00      	nop
 800463c:	00f42400 	.word	0x00f42400

08004640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01a      	beq.n	8004756 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800473e:	d10a      	bne.n	8004756 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b098      	sub	sp, #96	@ 0x60
 8004788:	af02      	add	r7, sp, #8
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004794:	f7fc ffb0 	bl	80016f8 <HAL_GetTick>
 8004798:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d12e      	bne.n	8004806 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b0:	2200      	movs	r2, #0
 80047b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f88c 	bl	80048d4 <UART_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d021      	beq.n	8004806 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ca:	e853 3f00 	ldrex	r3, [r3]
 80047ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80047e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047e8:	e841 2300 	strex	r3, r2, [r1]
 80047ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1e6      	bne.n	80047c2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e062      	b.n	80048cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b04      	cmp	r3, #4
 8004812:	d149      	bne.n	80048a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004814:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800481c:	2200      	movs	r2, #0
 800481e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f856 	bl	80048d4 <UART_WaitOnFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d03c      	beq.n	80048a8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	623b      	str	r3, [r7, #32]
   return(result);
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004842:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	461a      	mov	r2, r3
 800484a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800484c:	633b      	str	r3, [r7, #48]	@ 0x30
 800484e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800485a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e6      	bne.n	800482e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3308      	adds	r3, #8
 8004866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3308      	adds	r3, #8
 800487e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004880:	61fa      	str	r2, [r7, #28]
 8004882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	69b9      	ldr	r1, [r7, #24]
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	e841 2300 	strex	r3, r2, [r1]
 800488c:	617b      	str	r3, [r7, #20]
   return(result);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e5      	bne.n	8004860 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e011      	b.n	80048cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3758      	adds	r7, #88	@ 0x58
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	4613      	mov	r3, r2
 80048e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e4:	e049      	b.n	800497a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d045      	beq.n	800497a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ee:	f7fc ff03 	bl	80016f8 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d302      	bcc.n	8004904 <UART_WaitOnFlagUntilTimeout+0x30>
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e048      	b.n	800499a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	d031      	beq.n	800497a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b08      	cmp	r3, #8
 8004922:	d110      	bne.n	8004946 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2208      	movs	r2, #8
 800492a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f838 	bl	80049a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2208      	movs	r2, #8
 8004936:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e029      	b.n	800499a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004954:	d111      	bne.n	800497a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800495e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f81e 	bl	80049a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2220      	movs	r2, #32
 800496a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e00f      	b.n	800499a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69da      	ldr	r2, [r3, #28]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4013      	ands	r3, r2
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	429a      	cmp	r2, r3
 8004988:	bf0c      	ite	eq
 800498a:	2301      	moveq	r3, #1
 800498c:	2300      	movne	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	461a      	mov	r2, r3
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	429a      	cmp	r2, r3
 8004996:	d0a6      	beq.n	80048e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b095      	sub	sp, #84	@ 0x54
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80049ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e6      	bne.n	80049aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3308      	adds	r3, #8
 80049e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3308      	adds	r3, #8
 80049fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e5      	bne.n	80049dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d118      	bne.n	8004a4a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	e853 3f00 	ldrex	r3, [r3]
 8004a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f023 0310 	bic.w	r3, r3, #16
 8004a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a36:	61bb      	str	r3, [r7, #24]
 8004a38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3a:	6979      	ldr	r1, [r7, #20]
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	e841 2300 	strex	r3, r2, [r1]
 8004a42:	613b      	str	r3, [r7, #16]
   return(result);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1e6      	bne.n	8004a18 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a5e:	bf00      	nop
 8004a60:	3754      	adds	r7, #84	@ 0x54
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
	...

08004a6c <__NVIC_SetPriority>:
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4603      	mov	r3, r0
 8004a74:	6039      	str	r1, [r7, #0]
 8004a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	db0a      	blt.n	8004a96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	490c      	ldr	r1, [pc, #48]	@ (8004ab8 <__NVIC_SetPriority+0x4c>)
 8004a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a8a:	0112      	lsls	r2, r2, #4
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	440b      	add	r3, r1
 8004a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004a94:	e00a      	b.n	8004aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	4908      	ldr	r1, [pc, #32]	@ (8004abc <__NVIC_SetPriority+0x50>)
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	3b04      	subs	r3, #4
 8004aa4:	0112      	lsls	r2, r2, #4
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	761a      	strb	r2, [r3, #24]
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	e000e100 	.word	0xe000e100
 8004abc:	e000ed00 	.word	0xe000ed00

08004ac0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ac4:	4b05      	ldr	r3, [pc, #20]	@ (8004adc <SysTick_Handler+0x1c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004ac8:	f001 ff34 	bl	8006934 <xTaskGetSchedulerState>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d001      	beq.n	8004ad6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004ad2:	f002 fd29 	bl	8007528 <xPortSysTickHandler>
  }
}
 8004ad6:	bf00      	nop
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	e000e010 	.word	0xe000e010

08004ae0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	f06f 0004 	mvn.w	r0, #4
 8004aea:	f7ff ffbf 	bl	8004a6c <__NVIC_SetPriority>
#endif
}
 8004aee:	bf00      	nop
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004afa:	f3ef 8305 	mrs	r3, IPSR
 8004afe:	603b      	str	r3, [r7, #0]
  return(result);
 8004b00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004b06:	f06f 0305 	mvn.w	r3, #5
 8004b0a:	607b      	str	r3, [r7, #4]
 8004b0c:	e00c      	b.n	8004b28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b38 <osKernelInitialize+0x44>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d105      	bne.n	8004b22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b16:	4b08      	ldr	r3, [pc, #32]	@ (8004b38 <osKernelInitialize+0x44>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	607b      	str	r3, [r7, #4]
 8004b20:	e002      	b.n	8004b28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295
 8004b26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b28:	687b      	ldr	r3, [r7, #4]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20000240 	.word	0x20000240

08004b3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b42:	f3ef 8305 	mrs	r3, IPSR
 8004b46:	603b      	str	r3, [r7, #0]
  return(result);
 8004b48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004b4e:	f06f 0305 	mvn.w	r3, #5
 8004b52:	607b      	str	r3, [r7, #4]
 8004b54:	e010      	b.n	8004b78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b56:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <osKernelStart+0x48>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d109      	bne.n	8004b72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b5e:	f7ff ffbf 	bl	8004ae0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b62:	4b08      	ldr	r3, [pc, #32]	@ (8004b84 <osKernelStart+0x48>)
 8004b64:	2202      	movs	r2, #2
 8004b66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b68:	f001 fa80 	bl	800606c <vTaskStartScheduler>
      stat = osOK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	607b      	str	r3, [r7, #4]
 8004b70:	e002      	b.n	8004b78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004b72:	f04f 33ff 	mov.w	r3, #4294967295
 8004b76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b78:	687b      	ldr	r3, [r7, #4]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000240 	.word	0x20000240

08004b88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08e      	sub	sp, #56	@ 0x38
 8004b8c:	af04      	add	r7, sp, #16
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b98:	f3ef 8305 	mrs	r3, IPSR
 8004b9c:	617b      	str	r3, [r7, #20]
  return(result);
 8004b9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d17e      	bne.n	8004ca2 <osThreadNew+0x11a>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d07b      	beq.n	8004ca2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004baa:	2380      	movs	r3, #128	@ 0x80
 8004bac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004bae:	2318      	movs	r3, #24
 8004bb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d045      	beq.n	8004c4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <osThreadNew+0x48>
        name = attr->name;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <osThreadNew+0x6e>
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	2b38      	cmp	r3, #56	@ 0x38
 8004be8:	d805      	bhi.n	8004bf6 <osThreadNew+0x6e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <osThreadNew+0x72>
        return (NULL);
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e054      	b.n	8004ca4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	089b      	lsrs	r3, r3, #2
 8004c08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00e      	beq.n	8004c30 <osThreadNew+0xa8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2ba7      	cmp	r3, #167	@ 0xa7
 8004c18:	d90a      	bls.n	8004c30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d006      	beq.n	8004c30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <osThreadNew+0xa8>
        mem = 1;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	e010      	b.n	8004c52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10c      	bne.n	8004c52 <osThreadNew+0xca>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d108      	bne.n	8004c52 <osThreadNew+0xca>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d104      	bne.n	8004c52 <osThreadNew+0xca>
          mem = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	e001      	b.n	8004c52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d110      	bne.n	8004c7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c60:	9202      	str	r2, [sp, #8]
 8004c62:	9301      	str	r3, [sp, #4]
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	6a3a      	ldr	r2, [r7, #32]
 8004c6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f001 f808 	bl	8005c84 <xTaskCreateStatic>
 8004c74:	4603      	mov	r3, r0
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	e013      	b.n	8004ca2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d110      	bne.n	8004ca2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	f107 0310 	add.w	r3, r7, #16
 8004c88:	9301      	str	r3, [sp, #4]
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f001 f856 	bl	8005d44 <xTaskCreate>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d001      	beq.n	8004ca2 <osThreadNew+0x11a>
            hTask = NULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ca2:	693b      	ldr	r3, [r7, #16]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3728      	adds	r7, #40	@ 0x28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cb4:	f3ef 8305 	mrs	r3, IPSR
 8004cb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <osDelay+0x1c>
    stat = osErrorISR;
 8004cc0:	f06f 0305 	mvn.w	r3, #5
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	e007      	b.n	8004cd8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f001 f994 	bl	8006000 <vTaskDelay>
    }
  }

  return (stat);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b08a      	sub	sp, #40	@ 0x28
 8004ce6:	af02      	add	r7, sp, #8
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cf2:	f3ef 8305 	mrs	r3, IPSR
 8004cf6:	613b      	str	r3, [r7, #16]
  return(result);
 8004cf8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d15f      	bne.n	8004dbe <osMessageQueueNew+0xdc>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d05c      	beq.n	8004dbe <osMessageQueueNew+0xdc>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d059      	beq.n	8004dbe <osMessageQueueNew+0xdc>
    mem = -1;
 8004d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d029      	beq.n	8004d6a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d012      	beq.n	8004d44 <osMessageQueueNew+0x62>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	2b4f      	cmp	r3, #79	@ 0x4f
 8004d24:	d90e      	bls.n	8004d44 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695a      	ldr	r2, [r3, #20]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	fb01 f303 	mul.w	r3, r1, r3
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d302      	bcc.n	8004d44 <osMessageQueueNew+0x62>
        mem = 1;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	e014      	b.n	8004d6e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d110      	bne.n	8004d6e <osMessageQueueNew+0x8c>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10c      	bne.n	8004d6e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d108      	bne.n	8004d6e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d104      	bne.n	8004d6e <osMessageQueueNew+0x8c>
          mem = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	61bb      	str	r3, [r7, #24]
 8004d68:	e001      	b.n	8004d6e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d10b      	bne.n	8004d8c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	9100      	str	r1, [sp, #0]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 fa30 	bl	80051e8 <xQueueGenericCreateStatic>
 8004d88:	61f8      	str	r0, [r7, #28]
 8004d8a:	e008      	b.n	8004d9e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d105      	bne.n	8004d9e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004d92:	2200      	movs	r2, #0
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 faa3 	bl	80052e2 <xQueueGenericCreate>
 8004d9c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00c      	beq.n	8004dbe <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	e001      	b.n	8004db6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004db6:	6979      	ldr	r1, [r7, #20]
 8004db8:	69f8      	ldr	r0, [r7, #28]
 8004dba:	f000 ff05 	bl	8005bc8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004dbe:	69fb      	ldr	r3, [r7, #28]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3720      	adds	r7, #32
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004de0:	f3ef 8305 	mrs	r3, IPSR
 8004de4:	617b      	str	r3, [r7, #20]
  return(result);
 8004de6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d028      	beq.n	8004e3e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <osMessageQueuePut+0x36>
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <osMessageQueuePut+0x36>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004dfe:	f06f 0303 	mvn.w	r3, #3
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	e038      	b.n	8004e78 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004e0a:	f107 0210 	add.w	r2, r7, #16
 8004e0e:	2300      	movs	r3, #0
 8004e10:	68b9      	ldr	r1, [r7, #8]
 8004e12:	69b8      	ldr	r0, [r7, #24]
 8004e14:	f000 fbc6 	bl	80055a4 <xQueueGenericSendFromISR>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d003      	beq.n	8004e26 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004e1e:	f06f 0302 	mvn.w	r3, #2
 8004e22:	61fb      	str	r3, [r7, #28]
 8004e24:	e028      	b.n	8004e78 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d025      	beq.n	8004e78 <osMessageQueuePut+0xb0>
 8004e2c:	4b15      	ldr	r3, [pc, #84]	@ (8004e84 <osMessageQueuePut+0xbc>)
 8004e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	e01c      	b.n	8004e78 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <osMessageQueuePut+0x82>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d103      	bne.n	8004e52 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004e4a:	f06f 0303 	mvn.w	r3, #3
 8004e4e:	61fb      	str	r3, [r7, #28]
 8004e50:	e012      	b.n	8004e78 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004e52:	2300      	movs	r3, #0
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	69b8      	ldr	r0, [r7, #24]
 8004e5a:	f000 faa1 	bl	80053a0 <xQueueGenericSend>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d009      	beq.n	8004e78 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004e6a:	f06f 0301 	mvn.w	r3, #1
 8004e6e:	61fb      	str	r3, [r7, #28]
 8004e70:	e002      	b.n	8004e78 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004e72:	f06f 0302 	mvn.w	r3, #2
 8004e76:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004e78:	69fb      	ldr	r3, [r7, #28]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	e000ed04 	.word	0xe000ed04

08004e88 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e9e:	f3ef 8305 	mrs	r3, IPSR
 8004ea2:	617b      	str	r3, [r7, #20]
  return(result);
 8004ea4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d028      	beq.n	8004efc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <osMessageQueueGet+0x34>
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <osMessageQueueGet+0x34>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004ebc:	f06f 0303 	mvn.w	r3, #3
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	e037      	b.n	8004f34 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004ec8:	f107 0310 	add.w	r3, r7, #16
 8004ecc:	461a      	mov	r2, r3
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	69b8      	ldr	r0, [r7, #24]
 8004ed2:	f000 fce7 	bl	80058a4 <xQueueReceiveFromISR>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d003      	beq.n	8004ee4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004edc:	f06f 0302 	mvn.w	r3, #2
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	e027      	b.n	8004f34 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d024      	beq.n	8004f34 <osMessageQueueGet+0xac>
 8004eea:	4b15      	ldr	r3, [pc, #84]	@ (8004f40 <osMessageQueueGet+0xb8>)
 8004eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	e01b      	b.n	8004f34 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <osMessageQueueGet+0x80>
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d103      	bne.n	8004f10 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004f08:	f06f 0303 	mvn.w	r3, #3
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	e011      	b.n	8004f34 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	68b9      	ldr	r1, [r7, #8]
 8004f14:	69b8      	ldr	r0, [r7, #24]
 8004f16:	f000 fbe3 	bl	80056e0 <xQueueReceive>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d009      	beq.n	8004f34 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004f26:	f06f 0301 	mvn.w	r3, #1
 8004f2a:	61fb      	str	r3, [r7, #28]
 8004f2c:	e002      	b.n	8004f34 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004f2e:	f06f 0302 	mvn.w	r3, #2
 8004f32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004f34:	69fb      	ldr	r3, [r7, #28]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	e000ed04 	.word	0xe000ed04

08004f44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4a07      	ldr	r2, [pc, #28]	@ (8004f70 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	4a06      	ldr	r2, [pc, #24]	@ (8004f74 <vApplicationGetIdleTaskMemory+0x30>)
 8004f5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2280      	movs	r2, #128	@ 0x80
 8004f60:	601a      	str	r2, [r3, #0]
}
 8004f62:	bf00      	nop
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	20000244 	.word	0x20000244
 8004f74:	200002ec 	.word	0x200002ec

08004f78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4a07      	ldr	r2, [pc, #28]	@ (8004fa4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	4a06      	ldr	r2, [pc, #24]	@ (8004fa8 <vApplicationGetTimerTaskMemory+0x30>)
 8004f8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f96:	601a      	str	r2, [r3, #0]
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	200004ec 	.word	0x200004ec
 8004fa8:	20000594 	.word	0x20000594

08004fac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f103 0208 	add.w	r2, r3, #8
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f103 0208 	add.w	r2, r3, #8
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f103 0208 	add.w	r2, r3, #8
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005006:	b480      	push	{r7}
 8005008:	b085      	sub	sp, #20
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	601a      	str	r2, [r3, #0]
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800504e:	b480      	push	{r7}
 8005050:	b085      	sub	sp, #20
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d103      	bne.n	800506e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	e00c      	b.n	8005088 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3308      	adds	r3, #8
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	e002      	b.n	800507c <vListInsert+0x2e>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	429a      	cmp	r2, r3
 8005086:	d2f6      	bcs.n	8005076 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	601a      	str	r2, [r3, #0]
}
 80050b4:	bf00      	nop
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6892      	ldr	r2, [r2, #8]
 80050d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6852      	ldr	r2, [r2, #4]
 80050e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d103      	bne.n	80050f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	1e5a      	subs	r2, r3, #1
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10b      	bne.n	8005140 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800513a:	bf00      	nop
 800513c:	bf00      	nop
 800513e:	e7fd      	b.n	800513c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005140:	f002 f962 	bl	8007408 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514c:	68f9      	ldr	r1, [r7, #12]
 800514e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	441a      	add	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005170:	3b01      	subs	r3, #1
 8005172:	68f9      	ldr	r1, [r7, #12]
 8005174:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005176:	fb01 f303 	mul.w	r3, r1, r3
 800517a:	441a      	add	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	22ff      	movs	r2, #255	@ 0xff
 8005184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	22ff      	movs	r2, #255	@ 0xff
 800518c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d114      	bne.n	80051c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01a      	beq.n	80051d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3310      	adds	r3, #16
 80051a2:	4618      	mov	r0, r3
 80051a4:	f001 fa00 	bl	80065a8 <xTaskRemoveFromEventList>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d012      	beq.n	80051d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051ae:	4b0d      	ldr	r3, [pc, #52]	@ (80051e4 <xQueueGenericReset+0xd0>)
 80051b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	e009      	b.n	80051d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3310      	adds	r3, #16
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff fef1 	bl	8004fac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3324      	adds	r3, #36	@ 0x24
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff feec 	bl	8004fac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051d4:	f002 f94a 	bl	800746c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051d8:	2301      	movs	r3, #1
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08e      	sub	sp, #56	@ 0x38
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10b      	bne.n	8005214 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800520e:	bf00      	nop
 8005210:	bf00      	nop
 8005212:	e7fd      	b.n	8005210 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10b      	bne.n	8005232 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	e7fd      	b.n	800522e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <xQueueGenericCreateStatic+0x56>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <xQueueGenericCreateStatic+0x5a>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <xQueueGenericCreateStatic+0x5c>
 8005242:	2300      	movs	r3, #0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10b      	bne.n	8005260 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	623b      	str	r3, [r7, #32]
}
 800525a:	bf00      	nop
 800525c:	bf00      	nop
 800525e:	e7fd      	b.n	800525c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d102      	bne.n	800526c <xQueueGenericCreateStatic+0x84>
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <xQueueGenericCreateStatic+0x88>
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <xQueueGenericCreateStatic+0x8a>
 8005270:	2300      	movs	r3, #0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10b      	bne.n	800528e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	61fb      	str	r3, [r7, #28]
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	e7fd      	b.n	800528a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800528e:	2350      	movs	r3, #80	@ 0x50
 8005290:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b50      	cmp	r3, #80	@ 0x50
 8005296:	d00b      	beq.n	80052b0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	61bb      	str	r3, [r7, #24]
}
 80052aa:	bf00      	nop
 80052ac:	bf00      	nop
 80052ae:	e7fd      	b.n	80052ac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80052b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00d      	beq.n	80052d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80052c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	4613      	mov	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	68b9      	ldr	r1, [r7, #8]
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f840 	bl	8005358 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80052da:	4618      	mov	r0, r3
 80052dc:	3730      	adds	r7, #48	@ 0x30
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b08a      	sub	sp, #40	@ 0x28
 80052e6:	af02      	add	r7, sp, #8
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	4613      	mov	r3, r2
 80052ee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10b      	bne.n	800530e <xQueueGenericCreate+0x2c>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	613b      	str	r3, [r7, #16]
}
 8005308:	bf00      	nop
 800530a:	bf00      	nop
 800530c:	e7fd      	b.n	800530a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	3350      	adds	r3, #80	@ 0x50
 800531c:	4618      	mov	r0, r3
 800531e:	f002 f995 	bl	800764c <pvPortMalloc>
 8005322:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d011      	beq.n	800534e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	3350      	adds	r3, #80	@ 0x50
 8005332:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800533c:	79fa      	ldrb	r2, [r7, #7]
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	4613      	mov	r3, r2
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f805 	bl	8005358 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800534e:	69bb      	ldr	r3, [r7, #24]
	}
 8005350:	4618      	mov	r0, r3
 8005352:	3720      	adds	r7, #32
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
 8005364:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d103      	bne.n	8005374 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	e002      	b.n	800537a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005386:	2101      	movs	r1, #1
 8005388:	69b8      	ldr	r0, [r7, #24]
 800538a:	f7ff fec3 	bl	8005114 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	78fa      	ldrb	r2, [r7, #3]
 8005392:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005396:	bf00      	nop
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08e      	sub	sp, #56	@ 0x38
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053ae:	2300      	movs	r3, #0
 80053b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80053b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10b      	bne.n	80053d4 <xQueueGenericSend+0x34>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053ce:	bf00      	nop
 80053d0:	bf00      	nop
 80053d2:	e7fd      	b.n	80053d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d103      	bne.n	80053e2 <xQueueGenericSend+0x42>
 80053da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <xQueueGenericSend+0x46>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <xQueueGenericSend+0x48>
 80053e6:	2300      	movs	r3, #0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10b      	bne.n	8005404 <xQueueGenericSend+0x64>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80053fe:	bf00      	nop
 8005400:	bf00      	nop
 8005402:	e7fd      	b.n	8005400 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d103      	bne.n	8005412 <xQueueGenericSend+0x72>
 800540a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540e:	2b01      	cmp	r3, #1
 8005410:	d101      	bne.n	8005416 <xQueueGenericSend+0x76>
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <xQueueGenericSend+0x78>
 8005416:	2300      	movs	r3, #0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10b      	bne.n	8005434 <xQueueGenericSend+0x94>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	623b      	str	r3, [r7, #32]
}
 800542e:	bf00      	nop
 8005430:	bf00      	nop
 8005432:	e7fd      	b.n	8005430 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005434:	f001 fa7e 	bl	8006934 <xTaskGetSchedulerState>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d102      	bne.n	8005444 <xQueueGenericSend+0xa4>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <xQueueGenericSend+0xa8>
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <xQueueGenericSend+0xaa>
 8005448:	2300      	movs	r3, #0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10b      	bne.n	8005466 <xQueueGenericSend+0xc6>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	61fb      	str	r3, [r7, #28]
}
 8005460:	bf00      	nop
 8005462:	bf00      	nop
 8005464:	e7fd      	b.n	8005462 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005466:	f001 ffcf 	bl	8007408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800546a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800546e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005472:	429a      	cmp	r2, r3
 8005474:	d302      	bcc.n	800547c <xQueueGenericSend+0xdc>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d129      	bne.n	80054d0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005482:	f000 fa91 	bl	80059a8 <prvCopyDataToQueue>
 8005486:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548c:	2b00      	cmp	r3, #0
 800548e:	d010      	beq.n	80054b2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005492:	3324      	adds	r3, #36	@ 0x24
 8005494:	4618      	mov	r0, r3
 8005496:	f001 f887 	bl	80065a8 <xTaskRemoveFromEventList>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d013      	beq.n	80054c8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054a0:	4b3f      	ldr	r3, [pc, #252]	@ (80055a0 <xQueueGenericSend+0x200>)
 80054a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	e00a      	b.n	80054c8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d007      	beq.n	80054c8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054b8:	4b39      	ldr	r3, [pc, #228]	@ (80055a0 <xQueueGenericSend+0x200>)
 80054ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054c8:	f001 ffd0 	bl	800746c <vPortExitCritical>
				return pdPASS;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e063      	b.n	8005598 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d103      	bne.n	80054de <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054d6:	f001 ffc9 	bl	800746c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	e05c      	b.n	8005598 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d106      	bne.n	80054f2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054e4:	f107 0314 	add.w	r3, r7, #20
 80054e8:	4618      	mov	r0, r3
 80054ea:	f001 f8c1 	bl	8006670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054ee:	2301      	movs	r3, #1
 80054f0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054f2:	f001 ffbb 	bl	800746c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054f6:	f000 fe29 	bl	800614c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054fa:	f001 ff85 	bl	8007408 <vPortEnterCritical>
 80054fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005500:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005504:	b25b      	sxtb	r3, r3
 8005506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550a:	d103      	bne.n	8005514 <xQueueGenericSend+0x174>
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005516:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800551a:	b25b      	sxtb	r3, r3
 800551c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005520:	d103      	bne.n	800552a <xQueueGenericSend+0x18a>
 8005522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800552a:	f001 ff9f 	bl	800746c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800552e:	1d3a      	adds	r2, r7, #4
 8005530:	f107 0314 	add.w	r3, r7, #20
 8005534:	4611      	mov	r1, r2
 8005536:	4618      	mov	r0, r3
 8005538:	f001 f8b0 	bl	800669c <xTaskCheckForTimeOut>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d124      	bne.n	800558c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005542:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005544:	f000 fb28 	bl	8005b98 <prvIsQueueFull>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d018      	beq.n	8005580 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800554e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005550:	3310      	adds	r3, #16
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	4611      	mov	r1, r2
 8005556:	4618      	mov	r0, r3
 8005558:	f000 ffd4 	bl	8006504 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800555c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800555e:	f000 fab3 	bl	8005ac8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005562:	f000 fe01 	bl	8006168 <xTaskResumeAll>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	f47f af7c 	bne.w	8005466 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800556e:	4b0c      	ldr	r3, [pc, #48]	@ (80055a0 <xQueueGenericSend+0x200>)
 8005570:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	e772      	b.n	8005466 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005580:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005582:	f000 faa1 	bl	8005ac8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005586:	f000 fdef 	bl	8006168 <xTaskResumeAll>
 800558a:	e76c      	b.n	8005466 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800558c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800558e:	f000 fa9b 	bl	8005ac8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005592:	f000 fde9 	bl	8006168 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005596:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005598:	4618      	mov	r0, r3
 800559a:	3738      	adds	r7, #56	@ 0x38
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	e000ed04 	.word	0xe000ed04

080055a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b090      	sub	sp, #64	@ 0x40
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80055b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10b      	bne.n	80055d4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055ce:	bf00      	nop
 80055d0:	bf00      	nop
 80055d2:	e7fd      	b.n	80055d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d103      	bne.n	80055e2 <xQueueGenericSendFromISR+0x3e>
 80055da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <xQueueGenericSendFromISR+0x42>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <xQueueGenericSendFromISR+0x44>
 80055e6:	2300      	movs	r3, #0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10b      	bne.n	8005604 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055fe:	bf00      	nop
 8005600:	bf00      	nop
 8005602:	e7fd      	b.n	8005600 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d103      	bne.n	8005612 <xQueueGenericSendFromISR+0x6e>
 800560a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <xQueueGenericSendFromISR+0x72>
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <xQueueGenericSendFromISR+0x74>
 8005616:	2300      	movs	r3, #0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10b      	bne.n	8005634 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	623b      	str	r3, [r7, #32]
}
 800562e:	bf00      	nop
 8005630:	bf00      	nop
 8005632:	e7fd      	b.n	8005630 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005634:	f001 ffc8 	bl	80075c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005638:	f3ef 8211 	mrs	r2, BASEPRI
 800563c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	61fa      	str	r2, [r7, #28]
 800564e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005650:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005652:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005656:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565c:	429a      	cmp	r2, r3
 800565e:	d302      	bcc.n	8005666 <xQueueGenericSendFromISR+0xc2>
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d12f      	bne.n	80056c6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005668:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800566c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005674:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800567c:	f000 f994 	bl	80059a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005680:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005688:	d112      	bne.n	80056b0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800568a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568e:	2b00      	cmp	r3, #0
 8005690:	d016      	beq.n	80056c0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005694:	3324      	adds	r3, #36	@ 0x24
 8005696:	4618      	mov	r0, r3
 8005698:	f000 ff86 	bl	80065a8 <xTaskRemoveFromEventList>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00e      	beq.n	80056c0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00b      	beq.n	80056c0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	e007      	b.n	80056c0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80056b4:	3301      	adds	r3, #1
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	b25a      	sxtb	r2, r3
 80056ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80056c0:	2301      	movs	r3, #1
 80056c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80056c4:	e001      	b.n	80056ca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056cc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3740      	adds	r7, #64	@ 0x40
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08c      	sub	sp, #48	@ 0x30
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056ec:	2300      	movs	r3, #0
 80056ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10b      	bne.n	8005712 <xQueueReceive+0x32>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	623b      	str	r3, [r7, #32]
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	e7fd      	b.n	800570e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d103      	bne.n	8005720 <xQueueReceive+0x40>
 8005718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <xQueueReceive+0x44>
 8005720:	2301      	movs	r3, #1
 8005722:	e000      	b.n	8005726 <xQueueReceive+0x46>
 8005724:	2300      	movs	r3, #0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10b      	bne.n	8005742 <xQueueReceive+0x62>
	__asm volatile
 800572a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572e:	f383 8811 	msr	BASEPRI, r3
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	61fb      	str	r3, [r7, #28]
}
 800573c:	bf00      	nop
 800573e:	bf00      	nop
 8005740:	e7fd      	b.n	800573e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005742:	f001 f8f7 	bl	8006934 <xTaskGetSchedulerState>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d102      	bne.n	8005752 <xQueueReceive+0x72>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <xQueueReceive+0x76>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <xQueueReceive+0x78>
 8005756:	2300      	movs	r3, #0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10b      	bne.n	8005774 <xQueueReceive+0x94>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	61bb      	str	r3, [r7, #24]
}
 800576e:	bf00      	nop
 8005770:	bf00      	nop
 8005772:	e7fd      	b.n	8005770 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005774:	f001 fe48 	bl	8007408 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01f      	beq.n	80057c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005788:	f000 f978 	bl	8005a7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578e:	1e5a      	subs	r2, r3, #1
 8005790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005792:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00f      	beq.n	80057bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800579c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579e:	3310      	adds	r3, #16
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 ff01 	bl	80065a8 <xTaskRemoveFromEventList>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d007      	beq.n	80057bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057ac:	4b3c      	ldr	r3, [pc, #240]	@ (80058a0 <xQueueReceive+0x1c0>)
 80057ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057bc:	f001 fe56 	bl	800746c <vPortExitCritical>
				return pdPASS;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e069      	b.n	8005898 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d103      	bne.n	80057d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057ca:	f001 fe4f 	bl	800746c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057ce:	2300      	movs	r3, #0
 80057d0:	e062      	b.n	8005898 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d106      	bne.n	80057e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057d8:	f107 0310 	add.w	r3, r7, #16
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 ff47 	bl	8006670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057e2:	2301      	movs	r3, #1
 80057e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057e6:	f001 fe41 	bl	800746c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057ea:	f000 fcaf 	bl	800614c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057ee:	f001 fe0b 	bl	8007408 <vPortEnterCritical>
 80057f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057f8:	b25b      	sxtb	r3, r3
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fe:	d103      	bne.n	8005808 <xQueueReceive+0x128>
 8005800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800580e:	b25b      	sxtb	r3, r3
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005814:	d103      	bne.n	800581e <xQueueReceive+0x13e>
 8005816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800581e:	f001 fe25 	bl	800746c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005822:	1d3a      	adds	r2, r7, #4
 8005824:	f107 0310 	add.w	r3, r7, #16
 8005828:	4611      	mov	r1, r2
 800582a:	4618      	mov	r0, r3
 800582c:	f000 ff36 	bl	800669c <xTaskCheckForTimeOut>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d123      	bne.n	800587e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005836:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005838:	f000 f998 	bl	8005b6c <prvIsQueueEmpty>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d017      	beq.n	8005872 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005844:	3324      	adds	r3, #36	@ 0x24
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	4611      	mov	r1, r2
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fe5a 	bl	8006504 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005850:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005852:	f000 f939 	bl	8005ac8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005856:	f000 fc87 	bl	8006168 <xTaskResumeAll>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d189      	bne.n	8005774 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005860:	4b0f      	ldr	r3, [pc, #60]	@ (80058a0 <xQueueReceive+0x1c0>)
 8005862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	e780      	b.n	8005774 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005874:	f000 f928 	bl	8005ac8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005878:	f000 fc76 	bl	8006168 <xTaskResumeAll>
 800587c:	e77a      	b.n	8005774 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800587e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005880:	f000 f922 	bl	8005ac8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005884:	f000 fc70 	bl	8006168 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005888:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800588a:	f000 f96f 	bl	8005b6c <prvIsQueueEmpty>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	f43f af6f 	beq.w	8005774 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005896:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005898:	4618      	mov	r0, r3
 800589a:	3730      	adds	r7, #48	@ 0x30
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	e000ed04 	.word	0xe000ed04

080058a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08e      	sub	sp, #56	@ 0x38
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10b      	bne.n	80058d2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	623b      	str	r3, [r7, #32]
}
 80058cc:	bf00      	nop
 80058ce:	bf00      	nop
 80058d0:	e7fd      	b.n	80058ce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d103      	bne.n	80058e0 <xQueueReceiveFromISR+0x3c>
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <xQueueReceiveFromISR+0x40>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <xQueueReceiveFromISR+0x42>
 80058e4:	2300      	movs	r3, #0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10b      	bne.n	8005902 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	61fb      	str	r3, [r7, #28]
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	e7fd      	b.n	80058fe <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005902:	f001 fe61 	bl	80075c8 <vPortValidateInterruptPriority>
	__asm volatile
 8005906:	f3ef 8211 	mrs	r2, BASEPRI
 800590a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	61ba      	str	r2, [r7, #24]
 800591c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800591e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005920:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005926:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592a:	2b00      	cmp	r3, #0
 800592c:	d02f      	beq.n	800598e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800592e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005930:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005938:	68b9      	ldr	r1, [r7, #8]
 800593a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800593c:	f000 f89e 	bl	8005a7c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005942:	1e5a      	subs	r2, r3, #1
 8005944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005946:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005948:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005950:	d112      	bne.n	8005978 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d016      	beq.n	8005988 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800595a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595c:	3310      	adds	r3, #16
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fe22 	bl	80065a8 <xTaskRemoveFromEventList>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00e      	beq.n	8005988 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00b      	beq.n	8005988 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	e007      	b.n	8005988 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800597c:	3301      	adds	r3, #1
 800597e:	b2db      	uxtb	r3, r3
 8005980:	b25a      	sxtb	r2, r3
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005988:	2301      	movs	r3, #1
 800598a:	637b      	str	r3, [r7, #52]	@ 0x34
 800598c:	e001      	b.n	8005992 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800598e:	2300      	movs	r3, #0
 8005990:	637b      	str	r3, [r7, #52]	@ 0x34
 8005992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005994:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f383 8811 	msr	BASEPRI, r3
}
 800599c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800599e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3738      	adds	r7, #56	@ 0x38
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10d      	bne.n	80059e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d14d      	bne.n	8005a6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 ffcc 	bl	8006970 <xTaskPriorityDisinherit>
 80059d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	609a      	str	r2, [r3, #8]
 80059e0:	e043      	b.n	8005a6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d119      	bne.n	8005a1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6858      	ldr	r0, [r3, #4]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f0:	461a      	mov	r2, r3
 80059f2:	68b9      	ldr	r1, [r7, #8]
 80059f4:	f002 f8c2 	bl	8007b7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a00:	441a      	add	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d32b      	bcc.n	8005a6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	605a      	str	r2, [r3, #4]
 8005a1a:	e026      	b.n	8005a6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	68d8      	ldr	r0, [r3, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a24:	461a      	mov	r2, r3
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	f002 f8a8 	bl	8007b7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a34:	425b      	negs	r3, r3
 8005a36:	441a      	add	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	68da      	ldr	r2, [r3, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d207      	bcs.n	8005a58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a50:	425b      	negs	r3, r3
 8005a52:	441a      	add	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d105      	bne.n	8005a6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005a72:	697b      	ldr	r3, [r7, #20]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d018      	beq.n	8005ac0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a96:	441a      	add	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68da      	ldr	r2, [r3, #12]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d303      	bcc.n	8005ab0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68d9      	ldr	r1, [r3, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab8:	461a      	mov	r2, r3
 8005aba:	6838      	ldr	r0, [r7, #0]
 8005abc:	f002 f85e 	bl	8007b7c <memcpy>
	}
}
 8005ac0:	bf00      	nop
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ad0:	f001 fc9a 	bl	8007408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ada:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005adc:	e011      	b.n	8005b02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d012      	beq.n	8005b0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3324      	adds	r3, #36	@ 0x24
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fd5c 	bl	80065a8 <xTaskRemoveFromEventList>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005af6:	f000 fe35 	bl	8006764 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	dce9      	bgt.n	8005ade <prvUnlockQueue+0x16>
 8005b0a:	e000      	b.n	8005b0e <prvUnlockQueue+0x46>
					break;
 8005b0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	22ff      	movs	r2, #255	@ 0xff
 8005b12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005b16:	f001 fca9 	bl	800746c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b1a:	f001 fc75 	bl	8007408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b26:	e011      	b.n	8005b4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d012      	beq.n	8005b56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3310      	adds	r3, #16
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 fd37 	bl	80065a8 <xTaskRemoveFromEventList>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b40:	f000 fe10 	bl	8006764 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b44:	7bbb      	ldrb	r3, [r7, #14]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	dce9      	bgt.n	8005b28 <prvUnlockQueue+0x60>
 8005b54:	e000      	b.n	8005b58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	22ff      	movs	r2, #255	@ 0xff
 8005b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005b60:	f001 fc84 	bl	800746c <vPortExitCritical>
}
 8005b64:	bf00      	nop
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b74:	f001 fc48 	bl	8007408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d102      	bne.n	8005b86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b80:	2301      	movs	r3, #1
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	e001      	b.n	8005b8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b8a:	f001 fc6f 	bl	800746c <vPortExitCritical>

	return xReturn;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ba0:	f001 fc32 	bl	8007408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d102      	bne.n	8005bb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	e001      	b.n	8005bba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bba:	f001 fc57 	bl	800746c <vPortExitCritical>

	return xReturn;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	e014      	b.n	8005c02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8005c18 <vQueueAddToRegistry+0x50>)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10b      	bne.n	8005bfc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005be4:	490c      	ldr	r1, [pc, #48]	@ (8005c18 <vQueueAddToRegistry+0x50>)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bee:	4a0a      	ldr	r2, [pc, #40]	@ (8005c18 <vQueueAddToRegistry+0x50>)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005bfa:	e006      	b.n	8005c0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b07      	cmp	r3, #7
 8005c06:	d9e7      	bls.n	8005bd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	20000994 	.word	0x20000994

08005c1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c2c:	f001 fbec 	bl	8007408 <vPortEnterCritical>
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c36:	b25b      	sxtb	r3, r3
 8005c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3c:	d103      	bne.n	8005c46 <vQueueWaitForMessageRestricted+0x2a>
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c4c:	b25b      	sxtb	r3, r3
 8005c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c52:	d103      	bne.n	8005c5c <vQueueWaitForMessageRestricted+0x40>
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c5c:	f001 fc06 	bl	800746c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d106      	bne.n	8005c76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	3324      	adds	r3, #36	@ 0x24
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	68b9      	ldr	r1, [r7, #8]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fc6d 	bl	8006550 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c76:	6978      	ldr	r0, [r7, #20]
 8005c78:	f7ff ff26 	bl	8005ac8 <prvUnlockQueue>
	}
 8005c7c:	bf00      	nop
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08e      	sub	sp, #56	@ 0x38
 8005c88:	af04      	add	r7, sp, #16
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10b      	bne.n	8005cb0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	623b      	str	r3, [r7, #32]
}
 8005caa:	bf00      	nop
 8005cac:	bf00      	nop
 8005cae:	e7fd      	b.n	8005cac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10b      	bne.n	8005cce <xTaskCreateStatic+0x4a>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	61fb      	str	r3, [r7, #28]
}
 8005cc8:	bf00      	nop
 8005cca:	bf00      	nop
 8005ccc:	e7fd      	b.n	8005cca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cce:	23a8      	movs	r3, #168	@ 0xa8
 8005cd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	2ba8      	cmp	r3, #168	@ 0xa8
 8005cd6:	d00b      	beq.n	8005cf0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	61bb      	str	r3, [r7, #24]
}
 8005cea:	bf00      	nop
 8005cec:	bf00      	nop
 8005cee:	e7fd      	b.n	8005cec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005cf0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01e      	beq.n	8005d36 <xTaskCreateStatic+0xb2>
 8005cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d01b      	beq.n	8005d36 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d00:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d06:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d10:	2300      	movs	r3, #0
 8005d12:	9303      	str	r3, [sp, #12]
 8005d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d16:	9302      	str	r3, [sp, #8]
 8005d18:	f107 0314 	add.w	r3, r7, #20
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f851 	bl	8005dd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d30:	f000 f8f6 	bl	8005f20 <prvAddNewTaskToReadyList>
 8005d34:	e001      	b.n	8005d3a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d3a:	697b      	ldr	r3, [r7, #20]
	}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3728      	adds	r7, #40	@ 0x28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08c      	sub	sp, #48	@ 0x30
 8005d48:	af04      	add	r7, sp, #16
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	4613      	mov	r3, r2
 8005d52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d54:	88fb      	ldrh	r3, [r7, #6]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 fc77 	bl	800764c <pvPortMalloc>
 8005d5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00e      	beq.n	8005d84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d66:	20a8      	movs	r0, #168	@ 0xa8
 8005d68:	f001 fc70 	bl	800764c <pvPortMalloc>
 8005d6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d7a:	e005      	b.n	8005d88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d7c:	6978      	ldr	r0, [r7, #20]
 8005d7e:	f001 fd33 	bl	80077e8 <vPortFree>
 8005d82:	e001      	b.n	8005d88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d017      	beq.n	8005dbe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d96:	88fa      	ldrh	r2, [r7, #6]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	9303      	str	r3, [sp, #12]
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	9302      	str	r3, [sp, #8]
 8005da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f80f 	bl	8005dd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005db2:	69f8      	ldr	r0, [r7, #28]
 8005db4:	f000 f8b4 	bl	8005f20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005db8:	2301      	movs	r3, #1
 8005dba:	61bb      	str	r3, [r7, #24]
 8005dbc:	e002      	b.n	8005dc4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005dc4:	69bb      	ldr	r3, [r7, #24]
	}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3720      	adds	r7, #32
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	461a      	mov	r2, r3
 8005de8:	21a5      	movs	r1, #165	@ 0xa5
 8005dea:	f001 fe3d 	bl	8007a68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	f023 0307 	bic.w	r3, r3, #7
 8005e06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	617b      	str	r3, [r7, #20]
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	e7fd      	b.n	8005e26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01f      	beq.n	8005e70 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e30:	2300      	movs	r3, #0
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	e012      	b.n	8005e5c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	7819      	ldrb	r1, [r3, #0]
 8005e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	4413      	add	r3, r2
 8005e44:	3334      	adds	r3, #52	@ 0x34
 8005e46:	460a      	mov	r2, r1
 8005e48:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	4413      	add	r3, r2
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d006      	beq.n	8005e64 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	61fb      	str	r3, [r7, #28]
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	2b0f      	cmp	r3, #15
 8005e60:	d9e9      	bls.n	8005e36 <prvInitialiseNewTask+0x66>
 8005e62:	e000      	b.n	8005e66 <prvInitialiseNewTask+0x96>
			{
				break;
 8005e64:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e6e:	e003      	b.n	8005e78 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7a:	2b37      	cmp	r3, #55	@ 0x37
 8005e7c:	d901      	bls.n	8005e82 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e7e:	2337      	movs	r3, #55	@ 0x37
 8005e80:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e86:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e8c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	2200      	movs	r2, #0
 8005e92:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e96:	3304      	adds	r3, #4
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff f8a7 	bl	8004fec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea0:	3318      	adds	r3, #24
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff f8a2 	bl	8004fec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ebc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed0:	3354      	adds	r3, #84	@ 0x54
 8005ed2:	224c      	movs	r2, #76	@ 0x4c
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f001 fdc6 	bl	8007a68 <memset>
 8005edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ede:	4a0d      	ldr	r2, [pc, #52]	@ (8005f14 <prvInitialiseNewTask+0x144>)
 8005ee0:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8005f18 <prvInitialiseNewTask+0x148>)
 8005ee6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eea:	4a0c      	ldr	r2, [pc, #48]	@ (8005f1c <prvInitialiseNewTask+0x14c>)
 8005eec:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	68f9      	ldr	r1, [r7, #12]
 8005ef2:	69b8      	ldr	r0, [r7, #24]
 8005ef4:	f001 f95a 	bl	80071ac <pxPortInitialiseStack>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f0a:	bf00      	nop
 8005f0c:	3720      	adds	r7, #32
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20001be0 	.word	0x20001be0
 8005f18:	20001c48 	.word	0x20001c48
 8005f1c:	20001cb0 	.word	0x20001cb0

08005f20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f28:	f001 fa6e 	bl	8007408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8005fe4 <prvAddNewTaskToReadyList+0xc4>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3301      	adds	r3, #1
 8005f32:	4a2c      	ldr	r2, [pc, #176]	@ (8005fe4 <prvAddNewTaskToReadyList+0xc4>)
 8005f34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f36:	4b2c      	ldr	r3, [pc, #176]	@ (8005fe8 <prvAddNewTaskToReadyList+0xc8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d109      	bne.n	8005f52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8005fe8 <prvAddNewTaskToReadyList+0xc8>)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f44:	4b27      	ldr	r3, [pc, #156]	@ (8005fe4 <prvAddNewTaskToReadyList+0xc4>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d110      	bne.n	8005f6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f4c:	f000 fc2e 	bl	80067ac <prvInitialiseTaskLists>
 8005f50:	e00d      	b.n	8005f6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f52:	4b26      	ldr	r3, [pc, #152]	@ (8005fec <prvAddNewTaskToReadyList+0xcc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d109      	bne.n	8005f6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f5a:	4b23      	ldr	r3, [pc, #140]	@ (8005fe8 <prvAddNewTaskToReadyList+0xc8>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d802      	bhi.n	8005f6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f68:	4a1f      	ldr	r2, [pc, #124]	@ (8005fe8 <prvAddNewTaskToReadyList+0xc8>)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f6e:	4b20      	ldr	r3, [pc, #128]	@ (8005ff0 <prvAddNewTaskToReadyList+0xd0>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3301      	adds	r3, #1
 8005f74:	4a1e      	ldr	r2, [pc, #120]	@ (8005ff0 <prvAddNewTaskToReadyList+0xd0>)
 8005f76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f78:	4b1d      	ldr	r3, [pc, #116]	@ (8005ff0 <prvAddNewTaskToReadyList+0xd0>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f84:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff4 <prvAddNewTaskToReadyList+0xd4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d903      	bls.n	8005f94 <prvAddNewTaskToReadyList+0x74>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f90:	4a18      	ldr	r2, [pc, #96]	@ (8005ff4 <prvAddNewTaskToReadyList+0xd4>)
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f98:	4613      	mov	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4a15      	ldr	r2, [pc, #84]	@ (8005ff8 <prvAddNewTaskToReadyList+0xd8>)
 8005fa2:	441a      	add	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	4619      	mov	r1, r3
 8005faa:	4610      	mov	r0, r2
 8005fac:	f7ff f82b 	bl	8005006 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fb0:	f001 fa5c 	bl	800746c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8005fec <prvAddNewTaskToReadyList+0xcc>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00e      	beq.n	8005fda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe8 <prvAddNewTaskToReadyList+0xc8>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d207      	bcs.n	8005fda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fca:	4b0c      	ldr	r3, [pc, #48]	@ (8005ffc <prvAddNewTaskToReadyList+0xdc>)
 8005fcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fda:	bf00      	nop
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000ea8 	.word	0x20000ea8
 8005fe8:	200009d4 	.word	0x200009d4
 8005fec:	20000eb4 	.word	0x20000eb4
 8005ff0:	20000ec4 	.word	0x20000ec4
 8005ff4:	20000eb0 	.word	0x20000eb0
 8005ff8:	200009d8 	.word	0x200009d8
 8005ffc:	e000ed04 	.word	0xe000ed04

08006000 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d018      	beq.n	8006044 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006012:	4b14      	ldr	r3, [pc, #80]	@ (8006064 <vTaskDelay+0x64>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00b      	beq.n	8006032 <vTaskDelay+0x32>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	60bb      	str	r3, [r7, #8]
}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	e7fd      	b.n	800602e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006032:	f000 f88b 	bl	800614c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006036:	2100      	movs	r1, #0
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fd09 	bl	8006a50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800603e:	f000 f893 	bl	8006168 <xTaskResumeAll>
 8006042:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d107      	bne.n	800605a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800604a:	4b07      	ldr	r3, [pc, #28]	@ (8006068 <vTaskDelay+0x68>)
 800604c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20000ed0 	.word	0x20000ed0
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08a      	sub	sp, #40	@ 0x28
 8006070:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006072:	2300      	movs	r3, #0
 8006074:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006076:	2300      	movs	r3, #0
 8006078:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800607a:	463a      	mov	r2, r7
 800607c:	1d39      	adds	r1, r7, #4
 800607e:	f107 0308 	add.w	r3, r7, #8
 8006082:	4618      	mov	r0, r3
 8006084:	f7fe ff5e 	bl	8004f44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	9202      	str	r2, [sp, #8]
 8006090:	9301      	str	r3, [sp, #4]
 8006092:	2300      	movs	r3, #0
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	2300      	movs	r3, #0
 8006098:	460a      	mov	r2, r1
 800609a:	4924      	ldr	r1, [pc, #144]	@ (800612c <vTaskStartScheduler+0xc0>)
 800609c:	4824      	ldr	r0, [pc, #144]	@ (8006130 <vTaskStartScheduler+0xc4>)
 800609e:	f7ff fdf1 	bl	8005c84 <xTaskCreateStatic>
 80060a2:	4603      	mov	r3, r0
 80060a4:	4a23      	ldr	r2, [pc, #140]	@ (8006134 <vTaskStartScheduler+0xc8>)
 80060a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060a8:	4b22      	ldr	r3, [pc, #136]	@ (8006134 <vTaskStartScheduler+0xc8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060b0:	2301      	movs	r3, #1
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	e001      	b.n	80060ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d102      	bne.n	80060c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80060c0:	f000 fd1a 	bl	8006af8 <xTimerCreateTimerTask>
 80060c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d11b      	bne.n	8006104 <vTaskStartScheduler+0x98>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	613b      	str	r3, [r7, #16]
}
 80060de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060e0:	4b15      	ldr	r3, [pc, #84]	@ (8006138 <vTaskStartScheduler+0xcc>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3354      	adds	r3, #84	@ 0x54
 80060e6:	4a15      	ldr	r2, [pc, #84]	@ (800613c <vTaskStartScheduler+0xd0>)
 80060e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060ea:	4b15      	ldr	r3, [pc, #84]	@ (8006140 <vTaskStartScheduler+0xd4>)
 80060ec:	f04f 32ff 	mov.w	r2, #4294967295
 80060f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060f2:	4b14      	ldr	r3, [pc, #80]	@ (8006144 <vTaskStartScheduler+0xd8>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80060f8:	4b13      	ldr	r3, [pc, #76]	@ (8006148 <vTaskStartScheduler+0xdc>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060fe:	f001 f8df 	bl	80072c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006102:	e00f      	b.n	8006124 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610a:	d10b      	bne.n	8006124 <vTaskStartScheduler+0xb8>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	60fb      	str	r3, [r7, #12]
}
 800611e:	bf00      	nop
 8006120:	bf00      	nop
 8006122:	e7fd      	b.n	8006120 <vTaskStartScheduler+0xb4>
}
 8006124:	bf00      	nop
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	08008460 	.word	0x08008460
 8006130:	0800677d 	.word	0x0800677d
 8006134:	20000ecc 	.word	0x20000ecc
 8006138:	200009d4 	.word	0x200009d4
 800613c:	20000010 	.word	0x20000010
 8006140:	20000ec8 	.word	0x20000ec8
 8006144:	20000eb4 	.word	0x20000eb4
 8006148:	20000eac 	.word	0x20000eac

0800614c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006150:	4b04      	ldr	r3, [pc, #16]	@ (8006164 <vTaskSuspendAll+0x18>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3301      	adds	r3, #1
 8006156:	4a03      	ldr	r2, [pc, #12]	@ (8006164 <vTaskSuspendAll+0x18>)
 8006158:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800615a:	bf00      	nop
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	20000ed0 	.word	0x20000ed0

08006168 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006172:	2300      	movs	r3, #0
 8006174:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006176:	4b42      	ldr	r3, [pc, #264]	@ (8006280 <xTaskResumeAll+0x118>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10b      	bne.n	8006196 <xTaskResumeAll+0x2e>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	603b      	str	r3, [r7, #0]
}
 8006190:	bf00      	nop
 8006192:	bf00      	nop
 8006194:	e7fd      	b.n	8006192 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006196:	f001 f937 	bl	8007408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800619a:	4b39      	ldr	r3, [pc, #228]	@ (8006280 <xTaskResumeAll+0x118>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3b01      	subs	r3, #1
 80061a0:	4a37      	ldr	r2, [pc, #220]	@ (8006280 <xTaskResumeAll+0x118>)
 80061a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061a4:	4b36      	ldr	r3, [pc, #216]	@ (8006280 <xTaskResumeAll+0x118>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d162      	bne.n	8006272 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061ac:	4b35      	ldr	r3, [pc, #212]	@ (8006284 <xTaskResumeAll+0x11c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d05e      	beq.n	8006272 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061b4:	e02f      	b.n	8006216 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061b6:	4b34      	ldr	r3, [pc, #208]	@ (8006288 <xTaskResumeAll+0x120>)
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3318      	adds	r3, #24
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe ff7c 	bl	80050c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3304      	adds	r3, #4
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fe ff77 	bl	80050c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d6:	4b2d      	ldr	r3, [pc, #180]	@ (800628c <xTaskResumeAll+0x124>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d903      	bls.n	80061e6 <xTaskResumeAll+0x7e>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e2:	4a2a      	ldr	r2, [pc, #168]	@ (800628c <xTaskResumeAll+0x124>)
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ea:	4613      	mov	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4a27      	ldr	r2, [pc, #156]	@ (8006290 <xTaskResumeAll+0x128>)
 80061f4:	441a      	add	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3304      	adds	r3, #4
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f7fe ff02 	bl	8005006 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006206:	4b23      	ldr	r3, [pc, #140]	@ (8006294 <xTaskResumeAll+0x12c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620c:	429a      	cmp	r2, r3
 800620e:	d302      	bcc.n	8006216 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006210:	4b21      	ldr	r3, [pc, #132]	@ (8006298 <xTaskResumeAll+0x130>)
 8006212:	2201      	movs	r2, #1
 8006214:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006216:	4b1c      	ldr	r3, [pc, #112]	@ (8006288 <xTaskResumeAll+0x120>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1cb      	bne.n	80061b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006224:	f000 fb66 	bl	80068f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006228:	4b1c      	ldr	r3, [pc, #112]	@ (800629c <xTaskResumeAll+0x134>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d010      	beq.n	8006256 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006234:	f000 f846 	bl	80062c4 <xTaskIncrementTick>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800623e:	4b16      	ldr	r3, [pc, #88]	@ (8006298 <xTaskResumeAll+0x130>)
 8006240:	2201      	movs	r2, #1
 8006242:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3b01      	subs	r3, #1
 8006248:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1f1      	bne.n	8006234 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006250:	4b12      	ldr	r3, [pc, #72]	@ (800629c <xTaskResumeAll+0x134>)
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006256:	4b10      	ldr	r3, [pc, #64]	@ (8006298 <xTaskResumeAll+0x130>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d009      	beq.n	8006272 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800625e:	2301      	movs	r3, #1
 8006260:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006262:	4b0f      	ldr	r3, [pc, #60]	@ (80062a0 <xTaskResumeAll+0x138>)
 8006264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006272:	f001 f8fb 	bl	800746c <vPortExitCritical>

	return xAlreadyYielded;
 8006276:	68bb      	ldr	r3, [r7, #8]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20000ed0 	.word	0x20000ed0
 8006284:	20000ea8 	.word	0x20000ea8
 8006288:	20000e68 	.word	0x20000e68
 800628c:	20000eb0 	.word	0x20000eb0
 8006290:	200009d8 	.word	0x200009d8
 8006294:	200009d4 	.word	0x200009d4
 8006298:	20000ebc 	.word	0x20000ebc
 800629c:	20000eb8 	.word	0x20000eb8
 80062a0:	e000ed04 	.word	0xe000ed04

080062a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80062aa:	4b05      	ldr	r3, [pc, #20]	@ (80062c0 <xTaskGetTickCount+0x1c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80062b0:	687b      	ldr	r3, [r7, #4]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	20000eac 	.word	0x20000eac

080062c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ce:	4b4f      	ldr	r3, [pc, #316]	@ (800640c <xTaskIncrementTick+0x148>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f040 8090 	bne.w	80063f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062d8:	4b4d      	ldr	r3, [pc, #308]	@ (8006410 <xTaskIncrementTick+0x14c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3301      	adds	r3, #1
 80062de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062e0:	4a4b      	ldr	r2, [pc, #300]	@ (8006410 <xTaskIncrementTick+0x14c>)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d121      	bne.n	8006330 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80062ec:	4b49      	ldr	r3, [pc, #292]	@ (8006414 <xTaskIncrementTick+0x150>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <xTaskIncrementTick+0x4a>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	603b      	str	r3, [r7, #0]
}
 8006308:	bf00      	nop
 800630a:	bf00      	nop
 800630c:	e7fd      	b.n	800630a <xTaskIncrementTick+0x46>
 800630e:	4b41      	ldr	r3, [pc, #260]	@ (8006414 <xTaskIncrementTick+0x150>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	4b40      	ldr	r3, [pc, #256]	@ (8006418 <xTaskIncrementTick+0x154>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a3e      	ldr	r2, [pc, #248]	@ (8006414 <xTaskIncrementTick+0x150>)
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	4a3e      	ldr	r2, [pc, #248]	@ (8006418 <xTaskIncrementTick+0x154>)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	4b3e      	ldr	r3, [pc, #248]	@ (800641c <xTaskIncrementTick+0x158>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3301      	adds	r3, #1
 8006328:	4a3c      	ldr	r2, [pc, #240]	@ (800641c <xTaskIncrementTick+0x158>)
 800632a:	6013      	str	r3, [r2, #0]
 800632c:	f000 fae2 	bl	80068f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006330:	4b3b      	ldr	r3, [pc, #236]	@ (8006420 <xTaskIncrementTick+0x15c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	429a      	cmp	r2, r3
 8006338:	d349      	bcc.n	80063ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800633a:	4b36      	ldr	r3, [pc, #216]	@ (8006414 <xTaskIncrementTick+0x150>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d104      	bne.n	800634e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006344:	4b36      	ldr	r3, [pc, #216]	@ (8006420 <xTaskIncrementTick+0x15c>)
 8006346:	f04f 32ff 	mov.w	r2, #4294967295
 800634a:	601a      	str	r2, [r3, #0]
					break;
 800634c:	e03f      	b.n	80063ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800634e:	4b31      	ldr	r3, [pc, #196]	@ (8006414 <xTaskIncrementTick+0x150>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	429a      	cmp	r2, r3
 8006364:	d203      	bcs.n	800636e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006366:	4a2e      	ldr	r2, [pc, #184]	@ (8006420 <xTaskIncrementTick+0x15c>)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800636c:	e02f      	b.n	80063ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	3304      	adds	r3, #4
 8006372:	4618      	mov	r0, r3
 8006374:	f7fe fea4 	bl	80050c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637c:	2b00      	cmp	r3, #0
 800637e:	d004      	beq.n	800638a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	3318      	adds	r3, #24
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe fe9b 	bl	80050c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800638e:	4b25      	ldr	r3, [pc, #148]	@ (8006424 <xTaskIncrementTick+0x160>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d903      	bls.n	800639e <xTaskIncrementTick+0xda>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639a:	4a22      	ldr	r2, [pc, #136]	@ (8006424 <xTaskIncrementTick+0x160>)
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4a1f      	ldr	r2, [pc, #124]	@ (8006428 <xTaskIncrementTick+0x164>)
 80063ac:	441a      	add	r2, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	3304      	adds	r3, #4
 80063b2:	4619      	mov	r1, r3
 80063b4:	4610      	mov	r0, r2
 80063b6:	f7fe fe26 	bl	8005006 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063be:	4b1b      	ldr	r3, [pc, #108]	@ (800642c <xTaskIncrementTick+0x168>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d3b8      	bcc.n	800633a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80063c8:	2301      	movs	r3, #1
 80063ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063cc:	e7b5      	b.n	800633a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063ce:	4b17      	ldr	r3, [pc, #92]	@ (800642c <xTaskIncrementTick+0x168>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d4:	4914      	ldr	r1, [pc, #80]	@ (8006428 <xTaskIncrementTick+0x164>)
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d901      	bls.n	80063ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80063e6:	2301      	movs	r3, #1
 80063e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80063ea:	4b11      	ldr	r3, [pc, #68]	@ (8006430 <xTaskIncrementTick+0x16c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d007      	beq.n	8006402 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80063f2:	2301      	movs	r3, #1
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	e004      	b.n	8006402 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80063f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006434 <xTaskIncrementTick+0x170>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3301      	adds	r3, #1
 80063fe:	4a0d      	ldr	r2, [pc, #52]	@ (8006434 <xTaskIncrementTick+0x170>)
 8006400:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006402:	697b      	ldr	r3, [r7, #20]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	20000ed0 	.word	0x20000ed0
 8006410:	20000eac 	.word	0x20000eac
 8006414:	20000e60 	.word	0x20000e60
 8006418:	20000e64 	.word	0x20000e64
 800641c:	20000ec0 	.word	0x20000ec0
 8006420:	20000ec8 	.word	0x20000ec8
 8006424:	20000eb0 	.word	0x20000eb0
 8006428:	200009d8 	.word	0x200009d8
 800642c:	200009d4 	.word	0x200009d4
 8006430:	20000ebc 	.word	0x20000ebc
 8006434:	20000eb8 	.word	0x20000eb8

08006438 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800643e:	4b2b      	ldr	r3, [pc, #172]	@ (80064ec <vTaskSwitchContext+0xb4>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006446:	4b2a      	ldr	r3, [pc, #168]	@ (80064f0 <vTaskSwitchContext+0xb8>)
 8006448:	2201      	movs	r2, #1
 800644a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800644c:	e047      	b.n	80064de <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800644e:	4b28      	ldr	r3, [pc, #160]	@ (80064f0 <vTaskSwitchContext+0xb8>)
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006454:	4b27      	ldr	r3, [pc, #156]	@ (80064f4 <vTaskSwitchContext+0xbc>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	e011      	b.n	8006480 <vTaskSwitchContext+0x48>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10b      	bne.n	800647a <vTaskSwitchContext+0x42>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	607b      	str	r3, [r7, #4]
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop
 8006478:	e7fd      	b.n	8006476 <vTaskSwitchContext+0x3e>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3b01      	subs	r3, #1
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	491d      	ldr	r1, [pc, #116]	@ (80064f8 <vTaskSwitchContext+0xc0>)
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4613      	mov	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d0e3      	beq.n	800645c <vTaskSwitchContext+0x24>
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4a16      	ldr	r2, [pc, #88]	@ (80064f8 <vTaskSwitchContext+0xc0>)
 80064a0:	4413      	add	r3, r2
 80064a2:	60bb      	str	r3, [r7, #8]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	605a      	str	r2, [r3, #4]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	3308      	adds	r3, #8
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d104      	bne.n	80064c4 <vTaskSwitchContext+0x8c>
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	605a      	str	r2, [r3, #4]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	4a0c      	ldr	r2, [pc, #48]	@ (80064fc <vTaskSwitchContext+0xc4>)
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	4a09      	ldr	r2, [pc, #36]	@ (80064f4 <vTaskSwitchContext+0xbc>)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064d4:	4b09      	ldr	r3, [pc, #36]	@ (80064fc <vTaskSwitchContext+0xc4>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3354      	adds	r3, #84	@ 0x54
 80064da:	4a09      	ldr	r2, [pc, #36]	@ (8006500 <vTaskSwitchContext+0xc8>)
 80064dc:	6013      	str	r3, [r2, #0]
}
 80064de:	bf00      	nop
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	20000ed0 	.word	0x20000ed0
 80064f0:	20000ebc 	.word	0x20000ebc
 80064f4:	20000eb0 	.word	0x20000eb0
 80064f8:	200009d8 	.word	0x200009d8
 80064fc:	200009d4 	.word	0x200009d4
 8006500:	20000010 	.word	0x20000010

08006504 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10b      	bne.n	800652c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	60fb      	str	r3, [r7, #12]
}
 8006526:	bf00      	nop
 8006528:	bf00      	nop
 800652a:	e7fd      	b.n	8006528 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800652c:	4b07      	ldr	r3, [pc, #28]	@ (800654c <vTaskPlaceOnEventList+0x48>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3318      	adds	r3, #24
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7fe fd8a 	bl	800504e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800653a:	2101      	movs	r1, #1
 800653c:	6838      	ldr	r0, [r7, #0]
 800653e:	f000 fa87 	bl	8006a50 <prvAddCurrentTaskToDelayedList>
}
 8006542:	bf00      	nop
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	200009d4 	.word	0x200009d4

08006550 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10b      	bne.n	800657a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	617b      	str	r3, [r7, #20]
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop
 8006578:	e7fd      	b.n	8006576 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800657a:	4b0a      	ldr	r3, [pc, #40]	@ (80065a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3318      	adds	r3, #24
 8006580:	4619      	mov	r1, r3
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f7fe fd3f 	bl	8005006 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800658e:	f04f 33ff 	mov.w	r3, #4294967295
 8006592:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	68b8      	ldr	r0, [r7, #8]
 8006598:	f000 fa5a 	bl	8006a50 <prvAddCurrentTaskToDelayedList>
	}
 800659c:	bf00      	nop
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	200009d4 	.word	0x200009d4

080065a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10b      	bne.n	80065d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	60fb      	str	r3, [r7, #12]
}
 80065d0:	bf00      	nop
 80065d2:	bf00      	nop
 80065d4:	e7fd      	b.n	80065d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	3318      	adds	r3, #24
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fe fd70 	bl	80050c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006658 <xTaskRemoveFromEventList+0xb0>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d11d      	bne.n	8006624 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	3304      	adds	r3, #4
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fe fd67 	bl	80050c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065f6:	4b19      	ldr	r3, [pc, #100]	@ (800665c <xTaskRemoveFromEventList+0xb4>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d903      	bls.n	8006606 <xTaskRemoveFromEventList+0x5e>
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006602:	4a16      	ldr	r2, [pc, #88]	@ (800665c <xTaskRemoveFromEventList+0xb4>)
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4a13      	ldr	r2, [pc, #76]	@ (8006660 <xTaskRemoveFromEventList+0xb8>)
 8006614:	441a      	add	r2, r3
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	3304      	adds	r3, #4
 800661a:	4619      	mov	r1, r3
 800661c:	4610      	mov	r0, r2
 800661e:	f7fe fcf2 	bl	8005006 <vListInsertEnd>
 8006622:	e005      	b.n	8006630 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	3318      	adds	r3, #24
 8006628:	4619      	mov	r1, r3
 800662a:	480e      	ldr	r0, [pc, #56]	@ (8006664 <xTaskRemoveFromEventList+0xbc>)
 800662c:	f7fe fceb 	bl	8005006 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006634:	4b0c      	ldr	r3, [pc, #48]	@ (8006668 <xTaskRemoveFromEventList+0xc0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663a:	429a      	cmp	r2, r3
 800663c:	d905      	bls.n	800664a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800663e:	2301      	movs	r3, #1
 8006640:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006642:	4b0a      	ldr	r3, [pc, #40]	@ (800666c <xTaskRemoveFromEventList+0xc4>)
 8006644:	2201      	movs	r2, #1
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	e001      	b.n	800664e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800664a:	2300      	movs	r3, #0
 800664c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800664e:	697b      	ldr	r3, [r7, #20]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20000ed0 	.word	0x20000ed0
 800665c:	20000eb0 	.word	0x20000eb0
 8006660:	200009d8 	.word	0x200009d8
 8006664:	20000e68 	.word	0x20000e68
 8006668:	200009d4 	.word	0x200009d4
 800666c:	20000ebc 	.word	0x20000ebc

08006670 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006678:	4b06      	ldr	r3, [pc, #24]	@ (8006694 <vTaskInternalSetTimeOutState+0x24>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006680:	4b05      	ldr	r3, [pc, #20]	@ (8006698 <vTaskInternalSetTimeOutState+0x28>)
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	605a      	str	r2, [r3, #4]
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	20000ec0 	.word	0x20000ec0
 8006698:	20000eac 	.word	0x20000eac

0800669c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b088      	sub	sp, #32
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10b      	bne.n	80066c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	613b      	str	r3, [r7, #16]
}
 80066be:	bf00      	nop
 80066c0:	bf00      	nop
 80066c2:	e7fd      	b.n	80066c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10b      	bne.n	80066e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	60fb      	str	r3, [r7, #12]
}
 80066dc:	bf00      	nop
 80066de:	bf00      	nop
 80066e0:	e7fd      	b.n	80066de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80066e2:	f000 fe91 	bl	8007408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80066e6:	4b1d      	ldr	r3, [pc, #116]	@ (800675c <xTaskCheckForTimeOut+0xc0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fe:	d102      	bne.n	8006706 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006700:	2300      	movs	r3, #0
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	e023      	b.n	800674e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	4b15      	ldr	r3, [pc, #84]	@ (8006760 <xTaskCheckForTimeOut+0xc4>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d007      	beq.n	8006722 <xTaskCheckForTimeOut+0x86>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	429a      	cmp	r2, r3
 800671a:	d302      	bcc.n	8006722 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800671c:	2301      	movs	r3, #1
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	e015      	b.n	800674e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	429a      	cmp	r2, r3
 800672a:	d20b      	bcs.n	8006744 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	1ad2      	subs	r2, r2, r3
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff ff99 	bl	8006670 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	e004      	b.n	800674e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2200      	movs	r2, #0
 8006748:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800674a:	2301      	movs	r3, #1
 800674c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800674e:	f000 fe8d 	bl	800746c <vPortExitCritical>

	return xReturn;
 8006752:	69fb      	ldr	r3, [r7, #28]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3720      	adds	r7, #32
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	20000eac 	.word	0x20000eac
 8006760:	20000ec0 	.word	0x20000ec0

08006764 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006768:	4b03      	ldr	r3, [pc, #12]	@ (8006778 <vTaskMissedYield+0x14>)
 800676a:	2201      	movs	r2, #1
 800676c:	601a      	str	r2, [r3, #0]
}
 800676e:	bf00      	nop
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	20000ebc 	.word	0x20000ebc

0800677c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006784:	f000 f852 	bl	800682c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006788:	4b06      	ldr	r3, [pc, #24]	@ (80067a4 <prvIdleTask+0x28>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d9f9      	bls.n	8006784 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006790:	4b05      	ldr	r3, [pc, #20]	@ (80067a8 <prvIdleTask+0x2c>)
 8006792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067a0:	e7f0      	b.n	8006784 <prvIdleTask+0x8>
 80067a2:	bf00      	nop
 80067a4:	200009d8 	.word	0x200009d8
 80067a8:	e000ed04 	.word	0xe000ed04

080067ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067b2:	2300      	movs	r3, #0
 80067b4:	607b      	str	r3, [r7, #4]
 80067b6:	e00c      	b.n	80067d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4a12      	ldr	r2, [pc, #72]	@ (800680c <prvInitialiseTaskLists+0x60>)
 80067c4:	4413      	add	r3, r2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fe fbf0 	bl	8004fac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3301      	adds	r3, #1
 80067d0:	607b      	str	r3, [r7, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b37      	cmp	r3, #55	@ 0x37
 80067d6:	d9ef      	bls.n	80067b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80067d8:	480d      	ldr	r0, [pc, #52]	@ (8006810 <prvInitialiseTaskLists+0x64>)
 80067da:	f7fe fbe7 	bl	8004fac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067de:	480d      	ldr	r0, [pc, #52]	@ (8006814 <prvInitialiseTaskLists+0x68>)
 80067e0:	f7fe fbe4 	bl	8004fac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80067e4:	480c      	ldr	r0, [pc, #48]	@ (8006818 <prvInitialiseTaskLists+0x6c>)
 80067e6:	f7fe fbe1 	bl	8004fac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067ea:	480c      	ldr	r0, [pc, #48]	@ (800681c <prvInitialiseTaskLists+0x70>)
 80067ec:	f7fe fbde 	bl	8004fac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067f0:	480b      	ldr	r0, [pc, #44]	@ (8006820 <prvInitialiseTaskLists+0x74>)
 80067f2:	f7fe fbdb 	bl	8004fac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006824 <prvInitialiseTaskLists+0x78>)
 80067f8:	4a05      	ldr	r2, [pc, #20]	@ (8006810 <prvInitialiseTaskLists+0x64>)
 80067fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006828 <prvInitialiseTaskLists+0x7c>)
 80067fe:	4a05      	ldr	r2, [pc, #20]	@ (8006814 <prvInitialiseTaskLists+0x68>)
 8006800:	601a      	str	r2, [r3, #0]
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	200009d8 	.word	0x200009d8
 8006810:	20000e38 	.word	0x20000e38
 8006814:	20000e4c 	.word	0x20000e4c
 8006818:	20000e68 	.word	0x20000e68
 800681c:	20000e7c 	.word	0x20000e7c
 8006820:	20000e94 	.word	0x20000e94
 8006824:	20000e60 	.word	0x20000e60
 8006828:	20000e64 	.word	0x20000e64

0800682c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006832:	e019      	b.n	8006868 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006834:	f000 fde8 	bl	8007408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006838:	4b10      	ldr	r3, [pc, #64]	@ (800687c <prvCheckTasksWaitingTermination+0x50>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3304      	adds	r3, #4
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe fc3b 	bl	80050c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800684a:	4b0d      	ldr	r3, [pc, #52]	@ (8006880 <prvCheckTasksWaitingTermination+0x54>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3b01      	subs	r3, #1
 8006850:	4a0b      	ldr	r2, [pc, #44]	@ (8006880 <prvCheckTasksWaitingTermination+0x54>)
 8006852:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006854:	4b0b      	ldr	r3, [pc, #44]	@ (8006884 <prvCheckTasksWaitingTermination+0x58>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3b01      	subs	r3, #1
 800685a:	4a0a      	ldr	r2, [pc, #40]	@ (8006884 <prvCheckTasksWaitingTermination+0x58>)
 800685c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800685e:	f000 fe05 	bl	800746c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f810 	bl	8006888 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006868:	4b06      	ldr	r3, [pc, #24]	@ (8006884 <prvCheckTasksWaitingTermination+0x58>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e1      	bne.n	8006834 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006870:	bf00      	nop
 8006872:	bf00      	nop
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000e7c 	.word	0x20000e7c
 8006880:	20000ea8 	.word	0x20000ea8
 8006884:	20000e90 	.word	0x20000e90

08006888 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3354      	adds	r3, #84	@ 0x54
 8006894:	4618      	mov	r0, r3
 8006896:	f001 f8ef 	bl	8007a78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d108      	bne.n	80068b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 ff9d 	bl	80077e8 <vPortFree>
				vPortFree( pxTCB );
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 ff9a 	bl	80077e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068b4:	e019      	b.n	80068ea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d103      	bne.n	80068c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 ff91 	bl	80077e8 <vPortFree>
	}
 80068c6:	e010      	b.n	80068ea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d00b      	beq.n	80068ea <prvDeleteTCB+0x62>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	60fb      	str	r3, [r7, #12]
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	e7fd      	b.n	80068e6 <prvDeleteTCB+0x5e>
	}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068fa:	4b0c      	ldr	r3, [pc, #48]	@ (800692c <prvResetNextTaskUnblockTime+0x38>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d104      	bne.n	800690e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006904:	4b0a      	ldr	r3, [pc, #40]	@ (8006930 <prvResetNextTaskUnblockTime+0x3c>)
 8006906:	f04f 32ff 	mov.w	r2, #4294967295
 800690a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800690c:	e008      	b.n	8006920 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800690e:	4b07      	ldr	r3, [pc, #28]	@ (800692c <prvResetNextTaskUnblockTime+0x38>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	4a04      	ldr	r2, [pc, #16]	@ (8006930 <prvResetNextTaskUnblockTime+0x3c>)
 800691e:	6013      	str	r3, [r2, #0]
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	20000e60 	.word	0x20000e60
 8006930:	20000ec8 	.word	0x20000ec8

08006934 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800693a:	4b0b      	ldr	r3, [pc, #44]	@ (8006968 <xTaskGetSchedulerState+0x34>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d102      	bne.n	8006948 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006942:	2301      	movs	r3, #1
 8006944:	607b      	str	r3, [r7, #4]
 8006946:	e008      	b.n	800695a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006948:	4b08      	ldr	r3, [pc, #32]	@ (800696c <xTaskGetSchedulerState+0x38>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d102      	bne.n	8006956 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006950:	2302      	movs	r3, #2
 8006952:	607b      	str	r3, [r7, #4]
 8006954:	e001      	b.n	800695a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006956:	2300      	movs	r3, #0
 8006958:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800695a:	687b      	ldr	r3, [r7, #4]
	}
 800695c:	4618      	mov	r0, r3
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	20000eb4 	.word	0x20000eb4
 800696c:	20000ed0 	.word	0x20000ed0

08006970 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d058      	beq.n	8006a38 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006986:	4b2f      	ldr	r3, [pc, #188]	@ (8006a44 <xTaskPriorityDisinherit+0xd4>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	429a      	cmp	r2, r3
 800698e:	d00b      	beq.n	80069a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	60fb      	str	r3, [r7, #12]
}
 80069a2:	bf00      	nop
 80069a4:	bf00      	nop
 80069a6:	e7fd      	b.n	80069a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10b      	bne.n	80069c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	60bb      	str	r3, [r7, #8]
}
 80069c2:	bf00      	nop
 80069c4:	bf00      	nop
 80069c6:	e7fd      	b.n	80069c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069cc:	1e5a      	subs	r2, r3, #1
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069da:	429a      	cmp	r2, r3
 80069dc:	d02c      	beq.n	8006a38 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d128      	bne.n	8006a38 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	3304      	adds	r3, #4
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe fb68 	bl	80050c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a08:	4b0f      	ldr	r3, [pc, #60]	@ (8006a48 <xTaskPriorityDisinherit+0xd8>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d903      	bls.n	8006a18 <xTaskPriorityDisinherit+0xa8>
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a14:	4a0c      	ldr	r2, [pc, #48]	@ (8006a48 <xTaskPriorityDisinherit+0xd8>)
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4a09      	ldr	r2, [pc, #36]	@ (8006a4c <xTaskPriorityDisinherit+0xdc>)
 8006a26:	441a      	add	r2, r3
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4610      	mov	r0, r2
 8006a30:	f7fe fae9 	bl	8005006 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a34:	2301      	movs	r3, #1
 8006a36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a38:	697b      	ldr	r3, [r7, #20]
	}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3718      	adds	r7, #24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	200009d4 	.word	0x200009d4
 8006a48:	20000eb0 	.word	0x20000eb0
 8006a4c:	200009d8 	.word	0x200009d8

08006a50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a5a:	4b21      	ldr	r3, [pc, #132]	@ (8006ae0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a60:	4b20      	ldr	r3, [pc, #128]	@ (8006ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3304      	adds	r3, #4
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe fb2a 	bl	80050c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a72:	d10a      	bne.n	8006a8a <prvAddCurrentTaskToDelayedList+0x3a>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d007      	beq.n	8006a8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3304      	adds	r3, #4
 8006a80:	4619      	mov	r1, r3
 8006a82:	4819      	ldr	r0, [pc, #100]	@ (8006ae8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a84:	f7fe fabf 	bl	8005006 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a88:	e026      	b.n	8006ad8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4413      	add	r3, r2
 8006a90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a92:	4b14      	ldr	r3, [pc, #80]	@ (8006ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d209      	bcs.n	8006ab6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aa2:	4b12      	ldr	r3, [pc, #72]	@ (8006aec <prvAddCurrentTaskToDelayedList+0x9c>)
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4619      	mov	r1, r3
 8006aae:	4610      	mov	r0, r2
 8006ab0:	f7fe facd 	bl	800504e <vListInsert>
}
 8006ab4:	e010      	b.n	8006ad8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8006af0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3304      	adds	r3, #4
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	f7fe fac3 	bl	800504e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8006af4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d202      	bcs.n	8006ad8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ad2:	4a08      	ldr	r2, [pc, #32]	@ (8006af4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	6013      	str	r3, [r2, #0]
}
 8006ad8:	bf00      	nop
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	20000eac 	.word	0x20000eac
 8006ae4:	200009d4 	.word	0x200009d4
 8006ae8:	20000e94 	.word	0x20000e94
 8006aec:	20000e64 	.word	0x20000e64
 8006af0:	20000e60 	.word	0x20000e60
 8006af4:	20000ec8 	.word	0x20000ec8

08006af8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08a      	sub	sp, #40	@ 0x28
 8006afc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b02:	f000 fb13 	bl	800712c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b06:	4b1d      	ldr	r3, [pc, #116]	@ (8006b7c <xTimerCreateTimerTask+0x84>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d021      	beq.n	8006b52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b16:	1d3a      	adds	r2, r7, #4
 8006b18:	f107 0108 	add.w	r1, r7, #8
 8006b1c:	f107 030c 	add.w	r3, r7, #12
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe fa29 	bl	8004f78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	9202      	str	r2, [sp, #8]
 8006b2e:	9301      	str	r3, [sp, #4]
 8006b30:	2302      	movs	r3, #2
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	2300      	movs	r3, #0
 8006b36:	460a      	mov	r2, r1
 8006b38:	4911      	ldr	r1, [pc, #68]	@ (8006b80 <xTimerCreateTimerTask+0x88>)
 8006b3a:	4812      	ldr	r0, [pc, #72]	@ (8006b84 <xTimerCreateTimerTask+0x8c>)
 8006b3c:	f7ff f8a2 	bl	8005c84 <xTaskCreateStatic>
 8006b40:	4603      	mov	r3, r0
 8006b42:	4a11      	ldr	r2, [pc, #68]	@ (8006b88 <xTimerCreateTimerTask+0x90>)
 8006b44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b46:	4b10      	ldr	r3, [pc, #64]	@ (8006b88 <xTimerCreateTimerTask+0x90>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10b      	bne.n	8006b70 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	613b      	str	r3, [r7, #16]
}
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
 8006b6e:	e7fd      	b.n	8006b6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b70:	697b      	ldr	r3, [r7, #20]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000f04 	.word	0x20000f04
 8006b80:	08008468 	.word	0x08008468
 8006b84:	08006cc5 	.word	0x08006cc5
 8006b88:	20000f08 	.word	0x20000f08

08006b8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08a      	sub	sp, #40	@ 0x28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10b      	bne.n	8006bbc <xTimerGenericCommand+0x30>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	623b      	str	r3, [r7, #32]
}
 8006bb6:	bf00      	nop
 8006bb8:	bf00      	nop
 8006bba:	e7fd      	b.n	8006bb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006bbc:	4b19      	ldr	r3, [pc, #100]	@ (8006c24 <xTimerGenericCommand+0x98>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d02a      	beq.n	8006c1a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b05      	cmp	r3, #5
 8006bd4:	dc18      	bgt.n	8006c08 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006bd6:	f7ff fead 	bl	8006934 <xTaskGetSchedulerState>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d109      	bne.n	8006bf4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006be0:	4b10      	ldr	r3, [pc, #64]	@ (8006c24 <xTimerGenericCommand+0x98>)
 8006be2:	6818      	ldr	r0, [r3, #0]
 8006be4:	f107 0110 	add.w	r1, r7, #16
 8006be8:	2300      	movs	r3, #0
 8006bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bec:	f7fe fbd8 	bl	80053a0 <xQueueGenericSend>
 8006bf0:	6278      	str	r0, [r7, #36]	@ 0x24
 8006bf2:	e012      	b.n	8006c1a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8006c24 <xTimerGenericCommand+0x98>)
 8006bf6:	6818      	ldr	r0, [r3, #0]
 8006bf8:	f107 0110 	add.w	r1, r7, #16
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f7fe fbce 	bl	80053a0 <xQueueGenericSend>
 8006c04:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c06:	e008      	b.n	8006c1a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c08:	4b06      	ldr	r3, [pc, #24]	@ (8006c24 <xTimerGenericCommand+0x98>)
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	f107 0110 	add.w	r1, r7, #16
 8006c10:	2300      	movs	r3, #0
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	f7fe fcc6 	bl	80055a4 <xQueueGenericSendFromISR>
 8006c18:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3728      	adds	r7, #40	@ 0x28
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	20000f04 	.word	0x20000f04

08006c28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af02      	add	r7, sp, #8
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c32:	4b23      	ldr	r3, [pc, #140]	@ (8006cc0 <prvProcessExpiredTimer+0x98>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fe fa3d 	bl	80050c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d023      	beq.n	8006c9c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	699a      	ldr	r2, [r3, #24]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	18d1      	adds	r1, r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	6978      	ldr	r0, [r7, #20]
 8006c62:	f000 f8d5 	bl	8006e10 <prvInsertTimerInActiveList>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d020      	beq.n	8006cae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	2300      	movs	r3, #0
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	2100      	movs	r1, #0
 8006c76:	6978      	ldr	r0, [r7, #20]
 8006c78:	f7ff ff88 	bl	8006b8c <xTimerGenericCommand>
 8006c7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d114      	bne.n	8006cae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	60fb      	str	r3, [r7, #12]
}
 8006c96:	bf00      	nop
 8006c98:	bf00      	nop
 8006c9a:	e7fd      	b.n	8006c98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ca2:	f023 0301 	bic.w	r3, r3, #1
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	6978      	ldr	r0, [r7, #20]
 8006cb4:	4798      	blx	r3
}
 8006cb6:	bf00      	nop
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20000efc 	.word	0x20000efc

08006cc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ccc:	f107 0308 	add.w	r3, r7, #8
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 f859 	bl	8006d88 <prvGetNextExpireTime>
 8006cd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 f805 	bl	8006cec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ce2:	f000 f8d7 	bl	8006e94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ce6:	bf00      	nop
 8006ce8:	e7f0      	b.n	8006ccc <prvTimerTask+0x8>
	...

08006cec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006cf6:	f7ff fa29 	bl	800614c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cfa:	f107 0308 	add.w	r3, r7, #8
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 f866 	bl	8006dd0 <prvSampleTimeNow>
 8006d04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d130      	bne.n	8006d6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <prvProcessTimerOrBlockTask+0x3c>
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d806      	bhi.n	8006d28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d1a:	f7ff fa25 	bl	8006168 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7ff ff81 	bl	8006c28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d26:	e024      	b.n	8006d72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d008      	beq.n	8006d40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d2e:	4b13      	ldr	r3, [pc, #76]	@ (8006d7c <prvProcessTimerOrBlockTask+0x90>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <prvProcessTimerOrBlockTask+0x50>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <prvProcessTimerOrBlockTask+0x52>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d40:	4b0f      	ldr	r3, [pc, #60]	@ (8006d80 <prvProcessTimerOrBlockTask+0x94>)
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	f7fe ff65 	bl	8005c1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d52:	f7ff fa09 	bl	8006168 <xTaskResumeAll>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10a      	bne.n	8006d72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d5c:	4b09      	ldr	r3, [pc, #36]	@ (8006d84 <prvProcessTimerOrBlockTask+0x98>)
 8006d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	f3bf 8f6f 	isb	sy
}
 8006d6c:	e001      	b.n	8006d72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d6e:	f7ff f9fb 	bl	8006168 <xTaskResumeAll>
}
 8006d72:	bf00      	nop
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20000f00 	.word	0x20000f00
 8006d80:	20000f04 	.word	0x20000f04
 8006d84:	e000ed04 	.word	0xe000ed04

08006d88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d90:	4b0e      	ldr	r3, [pc, #56]	@ (8006dcc <prvGetNextExpireTime+0x44>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <prvGetNextExpireTime+0x16>
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	e000      	b.n	8006da0 <prvGetNextExpireTime+0x18>
 8006d9e:	2200      	movs	r2, #0
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d105      	bne.n	8006db8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dac:	4b07      	ldr	r3, [pc, #28]	@ (8006dcc <prvGetNextExpireTime+0x44>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	e001      	b.n	8006dbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	20000efc 	.word	0x20000efc

08006dd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006dd8:	f7ff fa64 	bl	80062a4 <xTaskGetTickCount>
 8006ddc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006dde:	4b0b      	ldr	r3, [pc, #44]	@ (8006e0c <prvSampleTimeNow+0x3c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d205      	bcs.n	8006df4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006de8:	f000 f93a 	bl	8007060 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	e002      	b.n	8006dfa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006dfa:	4a04      	ldr	r2, [pc, #16]	@ (8006e0c <prvSampleTimeNow+0x3c>)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e00:	68fb      	ldr	r3, [r7, #12]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000f0c 	.word	0x20000f0c

08006e10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d812      	bhi.n	8006e5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	1ad2      	subs	r2, r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d302      	bcc.n	8006e4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e44:	2301      	movs	r3, #1
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	e01b      	b.n	8006e82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e4a:	4b10      	ldr	r3, [pc, #64]	@ (8006e8c <prvInsertTimerInActiveList+0x7c>)
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3304      	adds	r3, #4
 8006e52:	4619      	mov	r1, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	f7fe f8fa 	bl	800504e <vListInsert>
 8006e5a:	e012      	b.n	8006e82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d206      	bcs.n	8006e72 <prvInsertTimerInActiveList+0x62>
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d302      	bcc.n	8006e72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	e007      	b.n	8006e82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e72:	4b07      	ldr	r3, [pc, #28]	@ (8006e90 <prvInsertTimerInActiveList+0x80>)
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	f7fe f8e6 	bl	800504e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e82:	697b      	ldr	r3, [r7, #20]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20000f00 	.word	0x20000f00
 8006e90:	20000efc 	.word	0x20000efc

08006e94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08e      	sub	sp, #56	@ 0x38
 8006e98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e9a:	e0ce      	b.n	800703a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	da19      	bge.n	8006ed6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ea2:	1d3b      	adds	r3, r7, #4
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10b      	bne.n	8006ec6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	61fb      	str	r3, [r7, #28]
}
 8006ec0:	bf00      	nop
 8006ec2:	bf00      	nop
 8006ec4:	e7fd      	b.n	8006ec2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ecc:	6850      	ldr	r0, [r2, #4]
 8006ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ed0:	6892      	ldr	r2, [r2, #8]
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f2c0 80ae 	blt.w	800703a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d004      	beq.n	8006ef4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eec:	3304      	adds	r3, #4
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe f8e6 	bl	80050c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7ff ff6a 	bl	8006dd0 <prvSampleTimeNow>
 8006efc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b09      	cmp	r3, #9
 8006f02:	f200 8097 	bhi.w	8007034 <prvProcessReceivedCommands+0x1a0>
 8006f06:	a201      	add	r2, pc, #4	@ (adr r2, 8006f0c <prvProcessReceivedCommands+0x78>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f35 	.word	0x08006f35
 8006f10:	08006f35 	.word	0x08006f35
 8006f14:	08006f35 	.word	0x08006f35
 8006f18:	08006fab 	.word	0x08006fab
 8006f1c:	08006fbf 	.word	0x08006fbf
 8006f20:	0800700b 	.word	0x0800700b
 8006f24:	08006f35 	.word	0x08006f35
 8006f28:	08006f35 	.word	0x08006f35
 8006f2c:	08006fab 	.word	0x08006fab
 8006f30:	08006fbf 	.word	0x08006fbf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f3a:	f043 0301 	orr.w	r3, r3, #1
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	18d1      	adds	r1, r2, r3
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f54:	f7ff ff5c 	bl	8006e10 <prvInsertTimerInActiveList>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d06c      	beq.n	8007038 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f6c:	f003 0304 	and.w	r3, r3, #4
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d061      	beq.n	8007038 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	441a      	add	r2, r3
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	2300      	movs	r3, #0
 8006f82:	2100      	movs	r1, #0
 8006f84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f86:	f7ff fe01 	bl	8006b8c <xTimerGenericCommand>
 8006f8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d152      	bne.n	8007038 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	61bb      	str	r3, [r7, #24]
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop
 8006fa8:	e7fd      	b.n	8006fa6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fb0:	f023 0301 	bic.w	r3, r3, #1
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006fbc:	e03d      	b.n	800703a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fc4:	f043 0301 	orr.w	r3, r3, #1
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10b      	bne.n	8006ff6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	617b      	str	r3, [r7, #20]
}
 8006ff0:	bf00      	nop
 8006ff2:	bf00      	nop
 8006ff4:	e7fd      	b.n	8006ff2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff8:	699a      	ldr	r2, [r3, #24]
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffc:	18d1      	adds	r1, r2, r3
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007004:	f7ff ff04 	bl	8006e10 <prvInsertTimerInActiveList>
					break;
 8007008:	e017      	b.n	800703a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800700a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d103      	bne.n	8007020 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007018:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800701a:	f000 fbe5 	bl	80077e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800701e:	e00c      	b.n	800703a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007022:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007026:	f023 0301 	bic.w	r3, r3, #1
 800702a:	b2da      	uxtb	r2, r3
 800702c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007032:	e002      	b.n	800703a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007034:	bf00      	nop
 8007036:	e000      	b.n	800703a <prvProcessReceivedCommands+0x1a6>
					break;
 8007038:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800703a:	4b08      	ldr	r3, [pc, #32]	@ (800705c <prvProcessReceivedCommands+0x1c8>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	1d39      	adds	r1, r7, #4
 8007040:	2200      	movs	r2, #0
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe fb4c 	bl	80056e0 <xQueueReceive>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	f47f af26 	bne.w	8006e9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007050:	bf00      	nop
 8007052:	bf00      	nop
 8007054:	3730      	adds	r7, #48	@ 0x30
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20000f04 	.word	0x20000f04

08007060 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007066:	e049      	b.n	80070fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007068:	4b2e      	ldr	r3, [pc, #184]	@ (8007124 <prvSwitchTimerLists+0xc4>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007072:	4b2c      	ldr	r3, [pc, #176]	@ (8007124 <prvSwitchTimerLists+0xc4>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	3304      	adds	r3, #4
 8007080:	4618      	mov	r0, r3
 8007082:	f7fe f81d 	bl	80050c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d02f      	beq.n	80070fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	4413      	add	r3, r2
 80070a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d90e      	bls.n	80070cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007124 <prvSwitchTimerLists+0xc4>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3304      	adds	r3, #4
 80070c2:	4619      	mov	r1, r3
 80070c4:	4610      	mov	r0, r2
 80070c6:	f7fd ffc2 	bl	800504e <vListInsert>
 80070ca:	e017      	b.n	80070fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070cc:	2300      	movs	r3, #0
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	2300      	movs	r3, #0
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	2100      	movs	r1, #0
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f7ff fd58 	bl	8006b8c <xTimerGenericCommand>
 80070dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10b      	bne.n	80070fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	603b      	str	r3, [r7, #0]
}
 80070f6:	bf00      	nop
 80070f8:	bf00      	nop
 80070fa:	e7fd      	b.n	80070f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070fc:	4b09      	ldr	r3, [pc, #36]	@ (8007124 <prvSwitchTimerLists+0xc4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1b0      	bne.n	8007068 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007106:	4b07      	ldr	r3, [pc, #28]	@ (8007124 <prvSwitchTimerLists+0xc4>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800710c:	4b06      	ldr	r3, [pc, #24]	@ (8007128 <prvSwitchTimerLists+0xc8>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a04      	ldr	r2, [pc, #16]	@ (8007124 <prvSwitchTimerLists+0xc4>)
 8007112:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007114:	4a04      	ldr	r2, [pc, #16]	@ (8007128 <prvSwitchTimerLists+0xc8>)
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	6013      	str	r3, [r2, #0]
}
 800711a:	bf00      	nop
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20000efc 	.word	0x20000efc
 8007128:	20000f00 	.word	0x20000f00

0800712c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007132:	f000 f969 	bl	8007408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007136:	4b15      	ldr	r3, [pc, #84]	@ (800718c <prvCheckForValidListAndQueue+0x60>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d120      	bne.n	8007180 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800713e:	4814      	ldr	r0, [pc, #80]	@ (8007190 <prvCheckForValidListAndQueue+0x64>)
 8007140:	f7fd ff34 	bl	8004fac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007144:	4813      	ldr	r0, [pc, #76]	@ (8007194 <prvCheckForValidListAndQueue+0x68>)
 8007146:	f7fd ff31 	bl	8004fac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800714a:	4b13      	ldr	r3, [pc, #76]	@ (8007198 <prvCheckForValidListAndQueue+0x6c>)
 800714c:	4a10      	ldr	r2, [pc, #64]	@ (8007190 <prvCheckForValidListAndQueue+0x64>)
 800714e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007150:	4b12      	ldr	r3, [pc, #72]	@ (800719c <prvCheckForValidListAndQueue+0x70>)
 8007152:	4a10      	ldr	r2, [pc, #64]	@ (8007194 <prvCheckForValidListAndQueue+0x68>)
 8007154:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007156:	2300      	movs	r3, #0
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	4b11      	ldr	r3, [pc, #68]	@ (80071a0 <prvCheckForValidListAndQueue+0x74>)
 800715c:	4a11      	ldr	r2, [pc, #68]	@ (80071a4 <prvCheckForValidListAndQueue+0x78>)
 800715e:	2110      	movs	r1, #16
 8007160:	200a      	movs	r0, #10
 8007162:	f7fe f841 	bl	80051e8 <xQueueGenericCreateStatic>
 8007166:	4603      	mov	r3, r0
 8007168:	4a08      	ldr	r2, [pc, #32]	@ (800718c <prvCheckForValidListAndQueue+0x60>)
 800716a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800716c:	4b07      	ldr	r3, [pc, #28]	@ (800718c <prvCheckForValidListAndQueue+0x60>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007174:	4b05      	ldr	r3, [pc, #20]	@ (800718c <prvCheckForValidListAndQueue+0x60>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	490b      	ldr	r1, [pc, #44]	@ (80071a8 <prvCheckForValidListAndQueue+0x7c>)
 800717a:	4618      	mov	r0, r3
 800717c:	f7fe fd24 	bl	8005bc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007180:	f000 f974 	bl	800746c <vPortExitCritical>
}
 8007184:	bf00      	nop
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000f04 	.word	0x20000f04
 8007190:	20000ed4 	.word	0x20000ed4
 8007194:	20000ee8 	.word	0x20000ee8
 8007198:	20000efc 	.word	0x20000efc
 800719c:	20000f00 	.word	0x20000f00
 80071a0:	20000fb0 	.word	0x20000fb0
 80071a4:	20000f10 	.word	0x20000f10
 80071a8:	08008470 	.word	0x08008470

080071ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3b04      	subs	r3, #4
 80071bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80071c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	3b04      	subs	r3, #4
 80071ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f023 0201 	bic.w	r2, r3, #1
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	3b04      	subs	r3, #4
 80071da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071dc:	4a0c      	ldr	r2, [pc, #48]	@ (8007210 <pxPortInitialiseStack+0x64>)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3b14      	subs	r3, #20
 80071e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3b04      	subs	r3, #4
 80071f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f06f 0202 	mvn.w	r2, #2
 80071fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	3b20      	subs	r3, #32
 8007200:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007202:	68fb      	ldr	r3, [r7, #12]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	08007215 	.word	0x08007215

08007214 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800721e:	4b13      	ldr	r3, [pc, #76]	@ (800726c <prvTaskExitError+0x58>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007226:	d00b      	beq.n	8007240 <prvTaskExitError+0x2c>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	60fb      	str	r3, [r7, #12]
}
 800723a:	bf00      	nop
 800723c:	bf00      	nop
 800723e:	e7fd      	b.n	800723c <prvTaskExitError+0x28>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	60bb      	str	r3, [r7, #8]
}
 8007252:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007254:	bf00      	nop
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d0fc      	beq.n	8007256 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800725c:	bf00      	nop
 800725e:	bf00      	nop
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	2000000c 	.word	0x2000000c

08007270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007270:	4b07      	ldr	r3, [pc, #28]	@ (8007290 <pxCurrentTCBConst2>)
 8007272:	6819      	ldr	r1, [r3, #0]
 8007274:	6808      	ldr	r0, [r1, #0]
 8007276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727a:	f380 8809 	msr	PSP, r0
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f04f 0000 	mov.w	r0, #0
 8007286:	f380 8811 	msr	BASEPRI, r0
 800728a:	4770      	bx	lr
 800728c:	f3af 8000 	nop.w

08007290 <pxCurrentTCBConst2>:
 8007290:	200009d4 	.word	0x200009d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop

08007298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007298:	4808      	ldr	r0, [pc, #32]	@ (80072bc <prvPortStartFirstTask+0x24>)
 800729a:	6800      	ldr	r0, [r0, #0]
 800729c:	6800      	ldr	r0, [r0, #0]
 800729e:	f380 8808 	msr	MSP, r0
 80072a2:	f04f 0000 	mov.w	r0, #0
 80072a6:	f380 8814 	msr	CONTROL, r0
 80072aa:	b662      	cpsie	i
 80072ac:	b661      	cpsie	f
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	df00      	svc	0
 80072b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072ba:	bf00      	nop
 80072bc:	e000ed08 	.word	0xe000ed08

080072c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072c6:	4b47      	ldr	r3, [pc, #284]	@ (80073e4 <xPortStartScheduler+0x124>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a47      	ldr	r2, [pc, #284]	@ (80073e8 <xPortStartScheduler+0x128>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d10b      	bne.n	80072e8 <xPortStartScheduler+0x28>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	613b      	str	r3, [r7, #16]
}
 80072e2:	bf00      	nop
 80072e4:	bf00      	nop
 80072e6:	e7fd      	b.n	80072e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072e8:	4b3e      	ldr	r3, [pc, #248]	@ (80073e4 <xPortStartScheduler+0x124>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a3f      	ldr	r2, [pc, #252]	@ (80073ec <xPortStartScheduler+0x12c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d10b      	bne.n	800730a <xPortStartScheduler+0x4a>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	60fb      	str	r3, [r7, #12]
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop
 8007308:	e7fd      	b.n	8007306 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800730a:	4b39      	ldr	r3, [pc, #228]	@ (80073f0 <xPortStartScheduler+0x130>)
 800730c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	22ff      	movs	r2, #255	@ 0xff
 800731a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007324:	78fb      	ldrb	r3, [r7, #3]
 8007326:	b2db      	uxtb	r3, r3
 8007328:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800732c:	b2da      	uxtb	r2, r3
 800732e:	4b31      	ldr	r3, [pc, #196]	@ (80073f4 <xPortStartScheduler+0x134>)
 8007330:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007332:	4b31      	ldr	r3, [pc, #196]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007334:	2207      	movs	r2, #7
 8007336:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007338:	e009      	b.n	800734e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800733a:	4b2f      	ldr	r3, [pc, #188]	@ (80073f8 <xPortStartScheduler+0x138>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3b01      	subs	r3, #1
 8007340:	4a2d      	ldr	r2, [pc, #180]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007342:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	b2db      	uxtb	r3, r3
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	b2db      	uxtb	r3, r3
 800734c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800734e:	78fb      	ldrb	r3, [r7, #3]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007356:	2b80      	cmp	r3, #128	@ 0x80
 8007358:	d0ef      	beq.n	800733a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800735a:	4b27      	ldr	r3, [pc, #156]	@ (80073f8 <xPortStartScheduler+0x138>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f1c3 0307 	rsb	r3, r3, #7
 8007362:	2b04      	cmp	r3, #4
 8007364:	d00b      	beq.n	800737e <xPortStartScheduler+0xbe>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	60bb      	str	r3, [r7, #8]
}
 8007378:	bf00      	nop
 800737a:	bf00      	nop
 800737c:	e7fd      	b.n	800737a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800737e:	4b1e      	ldr	r3, [pc, #120]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	021b      	lsls	r3, r3, #8
 8007384:	4a1c      	ldr	r2, [pc, #112]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007388:	4b1b      	ldr	r3, [pc, #108]	@ (80073f8 <xPortStartScheduler+0x138>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007390:	4a19      	ldr	r2, [pc, #100]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	b2da      	uxtb	r2, r3
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800739c:	4b17      	ldr	r3, [pc, #92]	@ (80073fc <xPortStartScheduler+0x13c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a16      	ldr	r2, [pc, #88]	@ (80073fc <xPortStartScheduler+0x13c>)
 80073a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80073a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073a8:	4b14      	ldr	r3, [pc, #80]	@ (80073fc <xPortStartScheduler+0x13c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a13      	ldr	r2, [pc, #76]	@ (80073fc <xPortStartScheduler+0x13c>)
 80073ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80073b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073b4:	f000 f8da 	bl	800756c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073b8:	4b11      	ldr	r3, [pc, #68]	@ (8007400 <xPortStartScheduler+0x140>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073be:	f000 f8f9 	bl	80075b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073c2:	4b10      	ldr	r3, [pc, #64]	@ (8007404 <xPortStartScheduler+0x144>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a0f      	ldr	r2, [pc, #60]	@ (8007404 <xPortStartScheduler+0x144>)
 80073c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80073cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073ce:	f7ff ff63 	bl	8007298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073d2:	f7ff f831 	bl	8006438 <vTaskSwitchContext>
	prvTaskExitError();
 80073d6:	f7ff ff1d 	bl	8007214 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	e000ed00 	.word	0xe000ed00
 80073e8:	410fc271 	.word	0x410fc271
 80073ec:	410fc270 	.word	0x410fc270
 80073f0:	e000e400 	.word	0xe000e400
 80073f4:	20001000 	.word	0x20001000
 80073f8:	20001004 	.word	0x20001004
 80073fc:	e000ed20 	.word	0xe000ed20
 8007400:	2000000c 	.word	0x2000000c
 8007404:	e000ef34 	.word	0xe000ef34

08007408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	607b      	str	r3, [r7, #4]
}
 8007420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007422:	4b10      	ldr	r3, [pc, #64]	@ (8007464 <vPortEnterCritical+0x5c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3301      	adds	r3, #1
 8007428:	4a0e      	ldr	r2, [pc, #56]	@ (8007464 <vPortEnterCritical+0x5c>)
 800742a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800742c:	4b0d      	ldr	r3, [pc, #52]	@ (8007464 <vPortEnterCritical+0x5c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d110      	bne.n	8007456 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007434:	4b0c      	ldr	r3, [pc, #48]	@ (8007468 <vPortEnterCritical+0x60>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00b      	beq.n	8007456 <vPortEnterCritical+0x4e>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	603b      	str	r3, [r7, #0]
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	e7fd      	b.n	8007452 <vPortEnterCritical+0x4a>
	}
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	2000000c 	.word	0x2000000c
 8007468:	e000ed04 	.word	0xe000ed04

0800746c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007472:	4b12      	ldr	r3, [pc, #72]	@ (80074bc <vPortExitCritical+0x50>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10b      	bne.n	8007492 <vPortExitCritical+0x26>
	__asm volatile
 800747a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	607b      	str	r3, [r7, #4]
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	e7fd      	b.n	800748e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007492:	4b0a      	ldr	r3, [pc, #40]	@ (80074bc <vPortExitCritical+0x50>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3b01      	subs	r3, #1
 8007498:	4a08      	ldr	r2, [pc, #32]	@ (80074bc <vPortExitCritical+0x50>)
 800749a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800749c:	4b07      	ldr	r3, [pc, #28]	@ (80074bc <vPortExitCritical+0x50>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d105      	bne.n	80074b0 <vPortExitCritical+0x44>
 80074a4:	2300      	movs	r3, #0
 80074a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	f383 8811 	msr	BASEPRI, r3
}
 80074ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	2000000c 	.word	0x2000000c

080074c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074c0:	f3ef 8009 	mrs	r0, PSP
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	4b15      	ldr	r3, [pc, #84]	@ (8007520 <pxCurrentTCBConst>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	f01e 0f10 	tst.w	lr, #16
 80074d0:	bf08      	it	eq
 80074d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074da:	6010      	str	r0, [r2, #0]
 80074dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80074e4:	f380 8811 	msr	BASEPRI, r0
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f7fe ffa2 	bl	8006438 <vTaskSwitchContext>
 80074f4:	f04f 0000 	mov.w	r0, #0
 80074f8:	f380 8811 	msr	BASEPRI, r0
 80074fc:	bc09      	pop	{r0, r3}
 80074fe:	6819      	ldr	r1, [r3, #0]
 8007500:	6808      	ldr	r0, [r1, #0]
 8007502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007506:	f01e 0f10 	tst.w	lr, #16
 800750a:	bf08      	it	eq
 800750c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007510:	f380 8809 	msr	PSP, r0
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	f3af 8000 	nop.w

08007520 <pxCurrentTCBConst>:
 8007520:	200009d4 	.word	0x200009d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop

08007528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	607b      	str	r3, [r7, #4]
}
 8007540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007542:	f7fe febf 	bl	80062c4 <xTaskIncrementTick>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800754c:	4b06      	ldr	r3, [pc, #24]	@ (8007568 <xPortSysTickHandler+0x40>)
 800754e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	2300      	movs	r3, #0
 8007556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	f383 8811 	msr	BASEPRI, r3
}
 800755e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007560:	bf00      	nop
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	e000ed04 	.word	0xe000ed04

0800756c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800756c:	b480      	push	{r7}
 800756e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007570:	4b0b      	ldr	r3, [pc, #44]	@ (80075a0 <vPortSetupTimerInterrupt+0x34>)
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007576:	4b0b      	ldr	r3, [pc, #44]	@ (80075a4 <vPortSetupTimerInterrupt+0x38>)
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800757c:	4b0a      	ldr	r3, [pc, #40]	@ (80075a8 <vPortSetupTimerInterrupt+0x3c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a0a      	ldr	r2, [pc, #40]	@ (80075ac <vPortSetupTimerInterrupt+0x40>)
 8007582:	fba2 2303 	umull	r2, r3, r2, r3
 8007586:	099b      	lsrs	r3, r3, #6
 8007588:	4a09      	ldr	r2, [pc, #36]	@ (80075b0 <vPortSetupTimerInterrupt+0x44>)
 800758a:	3b01      	subs	r3, #1
 800758c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800758e:	4b04      	ldr	r3, [pc, #16]	@ (80075a0 <vPortSetupTimerInterrupt+0x34>)
 8007590:	2207      	movs	r2, #7
 8007592:	601a      	str	r2, [r3, #0]
}
 8007594:	bf00      	nop
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	e000e010 	.word	0xe000e010
 80075a4:	e000e018 	.word	0xe000e018
 80075a8:	20000000 	.word	0x20000000
 80075ac:	10624dd3 	.word	0x10624dd3
 80075b0:	e000e014 	.word	0xe000e014

080075b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80075c4 <vPortEnableVFP+0x10>
 80075b8:	6801      	ldr	r1, [r0, #0]
 80075ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80075be:	6001      	str	r1, [r0, #0]
 80075c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075c2:	bf00      	nop
 80075c4:	e000ed88 	.word	0xe000ed88

080075c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075ce:	f3ef 8305 	mrs	r3, IPSR
 80075d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b0f      	cmp	r3, #15
 80075d8:	d915      	bls.n	8007606 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075da:	4a18      	ldr	r2, [pc, #96]	@ (800763c <vPortValidateInterruptPriority+0x74>)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4413      	add	r3, r2
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075e4:	4b16      	ldr	r3, [pc, #88]	@ (8007640 <vPortValidateInterruptPriority+0x78>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	7afa      	ldrb	r2, [r7, #11]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d20b      	bcs.n	8007606 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	607b      	str	r3, [r7, #4]
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	e7fd      	b.n	8007602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007606:	4b0f      	ldr	r3, [pc, #60]	@ (8007644 <vPortValidateInterruptPriority+0x7c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800760e:	4b0e      	ldr	r3, [pc, #56]	@ (8007648 <vPortValidateInterruptPriority+0x80>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	429a      	cmp	r2, r3
 8007614:	d90b      	bls.n	800762e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	603b      	str	r3, [r7, #0]
}
 8007628:	bf00      	nop
 800762a:	bf00      	nop
 800762c:	e7fd      	b.n	800762a <vPortValidateInterruptPriority+0x62>
	}
 800762e:	bf00      	nop
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	e000e3f0 	.word	0xe000e3f0
 8007640:	20001000 	.word	0x20001000
 8007644:	e000ed0c 	.word	0xe000ed0c
 8007648:	20001004 	.word	0x20001004

0800764c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	@ 0x28
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007654:	2300      	movs	r3, #0
 8007656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007658:	f7fe fd78 	bl	800614c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800765c:	4b5c      	ldr	r3, [pc, #368]	@ (80077d0 <pvPortMalloc+0x184>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007664:	f000 f924 	bl	80078b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007668:	4b5a      	ldr	r3, [pc, #360]	@ (80077d4 <pvPortMalloc+0x188>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4013      	ands	r3, r2
 8007670:	2b00      	cmp	r3, #0
 8007672:	f040 8095 	bne.w	80077a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01e      	beq.n	80076ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800767c:	2208      	movs	r2, #8
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4413      	add	r3, r2
 8007682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	2b00      	cmp	r3, #0
 800768c:	d015      	beq.n	80076ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f023 0307 	bic.w	r3, r3, #7
 8007694:	3308      	adds	r3, #8
 8007696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00b      	beq.n	80076ba <pvPortMalloc+0x6e>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	617b      	str	r3, [r7, #20]
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop
 80076b8:	e7fd      	b.n	80076b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d06f      	beq.n	80077a0 <pvPortMalloc+0x154>
 80076c0:	4b45      	ldr	r3, [pc, #276]	@ (80077d8 <pvPortMalloc+0x18c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d86a      	bhi.n	80077a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076ca:	4b44      	ldr	r3, [pc, #272]	@ (80077dc <pvPortMalloc+0x190>)
 80076cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076ce:	4b43      	ldr	r3, [pc, #268]	@ (80077dc <pvPortMalloc+0x190>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076d4:	e004      	b.n	80076e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80076d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d903      	bls.n	80076f2 <pvPortMalloc+0xa6>
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1f1      	bne.n	80076d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80076f2:	4b37      	ldr	r3, [pc, #220]	@ (80077d0 <pvPortMalloc+0x184>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d051      	beq.n	80077a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2208      	movs	r2, #8
 8007702:	4413      	add	r3, r2
 8007704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	1ad2      	subs	r2, r2, r3
 8007716:	2308      	movs	r3, #8
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	429a      	cmp	r2, r3
 800771c:	d920      	bls.n	8007760 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800771e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4413      	add	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	f003 0307 	and.w	r3, r3, #7
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00b      	beq.n	8007748 <pvPortMalloc+0xfc>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	613b      	str	r3, [r7, #16]
}
 8007742:	bf00      	nop
 8007744:	bf00      	nop
 8007746:	e7fd      	b.n	8007744 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	1ad2      	subs	r2, r2, r3
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800775a:	69b8      	ldr	r0, [r7, #24]
 800775c:	f000 f90a 	bl	8007974 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007760:	4b1d      	ldr	r3, [pc, #116]	@ (80077d8 <pvPortMalloc+0x18c>)
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	4a1b      	ldr	r2, [pc, #108]	@ (80077d8 <pvPortMalloc+0x18c>)
 800776c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800776e:	4b1a      	ldr	r3, [pc, #104]	@ (80077d8 <pvPortMalloc+0x18c>)
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	4b1b      	ldr	r3, [pc, #108]	@ (80077e0 <pvPortMalloc+0x194>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d203      	bcs.n	8007782 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800777a:	4b17      	ldr	r3, [pc, #92]	@ (80077d8 <pvPortMalloc+0x18c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a18      	ldr	r2, [pc, #96]	@ (80077e0 <pvPortMalloc+0x194>)
 8007780:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	4b13      	ldr	r3, [pc, #76]	@ (80077d4 <pvPortMalloc+0x188>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	431a      	orrs	r2, r3
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007796:	4b13      	ldr	r3, [pc, #76]	@ (80077e4 <pvPortMalloc+0x198>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3301      	adds	r3, #1
 800779c:	4a11      	ldr	r2, [pc, #68]	@ (80077e4 <pvPortMalloc+0x198>)
 800779e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077a0:	f7fe fce2 	bl	8006168 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00b      	beq.n	80077c6 <pvPortMalloc+0x17a>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	60fb      	str	r3, [r7, #12]
}
 80077c0:	bf00      	nop
 80077c2:	bf00      	nop
 80077c4:	e7fd      	b.n	80077c2 <pvPortMalloc+0x176>
	return pvReturn;
 80077c6:	69fb      	ldr	r3, [r7, #28]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3728      	adds	r7, #40	@ 0x28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	20001bc8 	.word	0x20001bc8
 80077d4:	20001bdc 	.word	0x20001bdc
 80077d8:	20001bcc 	.word	0x20001bcc
 80077dc:	20001bc0 	.word	0x20001bc0
 80077e0:	20001bd0 	.word	0x20001bd0
 80077e4:	20001bd4 	.word	0x20001bd4

080077e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d04f      	beq.n	800789a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077fa:	2308      	movs	r3, #8
 80077fc:	425b      	negs	r3, r3
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4413      	add	r3, r2
 8007802:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	4b25      	ldr	r3, [pc, #148]	@ (80078a4 <vPortFree+0xbc>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4013      	ands	r3, r2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10b      	bne.n	800782e <vPortFree+0x46>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	60fb      	str	r3, [r7, #12]
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	e7fd      	b.n	800782a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00b      	beq.n	800784e <vPortFree+0x66>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	60bb      	str	r3, [r7, #8]
}
 8007848:	bf00      	nop
 800784a:	bf00      	nop
 800784c:	e7fd      	b.n	800784a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	4b14      	ldr	r3, [pc, #80]	@ (80078a4 <vPortFree+0xbc>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4013      	ands	r3, r2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d01e      	beq.n	800789a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d11a      	bne.n	800789a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	4b0e      	ldr	r3, [pc, #56]	@ (80078a4 <vPortFree+0xbc>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	43db      	mvns	r3, r3
 800786e:	401a      	ands	r2, r3
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007874:	f7fe fc6a 	bl	800614c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	4b0a      	ldr	r3, [pc, #40]	@ (80078a8 <vPortFree+0xc0>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4413      	add	r3, r2
 8007882:	4a09      	ldr	r2, [pc, #36]	@ (80078a8 <vPortFree+0xc0>)
 8007884:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007886:	6938      	ldr	r0, [r7, #16]
 8007888:	f000 f874 	bl	8007974 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800788c:	4b07      	ldr	r3, [pc, #28]	@ (80078ac <vPortFree+0xc4>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3301      	adds	r3, #1
 8007892:	4a06      	ldr	r2, [pc, #24]	@ (80078ac <vPortFree+0xc4>)
 8007894:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007896:	f7fe fc67 	bl	8006168 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800789a:	bf00      	nop
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20001bdc 	.word	0x20001bdc
 80078a8:	20001bcc 	.word	0x20001bcc
 80078ac:	20001bd8 	.word	0x20001bd8

080078b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078b6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80078ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078bc:	4b27      	ldr	r3, [pc, #156]	@ (800795c <prvHeapInit+0xac>)
 80078be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00c      	beq.n	80078e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3307      	adds	r3, #7
 80078ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0307 	bic.w	r3, r3, #7
 80078d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	4a1f      	ldr	r2, [pc, #124]	@ (800795c <prvHeapInit+0xac>)
 80078e0:	4413      	add	r3, r2
 80078e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007960 <prvHeapInit+0xb0>)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007960 <prvHeapInit+0xb0>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	4413      	add	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078fc:	2208      	movs	r2, #8
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	1a9b      	subs	r3, r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0307 	bic.w	r3, r3, #7
 800790a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4a15      	ldr	r2, [pc, #84]	@ (8007964 <prvHeapInit+0xb4>)
 8007910:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007912:	4b14      	ldr	r3, [pc, #80]	@ (8007964 <prvHeapInit+0xb4>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2200      	movs	r2, #0
 8007918:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800791a:	4b12      	ldr	r3, [pc, #72]	@ (8007964 <prvHeapInit+0xb4>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	1ad2      	subs	r2, r2, r3
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007930:	4b0c      	ldr	r3, [pc, #48]	@ (8007964 <prvHeapInit+0xb4>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	4a0a      	ldr	r2, [pc, #40]	@ (8007968 <prvHeapInit+0xb8>)
 800793e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	4a09      	ldr	r2, [pc, #36]	@ (800796c <prvHeapInit+0xbc>)
 8007946:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007948:	4b09      	ldr	r3, [pc, #36]	@ (8007970 <prvHeapInit+0xc0>)
 800794a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800794e:	601a      	str	r2, [r3, #0]
}
 8007950:	bf00      	nop
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	20001008 	.word	0x20001008
 8007960:	20001bc0 	.word	0x20001bc0
 8007964:	20001bc8 	.word	0x20001bc8
 8007968:	20001bd0 	.word	0x20001bd0
 800796c:	20001bcc 	.word	0x20001bcc
 8007970:	20001bdc 	.word	0x20001bdc

08007974 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800797c:	4b28      	ldr	r3, [pc, #160]	@ (8007a20 <prvInsertBlockIntoFreeList+0xac>)
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	e002      	b.n	8007988 <prvInsertBlockIntoFreeList+0x14>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	429a      	cmp	r2, r3
 8007990:	d8f7      	bhi.n	8007982 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	4413      	add	r3, r2
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d108      	bne.n	80079b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	441a      	add	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	441a      	add	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d118      	bne.n	80079fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	4b15      	ldr	r3, [pc, #84]	@ (8007a24 <prvInsertBlockIntoFreeList+0xb0>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d00d      	beq.n	80079f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	441a      	add	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	e008      	b.n	8007a04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007a24 <prvInsertBlockIntoFreeList+0xb0>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	e003      	b.n	8007a04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d002      	beq.n	8007a12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a12:	bf00      	nop
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	20001bc0 	.word	0x20001bc0
 8007a24:	20001bc8 	.word	0x20001bc8

08007a28 <siprintf>:
 8007a28:	b40e      	push	{r1, r2, r3}
 8007a2a:	b500      	push	{lr}
 8007a2c:	b09c      	sub	sp, #112	@ 0x70
 8007a2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007a30:	9002      	str	r0, [sp, #8]
 8007a32:	9006      	str	r0, [sp, #24]
 8007a34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a38:	4809      	ldr	r0, [pc, #36]	@ (8007a60 <siprintf+0x38>)
 8007a3a:	9107      	str	r1, [sp, #28]
 8007a3c:	9104      	str	r1, [sp, #16]
 8007a3e:	4909      	ldr	r1, [pc, #36]	@ (8007a64 <siprintf+0x3c>)
 8007a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a44:	9105      	str	r1, [sp, #20]
 8007a46:	6800      	ldr	r0, [r0, #0]
 8007a48:	9301      	str	r3, [sp, #4]
 8007a4a:	a902      	add	r1, sp, #8
 8007a4c:	f000 f9f8 	bl	8007e40 <_svfiprintf_r>
 8007a50:	9b02      	ldr	r3, [sp, #8]
 8007a52:	2200      	movs	r2, #0
 8007a54:	701a      	strb	r2, [r3, #0]
 8007a56:	b01c      	add	sp, #112	@ 0x70
 8007a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a5c:	b003      	add	sp, #12
 8007a5e:	4770      	bx	lr
 8007a60:	20000010 	.word	0x20000010
 8007a64:	ffff0208 	.word	0xffff0208

08007a68 <memset>:
 8007a68:	4402      	add	r2, r0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d100      	bne.n	8007a72 <memset+0xa>
 8007a70:	4770      	bx	lr
 8007a72:	f803 1b01 	strb.w	r1, [r3], #1
 8007a76:	e7f9      	b.n	8007a6c <memset+0x4>

08007a78 <_reclaim_reent>:
 8007a78:	4b29      	ldr	r3, [pc, #164]	@ (8007b20 <_reclaim_reent+0xa8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4283      	cmp	r3, r0
 8007a7e:	b570      	push	{r4, r5, r6, lr}
 8007a80:	4604      	mov	r4, r0
 8007a82:	d04b      	beq.n	8007b1c <_reclaim_reent+0xa4>
 8007a84:	69c3      	ldr	r3, [r0, #28]
 8007a86:	b1ab      	cbz	r3, 8007ab4 <_reclaim_reent+0x3c>
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	b16b      	cbz	r3, 8007aa8 <_reclaim_reent+0x30>
 8007a8c:	2500      	movs	r5, #0
 8007a8e:	69e3      	ldr	r3, [r4, #28]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	5959      	ldr	r1, [r3, r5]
 8007a94:	2900      	cmp	r1, #0
 8007a96:	d13b      	bne.n	8007b10 <_reclaim_reent+0x98>
 8007a98:	3504      	adds	r5, #4
 8007a9a:	2d80      	cmp	r5, #128	@ 0x80
 8007a9c:	d1f7      	bne.n	8007a8e <_reclaim_reent+0x16>
 8007a9e:	69e3      	ldr	r3, [r4, #28]
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	68d9      	ldr	r1, [r3, #12]
 8007aa4:	f000 f878 	bl	8007b98 <_free_r>
 8007aa8:	69e3      	ldr	r3, [r4, #28]
 8007aaa:	6819      	ldr	r1, [r3, #0]
 8007aac:	b111      	cbz	r1, 8007ab4 <_reclaim_reent+0x3c>
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f000 f872 	bl	8007b98 <_free_r>
 8007ab4:	6961      	ldr	r1, [r4, #20]
 8007ab6:	b111      	cbz	r1, 8007abe <_reclaim_reent+0x46>
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f000 f86d 	bl	8007b98 <_free_r>
 8007abe:	69e1      	ldr	r1, [r4, #28]
 8007ac0:	b111      	cbz	r1, 8007ac8 <_reclaim_reent+0x50>
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f000 f868 	bl	8007b98 <_free_r>
 8007ac8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007aca:	b111      	cbz	r1, 8007ad2 <_reclaim_reent+0x5a>
 8007acc:	4620      	mov	r0, r4
 8007ace:	f000 f863 	bl	8007b98 <_free_r>
 8007ad2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ad4:	b111      	cbz	r1, 8007adc <_reclaim_reent+0x64>
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f000 f85e 	bl	8007b98 <_free_r>
 8007adc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007ade:	b111      	cbz	r1, 8007ae6 <_reclaim_reent+0x6e>
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f000 f859 	bl	8007b98 <_free_r>
 8007ae6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007ae8:	b111      	cbz	r1, 8007af0 <_reclaim_reent+0x78>
 8007aea:	4620      	mov	r0, r4
 8007aec:	f000 f854 	bl	8007b98 <_free_r>
 8007af0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007af2:	b111      	cbz	r1, 8007afa <_reclaim_reent+0x82>
 8007af4:	4620      	mov	r0, r4
 8007af6:	f000 f84f 	bl	8007b98 <_free_r>
 8007afa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007afc:	b111      	cbz	r1, 8007b04 <_reclaim_reent+0x8c>
 8007afe:	4620      	mov	r0, r4
 8007b00:	f000 f84a 	bl	8007b98 <_free_r>
 8007b04:	6a23      	ldr	r3, [r4, #32]
 8007b06:	b14b      	cbz	r3, 8007b1c <_reclaim_reent+0xa4>
 8007b08:	4620      	mov	r0, r4
 8007b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b0e:	4718      	bx	r3
 8007b10:	680e      	ldr	r6, [r1, #0]
 8007b12:	4620      	mov	r0, r4
 8007b14:	f000 f840 	bl	8007b98 <_free_r>
 8007b18:	4631      	mov	r1, r6
 8007b1a:	e7bb      	b.n	8007a94 <_reclaim_reent+0x1c>
 8007b1c:	bd70      	pop	{r4, r5, r6, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000010 	.word	0x20000010

08007b24 <__errno>:
 8007b24:	4b01      	ldr	r3, [pc, #4]	@ (8007b2c <__errno+0x8>)
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	20000010 	.word	0x20000010

08007b30 <__libc_init_array>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	4d0d      	ldr	r5, [pc, #52]	@ (8007b68 <__libc_init_array+0x38>)
 8007b34:	4c0d      	ldr	r4, [pc, #52]	@ (8007b6c <__libc_init_array+0x3c>)
 8007b36:	1b64      	subs	r4, r4, r5
 8007b38:	10a4      	asrs	r4, r4, #2
 8007b3a:	2600      	movs	r6, #0
 8007b3c:	42a6      	cmp	r6, r4
 8007b3e:	d109      	bne.n	8007b54 <__libc_init_array+0x24>
 8007b40:	4d0b      	ldr	r5, [pc, #44]	@ (8007b70 <__libc_init_array+0x40>)
 8007b42:	4c0c      	ldr	r4, [pc, #48]	@ (8007b74 <__libc_init_array+0x44>)
 8007b44:	f000 fc66 	bl	8008414 <_init>
 8007b48:	1b64      	subs	r4, r4, r5
 8007b4a:	10a4      	asrs	r4, r4, #2
 8007b4c:	2600      	movs	r6, #0
 8007b4e:	42a6      	cmp	r6, r4
 8007b50:	d105      	bne.n	8007b5e <__libc_init_array+0x2e>
 8007b52:	bd70      	pop	{r4, r5, r6, pc}
 8007b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b58:	4798      	blx	r3
 8007b5a:	3601      	adds	r6, #1
 8007b5c:	e7ee      	b.n	8007b3c <__libc_init_array+0xc>
 8007b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b62:	4798      	blx	r3
 8007b64:	3601      	adds	r6, #1
 8007b66:	e7f2      	b.n	8007b4e <__libc_init_array+0x1e>
 8007b68:	0800855c 	.word	0x0800855c
 8007b6c:	0800855c 	.word	0x0800855c
 8007b70:	0800855c 	.word	0x0800855c
 8007b74:	08008560 	.word	0x08008560

08007b78 <__retarget_lock_acquire_recursive>:
 8007b78:	4770      	bx	lr

08007b7a <__retarget_lock_release_recursive>:
 8007b7a:	4770      	bx	lr

08007b7c <memcpy>:
 8007b7c:	440a      	add	r2, r1
 8007b7e:	4291      	cmp	r1, r2
 8007b80:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b84:	d100      	bne.n	8007b88 <memcpy+0xc>
 8007b86:	4770      	bx	lr
 8007b88:	b510      	push	{r4, lr}
 8007b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b92:	4291      	cmp	r1, r2
 8007b94:	d1f9      	bne.n	8007b8a <memcpy+0xe>
 8007b96:	bd10      	pop	{r4, pc}

08007b98 <_free_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	2900      	cmp	r1, #0
 8007b9e:	d041      	beq.n	8007c24 <_free_r+0x8c>
 8007ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ba4:	1f0c      	subs	r4, r1, #4
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bfb8      	it	lt
 8007baa:	18e4      	addlt	r4, r4, r3
 8007bac:	f000 f8e0 	bl	8007d70 <__malloc_lock>
 8007bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8007c28 <_free_r+0x90>)
 8007bb2:	6813      	ldr	r3, [r2, #0]
 8007bb4:	b933      	cbnz	r3, 8007bc4 <_free_r+0x2c>
 8007bb6:	6063      	str	r3, [r4, #4]
 8007bb8:	6014      	str	r4, [r2, #0]
 8007bba:	4628      	mov	r0, r5
 8007bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bc0:	f000 b8dc 	b.w	8007d7c <__malloc_unlock>
 8007bc4:	42a3      	cmp	r3, r4
 8007bc6:	d908      	bls.n	8007bda <_free_r+0x42>
 8007bc8:	6820      	ldr	r0, [r4, #0]
 8007bca:	1821      	adds	r1, r4, r0
 8007bcc:	428b      	cmp	r3, r1
 8007bce:	bf01      	itttt	eq
 8007bd0:	6819      	ldreq	r1, [r3, #0]
 8007bd2:	685b      	ldreq	r3, [r3, #4]
 8007bd4:	1809      	addeq	r1, r1, r0
 8007bd6:	6021      	streq	r1, [r4, #0]
 8007bd8:	e7ed      	b.n	8007bb6 <_free_r+0x1e>
 8007bda:	461a      	mov	r2, r3
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	b10b      	cbz	r3, 8007be4 <_free_r+0x4c>
 8007be0:	42a3      	cmp	r3, r4
 8007be2:	d9fa      	bls.n	8007bda <_free_r+0x42>
 8007be4:	6811      	ldr	r1, [r2, #0]
 8007be6:	1850      	adds	r0, r2, r1
 8007be8:	42a0      	cmp	r0, r4
 8007bea:	d10b      	bne.n	8007c04 <_free_r+0x6c>
 8007bec:	6820      	ldr	r0, [r4, #0]
 8007bee:	4401      	add	r1, r0
 8007bf0:	1850      	adds	r0, r2, r1
 8007bf2:	4283      	cmp	r3, r0
 8007bf4:	6011      	str	r1, [r2, #0]
 8007bf6:	d1e0      	bne.n	8007bba <_free_r+0x22>
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	6053      	str	r3, [r2, #4]
 8007bfe:	4408      	add	r0, r1
 8007c00:	6010      	str	r0, [r2, #0]
 8007c02:	e7da      	b.n	8007bba <_free_r+0x22>
 8007c04:	d902      	bls.n	8007c0c <_free_r+0x74>
 8007c06:	230c      	movs	r3, #12
 8007c08:	602b      	str	r3, [r5, #0]
 8007c0a:	e7d6      	b.n	8007bba <_free_r+0x22>
 8007c0c:	6820      	ldr	r0, [r4, #0]
 8007c0e:	1821      	adds	r1, r4, r0
 8007c10:	428b      	cmp	r3, r1
 8007c12:	bf04      	itt	eq
 8007c14:	6819      	ldreq	r1, [r3, #0]
 8007c16:	685b      	ldreq	r3, [r3, #4]
 8007c18:	6063      	str	r3, [r4, #4]
 8007c1a:	bf04      	itt	eq
 8007c1c:	1809      	addeq	r1, r1, r0
 8007c1e:	6021      	streq	r1, [r4, #0]
 8007c20:	6054      	str	r4, [r2, #4]
 8007c22:	e7ca      	b.n	8007bba <_free_r+0x22>
 8007c24:	bd38      	pop	{r3, r4, r5, pc}
 8007c26:	bf00      	nop
 8007c28:	20001d24 	.word	0x20001d24

08007c2c <sbrk_aligned>:
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8007c6c <sbrk_aligned+0x40>)
 8007c30:	460c      	mov	r4, r1
 8007c32:	6831      	ldr	r1, [r6, #0]
 8007c34:	4605      	mov	r5, r0
 8007c36:	b911      	cbnz	r1, 8007c3e <sbrk_aligned+0x12>
 8007c38:	f000 fba6 	bl	8008388 <_sbrk_r>
 8007c3c:	6030      	str	r0, [r6, #0]
 8007c3e:	4621      	mov	r1, r4
 8007c40:	4628      	mov	r0, r5
 8007c42:	f000 fba1 	bl	8008388 <_sbrk_r>
 8007c46:	1c43      	adds	r3, r0, #1
 8007c48:	d103      	bne.n	8007c52 <sbrk_aligned+0x26>
 8007c4a:	f04f 34ff 	mov.w	r4, #4294967295
 8007c4e:	4620      	mov	r0, r4
 8007c50:	bd70      	pop	{r4, r5, r6, pc}
 8007c52:	1cc4      	adds	r4, r0, #3
 8007c54:	f024 0403 	bic.w	r4, r4, #3
 8007c58:	42a0      	cmp	r0, r4
 8007c5a:	d0f8      	beq.n	8007c4e <sbrk_aligned+0x22>
 8007c5c:	1a21      	subs	r1, r4, r0
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f000 fb92 	bl	8008388 <_sbrk_r>
 8007c64:	3001      	adds	r0, #1
 8007c66:	d1f2      	bne.n	8007c4e <sbrk_aligned+0x22>
 8007c68:	e7ef      	b.n	8007c4a <sbrk_aligned+0x1e>
 8007c6a:	bf00      	nop
 8007c6c:	20001d20 	.word	0x20001d20

08007c70 <_malloc_r>:
 8007c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c74:	1ccd      	adds	r5, r1, #3
 8007c76:	f025 0503 	bic.w	r5, r5, #3
 8007c7a:	3508      	adds	r5, #8
 8007c7c:	2d0c      	cmp	r5, #12
 8007c7e:	bf38      	it	cc
 8007c80:	250c      	movcc	r5, #12
 8007c82:	2d00      	cmp	r5, #0
 8007c84:	4606      	mov	r6, r0
 8007c86:	db01      	blt.n	8007c8c <_malloc_r+0x1c>
 8007c88:	42a9      	cmp	r1, r5
 8007c8a:	d904      	bls.n	8007c96 <_malloc_r+0x26>
 8007c8c:	230c      	movs	r3, #12
 8007c8e:	6033      	str	r3, [r6, #0]
 8007c90:	2000      	movs	r0, #0
 8007c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d6c <_malloc_r+0xfc>
 8007c9a:	f000 f869 	bl	8007d70 <__malloc_lock>
 8007c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8007ca2:	461c      	mov	r4, r3
 8007ca4:	bb44      	cbnz	r4, 8007cf8 <_malloc_r+0x88>
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f7ff ffbf 	bl	8007c2c <sbrk_aligned>
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	d158      	bne.n	8007d66 <_malloc_r+0xf6>
 8007cb4:	f8d8 4000 	ldr.w	r4, [r8]
 8007cb8:	4627      	mov	r7, r4
 8007cba:	2f00      	cmp	r7, #0
 8007cbc:	d143      	bne.n	8007d46 <_malloc_r+0xd6>
 8007cbe:	2c00      	cmp	r4, #0
 8007cc0:	d04b      	beq.n	8007d5a <_malloc_r+0xea>
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	eb04 0903 	add.w	r9, r4, r3
 8007ccc:	f000 fb5c 	bl	8008388 <_sbrk_r>
 8007cd0:	4581      	cmp	r9, r0
 8007cd2:	d142      	bne.n	8007d5a <_malloc_r+0xea>
 8007cd4:	6821      	ldr	r1, [r4, #0]
 8007cd6:	1a6d      	subs	r5, r5, r1
 8007cd8:	4629      	mov	r1, r5
 8007cda:	4630      	mov	r0, r6
 8007cdc:	f7ff ffa6 	bl	8007c2c <sbrk_aligned>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d03a      	beq.n	8007d5a <_malloc_r+0xea>
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	442b      	add	r3, r5
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	f8d8 3000 	ldr.w	r3, [r8]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	bb62      	cbnz	r2, 8007d4c <_malloc_r+0xdc>
 8007cf2:	f8c8 7000 	str.w	r7, [r8]
 8007cf6:	e00f      	b.n	8007d18 <_malloc_r+0xa8>
 8007cf8:	6822      	ldr	r2, [r4, #0]
 8007cfa:	1b52      	subs	r2, r2, r5
 8007cfc:	d420      	bmi.n	8007d40 <_malloc_r+0xd0>
 8007cfe:	2a0b      	cmp	r2, #11
 8007d00:	d917      	bls.n	8007d32 <_malloc_r+0xc2>
 8007d02:	1961      	adds	r1, r4, r5
 8007d04:	42a3      	cmp	r3, r4
 8007d06:	6025      	str	r5, [r4, #0]
 8007d08:	bf18      	it	ne
 8007d0a:	6059      	strne	r1, [r3, #4]
 8007d0c:	6863      	ldr	r3, [r4, #4]
 8007d0e:	bf08      	it	eq
 8007d10:	f8c8 1000 	streq.w	r1, [r8]
 8007d14:	5162      	str	r2, [r4, r5]
 8007d16:	604b      	str	r3, [r1, #4]
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f000 f82f 	bl	8007d7c <__malloc_unlock>
 8007d1e:	f104 000b 	add.w	r0, r4, #11
 8007d22:	1d23      	adds	r3, r4, #4
 8007d24:	f020 0007 	bic.w	r0, r0, #7
 8007d28:	1ac2      	subs	r2, r0, r3
 8007d2a:	bf1c      	itt	ne
 8007d2c:	1a1b      	subne	r3, r3, r0
 8007d2e:	50a3      	strne	r3, [r4, r2]
 8007d30:	e7af      	b.n	8007c92 <_malloc_r+0x22>
 8007d32:	6862      	ldr	r2, [r4, #4]
 8007d34:	42a3      	cmp	r3, r4
 8007d36:	bf0c      	ite	eq
 8007d38:	f8c8 2000 	streq.w	r2, [r8]
 8007d3c:	605a      	strne	r2, [r3, #4]
 8007d3e:	e7eb      	b.n	8007d18 <_malloc_r+0xa8>
 8007d40:	4623      	mov	r3, r4
 8007d42:	6864      	ldr	r4, [r4, #4]
 8007d44:	e7ae      	b.n	8007ca4 <_malloc_r+0x34>
 8007d46:	463c      	mov	r4, r7
 8007d48:	687f      	ldr	r7, [r7, #4]
 8007d4a:	e7b6      	b.n	8007cba <_malloc_r+0x4a>
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	42a3      	cmp	r3, r4
 8007d52:	d1fb      	bne.n	8007d4c <_malloc_r+0xdc>
 8007d54:	2300      	movs	r3, #0
 8007d56:	6053      	str	r3, [r2, #4]
 8007d58:	e7de      	b.n	8007d18 <_malloc_r+0xa8>
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	6033      	str	r3, [r6, #0]
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f000 f80c 	bl	8007d7c <__malloc_unlock>
 8007d64:	e794      	b.n	8007c90 <_malloc_r+0x20>
 8007d66:	6005      	str	r5, [r0, #0]
 8007d68:	e7d6      	b.n	8007d18 <_malloc_r+0xa8>
 8007d6a:	bf00      	nop
 8007d6c:	20001d24 	.word	0x20001d24

08007d70 <__malloc_lock>:
 8007d70:	4801      	ldr	r0, [pc, #4]	@ (8007d78 <__malloc_lock+0x8>)
 8007d72:	f7ff bf01 	b.w	8007b78 <__retarget_lock_acquire_recursive>
 8007d76:	bf00      	nop
 8007d78:	20001d1c 	.word	0x20001d1c

08007d7c <__malloc_unlock>:
 8007d7c:	4801      	ldr	r0, [pc, #4]	@ (8007d84 <__malloc_unlock+0x8>)
 8007d7e:	f7ff befc 	b.w	8007b7a <__retarget_lock_release_recursive>
 8007d82:	bf00      	nop
 8007d84:	20001d1c 	.word	0x20001d1c

08007d88 <__ssputs_r>:
 8007d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d8c:	688e      	ldr	r6, [r1, #8]
 8007d8e:	461f      	mov	r7, r3
 8007d90:	42be      	cmp	r6, r7
 8007d92:	680b      	ldr	r3, [r1, #0]
 8007d94:	4682      	mov	sl, r0
 8007d96:	460c      	mov	r4, r1
 8007d98:	4690      	mov	r8, r2
 8007d9a:	d82d      	bhi.n	8007df8 <__ssputs_r+0x70>
 8007d9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007da0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007da4:	d026      	beq.n	8007df4 <__ssputs_r+0x6c>
 8007da6:	6965      	ldr	r5, [r4, #20]
 8007da8:	6909      	ldr	r1, [r1, #16]
 8007daa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dae:	eba3 0901 	sub.w	r9, r3, r1
 8007db2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007db6:	1c7b      	adds	r3, r7, #1
 8007db8:	444b      	add	r3, r9
 8007dba:	106d      	asrs	r5, r5, #1
 8007dbc:	429d      	cmp	r5, r3
 8007dbe:	bf38      	it	cc
 8007dc0:	461d      	movcc	r5, r3
 8007dc2:	0553      	lsls	r3, r2, #21
 8007dc4:	d527      	bpl.n	8007e16 <__ssputs_r+0x8e>
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7ff ff52 	bl	8007c70 <_malloc_r>
 8007dcc:	4606      	mov	r6, r0
 8007dce:	b360      	cbz	r0, 8007e2a <__ssputs_r+0xa2>
 8007dd0:	6921      	ldr	r1, [r4, #16]
 8007dd2:	464a      	mov	r2, r9
 8007dd4:	f7ff fed2 	bl	8007b7c <memcpy>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007de2:	81a3      	strh	r3, [r4, #12]
 8007de4:	6126      	str	r6, [r4, #16]
 8007de6:	6165      	str	r5, [r4, #20]
 8007de8:	444e      	add	r6, r9
 8007dea:	eba5 0509 	sub.w	r5, r5, r9
 8007dee:	6026      	str	r6, [r4, #0]
 8007df0:	60a5      	str	r5, [r4, #8]
 8007df2:	463e      	mov	r6, r7
 8007df4:	42be      	cmp	r6, r7
 8007df6:	d900      	bls.n	8007dfa <__ssputs_r+0x72>
 8007df8:	463e      	mov	r6, r7
 8007dfa:	6820      	ldr	r0, [r4, #0]
 8007dfc:	4632      	mov	r2, r6
 8007dfe:	4641      	mov	r1, r8
 8007e00:	f000 faa8 	bl	8008354 <memmove>
 8007e04:	68a3      	ldr	r3, [r4, #8]
 8007e06:	1b9b      	subs	r3, r3, r6
 8007e08:	60a3      	str	r3, [r4, #8]
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	4433      	add	r3, r6
 8007e0e:	6023      	str	r3, [r4, #0]
 8007e10:	2000      	movs	r0, #0
 8007e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e16:	462a      	mov	r2, r5
 8007e18:	f000 fac6 	bl	80083a8 <_realloc_r>
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d1e0      	bne.n	8007de4 <__ssputs_r+0x5c>
 8007e22:	6921      	ldr	r1, [r4, #16]
 8007e24:	4650      	mov	r0, sl
 8007e26:	f7ff feb7 	bl	8007b98 <_free_r>
 8007e2a:	230c      	movs	r3, #12
 8007e2c:	f8ca 3000 	str.w	r3, [sl]
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e36:	81a3      	strh	r3, [r4, #12]
 8007e38:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3c:	e7e9      	b.n	8007e12 <__ssputs_r+0x8a>
	...

08007e40 <_svfiprintf_r>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	4698      	mov	r8, r3
 8007e46:	898b      	ldrh	r3, [r1, #12]
 8007e48:	061b      	lsls	r3, r3, #24
 8007e4a:	b09d      	sub	sp, #116	@ 0x74
 8007e4c:	4607      	mov	r7, r0
 8007e4e:	460d      	mov	r5, r1
 8007e50:	4614      	mov	r4, r2
 8007e52:	d510      	bpl.n	8007e76 <_svfiprintf_r+0x36>
 8007e54:	690b      	ldr	r3, [r1, #16]
 8007e56:	b973      	cbnz	r3, 8007e76 <_svfiprintf_r+0x36>
 8007e58:	2140      	movs	r1, #64	@ 0x40
 8007e5a:	f7ff ff09 	bl	8007c70 <_malloc_r>
 8007e5e:	6028      	str	r0, [r5, #0]
 8007e60:	6128      	str	r0, [r5, #16]
 8007e62:	b930      	cbnz	r0, 8007e72 <_svfiprintf_r+0x32>
 8007e64:	230c      	movs	r3, #12
 8007e66:	603b      	str	r3, [r7, #0]
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6c:	b01d      	add	sp, #116	@ 0x74
 8007e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e72:	2340      	movs	r3, #64	@ 0x40
 8007e74:	616b      	str	r3, [r5, #20]
 8007e76:	2300      	movs	r3, #0
 8007e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e7a:	2320      	movs	r3, #32
 8007e7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e80:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e84:	2330      	movs	r3, #48	@ 0x30
 8007e86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008024 <_svfiprintf_r+0x1e4>
 8007e8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e8e:	f04f 0901 	mov.w	r9, #1
 8007e92:	4623      	mov	r3, r4
 8007e94:	469a      	mov	sl, r3
 8007e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e9a:	b10a      	cbz	r2, 8007ea0 <_svfiprintf_r+0x60>
 8007e9c:	2a25      	cmp	r2, #37	@ 0x25
 8007e9e:	d1f9      	bne.n	8007e94 <_svfiprintf_r+0x54>
 8007ea0:	ebba 0b04 	subs.w	fp, sl, r4
 8007ea4:	d00b      	beq.n	8007ebe <_svfiprintf_r+0x7e>
 8007ea6:	465b      	mov	r3, fp
 8007ea8:	4622      	mov	r2, r4
 8007eaa:	4629      	mov	r1, r5
 8007eac:	4638      	mov	r0, r7
 8007eae:	f7ff ff6b 	bl	8007d88 <__ssputs_r>
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	f000 80a7 	beq.w	8008006 <_svfiprintf_r+0x1c6>
 8007eb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eba:	445a      	add	r2, fp
 8007ebc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 809f 	beq.w	8008006 <_svfiprintf_r+0x1c6>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f04f 32ff 	mov.w	r2, #4294967295
 8007ece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ed2:	f10a 0a01 	add.w	sl, sl, #1
 8007ed6:	9304      	str	r3, [sp, #16]
 8007ed8:	9307      	str	r3, [sp, #28]
 8007eda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ede:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ee0:	4654      	mov	r4, sl
 8007ee2:	2205      	movs	r2, #5
 8007ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee8:	484e      	ldr	r0, [pc, #312]	@ (8008024 <_svfiprintf_r+0x1e4>)
 8007eea:	f7f8 f971 	bl	80001d0 <memchr>
 8007eee:	9a04      	ldr	r2, [sp, #16]
 8007ef0:	b9d8      	cbnz	r0, 8007f2a <_svfiprintf_r+0xea>
 8007ef2:	06d0      	lsls	r0, r2, #27
 8007ef4:	bf44      	itt	mi
 8007ef6:	2320      	movmi	r3, #32
 8007ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007efc:	0711      	lsls	r1, r2, #28
 8007efe:	bf44      	itt	mi
 8007f00:	232b      	movmi	r3, #43	@ 0x2b
 8007f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f06:	f89a 3000 	ldrb.w	r3, [sl]
 8007f0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f0c:	d015      	beq.n	8007f3a <_svfiprintf_r+0xfa>
 8007f0e:	9a07      	ldr	r2, [sp, #28]
 8007f10:	4654      	mov	r4, sl
 8007f12:	2000      	movs	r0, #0
 8007f14:	f04f 0c0a 	mov.w	ip, #10
 8007f18:	4621      	mov	r1, r4
 8007f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f1e:	3b30      	subs	r3, #48	@ 0x30
 8007f20:	2b09      	cmp	r3, #9
 8007f22:	d94b      	bls.n	8007fbc <_svfiprintf_r+0x17c>
 8007f24:	b1b0      	cbz	r0, 8007f54 <_svfiprintf_r+0x114>
 8007f26:	9207      	str	r2, [sp, #28]
 8007f28:	e014      	b.n	8007f54 <_svfiprintf_r+0x114>
 8007f2a:	eba0 0308 	sub.w	r3, r0, r8
 8007f2e:	fa09 f303 	lsl.w	r3, r9, r3
 8007f32:	4313      	orrs	r3, r2
 8007f34:	9304      	str	r3, [sp, #16]
 8007f36:	46a2      	mov	sl, r4
 8007f38:	e7d2      	b.n	8007ee0 <_svfiprintf_r+0xa0>
 8007f3a:	9b03      	ldr	r3, [sp, #12]
 8007f3c:	1d19      	adds	r1, r3, #4
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	9103      	str	r1, [sp, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	bfbb      	ittet	lt
 8007f46:	425b      	neglt	r3, r3
 8007f48:	f042 0202 	orrlt.w	r2, r2, #2
 8007f4c:	9307      	strge	r3, [sp, #28]
 8007f4e:	9307      	strlt	r3, [sp, #28]
 8007f50:	bfb8      	it	lt
 8007f52:	9204      	strlt	r2, [sp, #16]
 8007f54:	7823      	ldrb	r3, [r4, #0]
 8007f56:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f58:	d10a      	bne.n	8007f70 <_svfiprintf_r+0x130>
 8007f5a:	7863      	ldrb	r3, [r4, #1]
 8007f5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f5e:	d132      	bne.n	8007fc6 <_svfiprintf_r+0x186>
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	1d1a      	adds	r2, r3, #4
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	9203      	str	r2, [sp, #12]
 8007f68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f6c:	3402      	adds	r4, #2
 8007f6e:	9305      	str	r3, [sp, #20]
 8007f70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008034 <_svfiprintf_r+0x1f4>
 8007f74:	7821      	ldrb	r1, [r4, #0]
 8007f76:	2203      	movs	r2, #3
 8007f78:	4650      	mov	r0, sl
 8007f7a:	f7f8 f929 	bl	80001d0 <memchr>
 8007f7e:	b138      	cbz	r0, 8007f90 <_svfiprintf_r+0x150>
 8007f80:	9b04      	ldr	r3, [sp, #16]
 8007f82:	eba0 000a 	sub.w	r0, r0, sl
 8007f86:	2240      	movs	r2, #64	@ 0x40
 8007f88:	4082      	lsls	r2, r0
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	3401      	adds	r4, #1
 8007f8e:	9304      	str	r3, [sp, #16]
 8007f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f94:	4824      	ldr	r0, [pc, #144]	@ (8008028 <_svfiprintf_r+0x1e8>)
 8007f96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f9a:	2206      	movs	r2, #6
 8007f9c:	f7f8 f918 	bl	80001d0 <memchr>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d036      	beq.n	8008012 <_svfiprintf_r+0x1d2>
 8007fa4:	4b21      	ldr	r3, [pc, #132]	@ (800802c <_svfiprintf_r+0x1ec>)
 8007fa6:	bb1b      	cbnz	r3, 8007ff0 <_svfiprintf_r+0x1b0>
 8007fa8:	9b03      	ldr	r3, [sp, #12]
 8007faa:	3307      	adds	r3, #7
 8007fac:	f023 0307 	bic.w	r3, r3, #7
 8007fb0:	3308      	adds	r3, #8
 8007fb2:	9303      	str	r3, [sp, #12]
 8007fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb6:	4433      	add	r3, r6
 8007fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fba:	e76a      	b.n	8007e92 <_svfiprintf_r+0x52>
 8007fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	2001      	movs	r0, #1
 8007fc4:	e7a8      	b.n	8007f18 <_svfiprintf_r+0xd8>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	3401      	adds	r4, #1
 8007fca:	9305      	str	r3, [sp, #20]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	f04f 0c0a 	mov.w	ip, #10
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fd8:	3a30      	subs	r2, #48	@ 0x30
 8007fda:	2a09      	cmp	r2, #9
 8007fdc:	d903      	bls.n	8007fe6 <_svfiprintf_r+0x1a6>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0c6      	beq.n	8007f70 <_svfiprintf_r+0x130>
 8007fe2:	9105      	str	r1, [sp, #20]
 8007fe4:	e7c4      	b.n	8007f70 <_svfiprintf_r+0x130>
 8007fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fea:	4604      	mov	r4, r0
 8007fec:	2301      	movs	r3, #1
 8007fee:	e7f0      	b.n	8007fd2 <_svfiprintf_r+0x192>
 8007ff0:	ab03      	add	r3, sp, #12
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	462a      	mov	r2, r5
 8007ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8008030 <_svfiprintf_r+0x1f0>)
 8007ff8:	a904      	add	r1, sp, #16
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	f3af 8000 	nop.w
 8008000:	1c42      	adds	r2, r0, #1
 8008002:	4606      	mov	r6, r0
 8008004:	d1d6      	bne.n	8007fb4 <_svfiprintf_r+0x174>
 8008006:	89ab      	ldrh	r3, [r5, #12]
 8008008:	065b      	lsls	r3, r3, #25
 800800a:	f53f af2d 	bmi.w	8007e68 <_svfiprintf_r+0x28>
 800800e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008010:	e72c      	b.n	8007e6c <_svfiprintf_r+0x2c>
 8008012:	ab03      	add	r3, sp, #12
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	462a      	mov	r2, r5
 8008018:	4b05      	ldr	r3, [pc, #20]	@ (8008030 <_svfiprintf_r+0x1f0>)
 800801a:	a904      	add	r1, sp, #16
 800801c:	4638      	mov	r0, r7
 800801e:	f000 f879 	bl	8008114 <_printf_i>
 8008022:	e7ed      	b.n	8008000 <_svfiprintf_r+0x1c0>
 8008024:	08008520 	.word	0x08008520
 8008028:	0800852a 	.word	0x0800852a
 800802c:	00000000 	.word	0x00000000
 8008030:	08007d89 	.word	0x08007d89
 8008034:	08008526 	.word	0x08008526

08008038 <_printf_common>:
 8008038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800803c:	4616      	mov	r6, r2
 800803e:	4698      	mov	r8, r3
 8008040:	688a      	ldr	r2, [r1, #8]
 8008042:	690b      	ldr	r3, [r1, #16]
 8008044:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008048:	4293      	cmp	r3, r2
 800804a:	bfb8      	it	lt
 800804c:	4613      	movlt	r3, r2
 800804e:	6033      	str	r3, [r6, #0]
 8008050:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008054:	4607      	mov	r7, r0
 8008056:	460c      	mov	r4, r1
 8008058:	b10a      	cbz	r2, 800805e <_printf_common+0x26>
 800805a:	3301      	adds	r3, #1
 800805c:	6033      	str	r3, [r6, #0]
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	0699      	lsls	r1, r3, #26
 8008062:	bf42      	ittt	mi
 8008064:	6833      	ldrmi	r3, [r6, #0]
 8008066:	3302      	addmi	r3, #2
 8008068:	6033      	strmi	r3, [r6, #0]
 800806a:	6825      	ldr	r5, [r4, #0]
 800806c:	f015 0506 	ands.w	r5, r5, #6
 8008070:	d106      	bne.n	8008080 <_printf_common+0x48>
 8008072:	f104 0a19 	add.w	sl, r4, #25
 8008076:	68e3      	ldr	r3, [r4, #12]
 8008078:	6832      	ldr	r2, [r6, #0]
 800807a:	1a9b      	subs	r3, r3, r2
 800807c:	42ab      	cmp	r3, r5
 800807e:	dc26      	bgt.n	80080ce <_printf_common+0x96>
 8008080:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008084:	6822      	ldr	r2, [r4, #0]
 8008086:	3b00      	subs	r3, #0
 8008088:	bf18      	it	ne
 800808a:	2301      	movne	r3, #1
 800808c:	0692      	lsls	r2, r2, #26
 800808e:	d42b      	bmi.n	80080e8 <_printf_common+0xb0>
 8008090:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008094:	4641      	mov	r1, r8
 8008096:	4638      	mov	r0, r7
 8008098:	47c8      	blx	r9
 800809a:	3001      	adds	r0, #1
 800809c:	d01e      	beq.n	80080dc <_printf_common+0xa4>
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	6922      	ldr	r2, [r4, #16]
 80080a2:	f003 0306 	and.w	r3, r3, #6
 80080a6:	2b04      	cmp	r3, #4
 80080a8:	bf02      	ittt	eq
 80080aa:	68e5      	ldreq	r5, [r4, #12]
 80080ac:	6833      	ldreq	r3, [r6, #0]
 80080ae:	1aed      	subeq	r5, r5, r3
 80080b0:	68a3      	ldr	r3, [r4, #8]
 80080b2:	bf0c      	ite	eq
 80080b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080b8:	2500      	movne	r5, #0
 80080ba:	4293      	cmp	r3, r2
 80080bc:	bfc4      	itt	gt
 80080be:	1a9b      	subgt	r3, r3, r2
 80080c0:	18ed      	addgt	r5, r5, r3
 80080c2:	2600      	movs	r6, #0
 80080c4:	341a      	adds	r4, #26
 80080c6:	42b5      	cmp	r5, r6
 80080c8:	d11a      	bne.n	8008100 <_printf_common+0xc8>
 80080ca:	2000      	movs	r0, #0
 80080cc:	e008      	b.n	80080e0 <_printf_common+0xa8>
 80080ce:	2301      	movs	r3, #1
 80080d0:	4652      	mov	r2, sl
 80080d2:	4641      	mov	r1, r8
 80080d4:	4638      	mov	r0, r7
 80080d6:	47c8      	blx	r9
 80080d8:	3001      	adds	r0, #1
 80080da:	d103      	bne.n	80080e4 <_printf_common+0xac>
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295
 80080e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e4:	3501      	adds	r5, #1
 80080e6:	e7c6      	b.n	8008076 <_printf_common+0x3e>
 80080e8:	18e1      	adds	r1, r4, r3
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	2030      	movs	r0, #48	@ 0x30
 80080ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80080f2:	4422      	add	r2, r4
 80080f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80080f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80080fc:	3302      	adds	r3, #2
 80080fe:	e7c7      	b.n	8008090 <_printf_common+0x58>
 8008100:	2301      	movs	r3, #1
 8008102:	4622      	mov	r2, r4
 8008104:	4641      	mov	r1, r8
 8008106:	4638      	mov	r0, r7
 8008108:	47c8      	blx	r9
 800810a:	3001      	adds	r0, #1
 800810c:	d0e6      	beq.n	80080dc <_printf_common+0xa4>
 800810e:	3601      	adds	r6, #1
 8008110:	e7d9      	b.n	80080c6 <_printf_common+0x8e>
	...

08008114 <_printf_i>:
 8008114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008118:	7e0f      	ldrb	r7, [r1, #24]
 800811a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800811c:	2f78      	cmp	r7, #120	@ 0x78
 800811e:	4691      	mov	r9, r2
 8008120:	4680      	mov	r8, r0
 8008122:	460c      	mov	r4, r1
 8008124:	469a      	mov	sl, r3
 8008126:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800812a:	d807      	bhi.n	800813c <_printf_i+0x28>
 800812c:	2f62      	cmp	r7, #98	@ 0x62
 800812e:	d80a      	bhi.n	8008146 <_printf_i+0x32>
 8008130:	2f00      	cmp	r7, #0
 8008132:	f000 80d2 	beq.w	80082da <_printf_i+0x1c6>
 8008136:	2f58      	cmp	r7, #88	@ 0x58
 8008138:	f000 80b9 	beq.w	80082ae <_printf_i+0x19a>
 800813c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008140:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008144:	e03a      	b.n	80081bc <_printf_i+0xa8>
 8008146:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800814a:	2b15      	cmp	r3, #21
 800814c:	d8f6      	bhi.n	800813c <_printf_i+0x28>
 800814e:	a101      	add	r1, pc, #4	@ (adr r1, 8008154 <_printf_i+0x40>)
 8008150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008154:	080081ad 	.word	0x080081ad
 8008158:	080081c1 	.word	0x080081c1
 800815c:	0800813d 	.word	0x0800813d
 8008160:	0800813d 	.word	0x0800813d
 8008164:	0800813d 	.word	0x0800813d
 8008168:	0800813d 	.word	0x0800813d
 800816c:	080081c1 	.word	0x080081c1
 8008170:	0800813d 	.word	0x0800813d
 8008174:	0800813d 	.word	0x0800813d
 8008178:	0800813d 	.word	0x0800813d
 800817c:	0800813d 	.word	0x0800813d
 8008180:	080082c1 	.word	0x080082c1
 8008184:	080081eb 	.word	0x080081eb
 8008188:	0800827b 	.word	0x0800827b
 800818c:	0800813d 	.word	0x0800813d
 8008190:	0800813d 	.word	0x0800813d
 8008194:	080082e3 	.word	0x080082e3
 8008198:	0800813d 	.word	0x0800813d
 800819c:	080081eb 	.word	0x080081eb
 80081a0:	0800813d 	.word	0x0800813d
 80081a4:	0800813d 	.word	0x0800813d
 80081a8:	08008283 	.word	0x08008283
 80081ac:	6833      	ldr	r3, [r6, #0]
 80081ae:	1d1a      	adds	r2, r3, #4
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6032      	str	r2, [r6, #0]
 80081b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081bc:	2301      	movs	r3, #1
 80081be:	e09d      	b.n	80082fc <_printf_i+0x1e8>
 80081c0:	6833      	ldr	r3, [r6, #0]
 80081c2:	6820      	ldr	r0, [r4, #0]
 80081c4:	1d19      	adds	r1, r3, #4
 80081c6:	6031      	str	r1, [r6, #0]
 80081c8:	0606      	lsls	r6, r0, #24
 80081ca:	d501      	bpl.n	80081d0 <_printf_i+0xbc>
 80081cc:	681d      	ldr	r5, [r3, #0]
 80081ce:	e003      	b.n	80081d8 <_printf_i+0xc4>
 80081d0:	0645      	lsls	r5, r0, #25
 80081d2:	d5fb      	bpl.n	80081cc <_printf_i+0xb8>
 80081d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80081d8:	2d00      	cmp	r5, #0
 80081da:	da03      	bge.n	80081e4 <_printf_i+0xd0>
 80081dc:	232d      	movs	r3, #45	@ 0x2d
 80081de:	426d      	negs	r5, r5
 80081e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081e4:	4859      	ldr	r0, [pc, #356]	@ (800834c <_printf_i+0x238>)
 80081e6:	230a      	movs	r3, #10
 80081e8:	e011      	b.n	800820e <_printf_i+0xfa>
 80081ea:	6821      	ldr	r1, [r4, #0]
 80081ec:	6833      	ldr	r3, [r6, #0]
 80081ee:	0608      	lsls	r0, r1, #24
 80081f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80081f4:	d402      	bmi.n	80081fc <_printf_i+0xe8>
 80081f6:	0649      	lsls	r1, r1, #25
 80081f8:	bf48      	it	mi
 80081fa:	b2ad      	uxthmi	r5, r5
 80081fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80081fe:	4853      	ldr	r0, [pc, #332]	@ (800834c <_printf_i+0x238>)
 8008200:	6033      	str	r3, [r6, #0]
 8008202:	bf14      	ite	ne
 8008204:	230a      	movne	r3, #10
 8008206:	2308      	moveq	r3, #8
 8008208:	2100      	movs	r1, #0
 800820a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800820e:	6866      	ldr	r6, [r4, #4]
 8008210:	60a6      	str	r6, [r4, #8]
 8008212:	2e00      	cmp	r6, #0
 8008214:	bfa2      	ittt	ge
 8008216:	6821      	ldrge	r1, [r4, #0]
 8008218:	f021 0104 	bicge.w	r1, r1, #4
 800821c:	6021      	strge	r1, [r4, #0]
 800821e:	b90d      	cbnz	r5, 8008224 <_printf_i+0x110>
 8008220:	2e00      	cmp	r6, #0
 8008222:	d04b      	beq.n	80082bc <_printf_i+0x1a8>
 8008224:	4616      	mov	r6, r2
 8008226:	fbb5 f1f3 	udiv	r1, r5, r3
 800822a:	fb03 5711 	mls	r7, r3, r1, r5
 800822e:	5dc7      	ldrb	r7, [r0, r7]
 8008230:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008234:	462f      	mov	r7, r5
 8008236:	42bb      	cmp	r3, r7
 8008238:	460d      	mov	r5, r1
 800823a:	d9f4      	bls.n	8008226 <_printf_i+0x112>
 800823c:	2b08      	cmp	r3, #8
 800823e:	d10b      	bne.n	8008258 <_printf_i+0x144>
 8008240:	6823      	ldr	r3, [r4, #0]
 8008242:	07df      	lsls	r7, r3, #31
 8008244:	d508      	bpl.n	8008258 <_printf_i+0x144>
 8008246:	6923      	ldr	r3, [r4, #16]
 8008248:	6861      	ldr	r1, [r4, #4]
 800824a:	4299      	cmp	r1, r3
 800824c:	bfde      	ittt	le
 800824e:	2330      	movle	r3, #48	@ 0x30
 8008250:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008254:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008258:	1b92      	subs	r2, r2, r6
 800825a:	6122      	str	r2, [r4, #16]
 800825c:	f8cd a000 	str.w	sl, [sp]
 8008260:	464b      	mov	r3, r9
 8008262:	aa03      	add	r2, sp, #12
 8008264:	4621      	mov	r1, r4
 8008266:	4640      	mov	r0, r8
 8008268:	f7ff fee6 	bl	8008038 <_printf_common>
 800826c:	3001      	adds	r0, #1
 800826e:	d14a      	bne.n	8008306 <_printf_i+0x1f2>
 8008270:	f04f 30ff 	mov.w	r0, #4294967295
 8008274:	b004      	add	sp, #16
 8008276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	f043 0320 	orr.w	r3, r3, #32
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	4833      	ldr	r0, [pc, #204]	@ (8008350 <_printf_i+0x23c>)
 8008284:	2778      	movs	r7, #120	@ 0x78
 8008286:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	6831      	ldr	r1, [r6, #0]
 800828e:	061f      	lsls	r7, r3, #24
 8008290:	f851 5b04 	ldr.w	r5, [r1], #4
 8008294:	d402      	bmi.n	800829c <_printf_i+0x188>
 8008296:	065f      	lsls	r7, r3, #25
 8008298:	bf48      	it	mi
 800829a:	b2ad      	uxthmi	r5, r5
 800829c:	6031      	str	r1, [r6, #0]
 800829e:	07d9      	lsls	r1, r3, #31
 80082a0:	bf44      	itt	mi
 80082a2:	f043 0320 	orrmi.w	r3, r3, #32
 80082a6:	6023      	strmi	r3, [r4, #0]
 80082a8:	b11d      	cbz	r5, 80082b2 <_printf_i+0x19e>
 80082aa:	2310      	movs	r3, #16
 80082ac:	e7ac      	b.n	8008208 <_printf_i+0xf4>
 80082ae:	4827      	ldr	r0, [pc, #156]	@ (800834c <_printf_i+0x238>)
 80082b0:	e7e9      	b.n	8008286 <_printf_i+0x172>
 80082b2:	6823      	ldr	r3, [r4, #0]
 80082b4:	f023 0320 	bic.w	r3, r3, #32
 80082b8:	6023      	str	r3, [r4, #0]
 80082ba:	e7f6      	b.n	80082aa <_printf_i+0x196>
 80082bc:	4616      	mov	r6, r2
 80082be:	e7bd      	b.n	800823c <_printf_i+0x128>
 80082c0:	6833      	ldr	r3, [r6, #0]
 80082c2:	6825      	ldr	r5, [r4, #0]
 80082c4:	6961      	ldr	r1, [r4, #20]
 80082c6:	1d18      	adds	r0, r3, #4
 80082c8:	6030      	str	r0, [r6, #0]
 80082ca:	062e      	lsls	r6, r5, #24
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	d501      	bpl.n	80082d4 <_printf_i+0x1c0>
 80082d0:	6019      	str	r1, [r3, #0]
 80082d2:	e002      	b.n	80082da <_printf_i+0x1c6>
 80082d4:	0668      	lsls	r0, r5, #25
 80082d6:	d5fb      	bpl.n	80082d0 <_printf_i+0x1bc>
 80082d8:	8019      	strh	r1, [r3, #0]
 80082da:	2300      	movs	r3, #0
 80082dc:	6123      	str	r3, [r4, #16]
 80082de:	4616      	mov	r6, r2
 80082e0:	e7bc      	b.n	800825c <_printf_i+0x148>
 80082e2:	6833      	ldr	r3, [r6, #0]
 80082e4:	1d1a      	adds	r2, r3, #4
 80082e6:	6032      	str	r2, [r6, #0]
 80082e8:	681e      	ldr	r6, [r3, #0]
 80082ea:	6862      	ldr	r2, [r4, #4]
 80082ec:	2100      	movs	r1, #0
 80082ee:	4630      	mov	r0, r6
 80082f0:	f7f7 ff6e 	bl	80001d0 <memchr>
 80082f4:	b108      	cbz	r0, 80082fa <_printf_i+0x1e6>
 80082f6:	1b80      	subs	r0, r0, r6
 80082f8:	6060      	str	r0, [r4, #4]
 80082fa:	6863      	ldr	r3, [r4, #4]
 80082fc:	6123      	str	r3, [r4, #16]
 80082fe:	2300      	movs	r3, #0
 8008300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008304:	e7aa      	b.n	800825c <_printf_i+0x148>
 8008306:	6923      	ldr	r3, [r4, #16]
 8008308:	4632      	mov	r2, r6
 800830a:	4649      	mov	r1, r9
 800830c:	4640      	mov	r0, r8
 800830e:	47d0      	blx	sl
 8008310:	3001      	adds	r0, #1
 8008312:	d0ad      	beq.n	8008270 <_printf_i+0x15c>
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	079b      	lsls	r3, r3, #30
 8008318:	d413      	bmi.n	8008342 <_printf_i+0x22e>
 800831a:	68e0      	ldr	r0, [r4, #12]
 800831c:	9b03      	ldr	r3, [sp, #12]
 800831e:	4298      	cmp	r0, r3
 8008320:	bfb8      	it	lt
 8008322:	4618      	movlt	r0, r3
 8008324:	e7a6      	b.n	8008274 <_printf_i+0x160>
 8008326:	2301      	movs	r3, #1
 8008328:	4632      	mov	r2, r6
 800832a:	4649      	mov	r1, r9
 800832c:	4640      	mov	r0, r8
 800832e:	47d0      	blx	sl
 8008330:	3001      	adds	r0, #1
 8008332:	d09d      	beq.n	8008270 <_printf_i+0x15c>
 8008334:	3501      	adds	r5, #1
 8008336:	68e3      	ldr	r3, [r4, #12]
 8008338:	9903      	ldr	r1, [sp, #12]
 800833a:	1a5b      	subs	r3, r3, r1
 800833c:	42ab      	cmp	r3, r5
 800833e:	dcf2      	bgt.n	8008326 <_printf_i+0x212>
 8008340:	e7eb      	b.n	800831a <_printf_i+0x206>
 8008342:	2500      	movs	r5, #0
 8008344:	f104 0619 	add.w	r6, r4, #25
 8008348:	e7f5      	b.n	8008336 <_printf_i+0x222>
 800834a:	bf00      	nop
 800834c:	08008531 	.word	0x08008531
 8008350:	08008542 	.word	0x08008542

08008354 <memmove>:
 8008354:	4288      	cmp	r0, r1
 8008356:	b510      	push	{r4, lr}
 8008358:	eb01 0402 	add.w	r4, r1, r2
 800835c:	d902      	bls.n	8008364 <memmove+0x10>
 800835e:	4284      	cmp	r4, r0
 8008360:	4623      	mov	r3, r4
 8008362:	d807      	bhi.n	8008374 <memmove+0x20>
 8008364:	1e43      	subs	r3, r0, #1
 8008366:	42a1      	cmp	r1, r4
 8008368:	d008      	beq.n	800837c <memmove+0x28>
 800836a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800836e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008372:	e7f8      	b.n	8008366 <memmove+0x12>
 8008374:	4402      	add	r2, r0
 8008376:	4601      	mov	r1, r0
 8008378:	428a      	cmp	r2, r1
 800837a:	d100      	bne.n	800837e <memmove+0x2a>
 800837c:	bd10      	pop	{r4, pc}
 800837e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008386:	e7f7      	b.n	8008378 <memmove+0x24>

08008388 <_sbrk_r>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4d06      	ldr	r5, [pc, #24]	@ (80083a4 <_sbrk_r+0x1c>)
 800838c:	2300      	movs	r3, #0
 800838e:	4604      	mov	r4, r0
 8008390:	4608      	mov	r0, r1
 8008392:	602b      	str	r3, [r5, #0]
 8008394:	f7f9 f8f8 	bl	8001588 <_sbrk>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	d102      	bne.n	80083a2 <_sbrk_r+0x1a>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	b103      	cbz	r3, 80083a2 <_sbrk_r+0x1a>
 80083a0:	6023      	str	r3, [r4, #0]
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	20001d18 	.word	0x20001d18

080083a8 <_realloc_r>:
 80083a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ac:	4680      	mov	r8, r0
 80083ae:	4615      	mov	r5, r2
 80083b0:	460c      	mov	r4, r1
 80083b2:	b921      	cbnz	r1, 80083be <_realloc_r+0x16>
 80083b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083b8:	4611      	mov	r1, r2
 80083ba:	f7ff bc59 	b.w	8007c70 <_malloc_r>
 80083be:	b92a      	cbnz	r2, 80083cc <_realloc_r+0x24>
 80083c0:	f7ff fbea 	bl	8007b98 <_free_r>
 80083c4:	2400      	movs	r4, #0
 80083c6:	4620      	mov	r0, r4
 80083c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083cc:	f000 f81a 	bl	8008404 <_malloc_usable_size_r>
 80083d0:	4285      	cmp	r5, r0
 80083d2:	4606      	mov	r6, r0
 80083d4:	d802      	bhi.n	80083dc <_realloc_r+0x34>
 80083d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80083da:	d8f4      	bhi.n	80083c6 <_realloc_r+0x1e>
 80083dc:	4629      	mov	r1, r5
 80083de:	4640      	mov	r0, r8
 80083e0:	f7ff fc46 	bl	8007c70 <_malloc_r>
 80083e4:	4607      	mov	r7, r0
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d0ec      	beq.n	80083c4 <_realloc_r+0x1c>
 80083ea:	42b5      	cmp	r5, r6
 80083ec:	462a      	mov	r2, r5
 80083ee:	4621      	mov	r1, r4
 80083f0:	bf28      	it	cs
 80083f2:	4632      	movcs	r2, r6
 80083f4:	f7ff fbc2 	bl	8007b7c <memcpy>
 80083f8:	4621      	mov	r1, r4
 80083fa:	4640      	mov	r0, r8
 80083fc:	f7ff fbcc 	bl	8007b98 <_free_r>
 8008400:	463c      	mov	r4, r7
 8008402:	e7e0      	b.n	80083c6 <_realloc_r+0x1e>

08008404 <_malloc_usable_size_r>:
 8008404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008408:	1f18      	subs	r0, r3, #4
 800840a:	2b00      	cmp	r3, #0
 800840c:	bfbc      	itt	lt
 800840e:	580b      	ldrlt	r3, [r1, r0]
 8008410:	18c0      	addlt	r0, r0, r3
 8008412:	4770      	bx	lr

08008414 <_init>:
 8008414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008416:	bf00      	nop
 8008418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841a:	bc08      	pop	{r3}
 800841c:	469e      	mov	lr, r3
 800841e:	4770      	bx	lr

08008420 <_fini>:
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	bf00      	nop
 8008424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008426:	bc08      	pop	{r3}
 8008428:	469e      	mov	lr, r3
 800842a:	4770      	bx	lr

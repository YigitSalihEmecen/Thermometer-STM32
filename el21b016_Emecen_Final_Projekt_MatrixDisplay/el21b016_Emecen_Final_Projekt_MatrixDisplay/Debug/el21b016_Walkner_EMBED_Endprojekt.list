
el21b016_Walkner_EMBED_Endprojekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08008368  08008368  00018368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008488  08008488  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08008488  08008488  00018488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008490  08008490  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008490  08008490  00018490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008494  08008494  00018494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08008498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cdc  200000a8  08008540  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d84  08008540  00021d84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fe90  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004450  00000000  00000000  0003ffab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a48  00000000  00000000  00044400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001461  00000000  00000000  00045e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023159  00000000  00000000  000472a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ee0f  00000000  00000000  0006a402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d69e2  00000000  00000000  00089211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000072d8  00000000  00000000  0015fbf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00166ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008350 	.word	0x08008350

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08008350 	.word	0x08008350

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <set_modes_from_datasheet_MATRIX>:
	7, 5, 5, 7, 5, 5, 7, //8
	7, 4, 4, 7, 5, 5, 7, //9
};

void set_modes_from_datasheet_MATRIX ()
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0


	  tx_data[0] = 0x09;
 8000570:	4b4e      	ldr	r3, [pc, #312]	; (80006ac <set_modes_from_datasheet_MATRIX+0x140>)
 8000572:	2209      	movs	r2, #9
 8000574:	701a      	strb	r2, [r3, #0]
	  tx_data[1] = 0x00;
 8000576:	4b4d      	ldr	r3, [pc, #308]	; (80006ac <set_modes_from_datasheet_MATRIX+0x140>)
 8000578:	2200      	movs	r2, #0
 800057a:	705a      	strb	r2, [r3, #1]

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000584:	f001 f940 	bl	8001808 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	2102      	movs	r1, #2
 800058c:	4848      	ldr	r0, [pc, #288]	; (80006b0 <set_modes_from_datasheet_MATRIX+0x144>)
 800058e:	f001 f93b 	bl	8001808 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000592:	2001      	movs	r0, #1
 8000594:	f000 fe48 	bl	8001228 <HAL_Delay>

	  HAL_SPI_Transmit(&hspi1, tx_data, 2, 2);
 8000598:	2302      	movs	r3, #2
 800059a:	2202      	movs	r2, #2
 800059c:	4943      	ldr	r1, [pc, #268]	; (80006ac <set_modes_from_datasheet_MATRIX+0x140>)
 800059e:	4845      	ldr	r0, [pc, #276]	; (80006b4 <set_modes_from_datasheet_MATRIX+0x148>)
 80005a0:	f002 fbc3 	bl	8002d2a <HAL_SPI_Transmit>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2102      	movs	r1, #2
 80005a8:	4841      	ldr	r0, [pc, #260]	; (80006b0 <set_modes_from_datasheet_MATRIX+0x144>)
 80005aa:	f001 f92d 	bl	8001808 <HAL_GPIO_WritePin>

	  tx_data[0] = 0x0A;
 80005ae:	4b3f      	ldr	r3, [pc, #252]	; (80006ac <set_modes_from_datasheet_MATRIX+0x140>)
 80005b0:	220a      	movs	r2, #10
 80005b2:	701a      	strb	r2, [r3, #0]
	  tx_data[1] = 0x09;
 80005b4:	4b3d      	ldr	r3, [pc, #244]	; (80006ac <set_modes_from_datasheet_MATRIX+0x140>)
 80005b6:	2209      	movs	r2, #9
 80005b8:	705a      	strb	r2, [r3, #1]

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c2:	f001 f921 	bl	8001808 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2102      	movs	r1, #2
 80005ca:	4839      	ldr	r0, [pc, #228]	; (80006b0 <set_modes_from_datasheet_MATRIX+0x144>)
 80005cc:	f001 f91c 	bl	8001808 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 80005d0:	2001      	movs	r0, #1
 80005d2:	f000 fe29 	bl	8001228 <HAL_Delay>

	  HAL_SPI_Transmit(&hspi1, tx_data, 2, 2);
 80005d6:	2302      	movs	r3, #2
 80005d8:	2202      	movs	r2, #2
 80005da:	4934      	ldr	r1, [pc, #208]	; (80006ac <set_modes_from_datasheet_MATRIX+0x140>)
 80005dc:	4835      	ldr	r0, [pc, #212]	; (80006b4 <set_modes_from_datasheet_MATRIX+0x148>)
 80005de:	f002 fba4 	bl	8002d2a <HAL_SPI_Transmit>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80005e2:	2201      	movs	r2, #1
 80005e4:	2102      	movs	r1, #2
 80005e6:	4832      	ldr	r0, [pc, #200]	; (80006b0 <set_modes_from_datasheet_MATRIX+0x144>)
 80005e8:	f001 f90e 	bl	8001808 <HAL_GPIO_WritePin>

	   tx_data[0] = 0x0B;
 80005ec:	4b2f      	ldr	r3, [pc, #188]	; (80006ac <set_modes_from_datasheet_MATRIX+0x140>)
 80005ee:	220b      	movs	r2, #11
 80005f0:	701a      	strb	r2, [r3, #0]
	   tx_data[1] = 0x07;
 80005f2:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <set_modes_from_datasheet_MATRIX+0x140>)
 80005f4:	2207      	movs	r2, #7
 80005f6:	705a      	strb	r2, [r3, #1]

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000600:	f001 f902 	bl	8001808 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2102      	movs	r1, #2
 8000608:	4829      	ldr	r0, [pc, #164]	; (80006b0 <set_modes_from_datasheet_MATRIX+0x144>)
 800060a:	f001 f8fd 	bl	8001808 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 800060e:	2001      	movs	r0, #1
 8000610:	f000 fe0a 	bl	8001228 <HAL_Delay>

	  HAL_SPI_Transmit(&hspi1, tx_data, 2, 2);
 8000614:	2302      	movs	r3, #2
 8000616:	2202      	movs	r2, #2
 8000618:	4924      	ldr	r1, [pc, #144]	; (80006ac <set_modes_from_datasheet_MATRIX+0x140>)
 800061a:	4826      	ldr	r0, [pc, #152]	; (80006b4 <set_modes_from_datasheet_MATRIX+0x148>)
 800061c:	f002 fb85 	bl	8002d2a <HAL_SPI_Transmit>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	2102      	movs	r1, #2
 8000624:	4822      	ldr	r0, [pc, #136]	; (80006b0 <set_modes_from_datasheet_MATRIX+0x144>)
 8000626:	f001 f8ef 	bl	8001808 <HAL_GPIO_WritePin>

	  tx_data[0] = 0x0C;
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <set_modes_from_datasheet_MATRIX+0x140>)
 800062c:	220c      	movs	r2, #12
 800062e:	701a      	strb	r2, [r3, #0]
	  tx_data[1] = 0x01;
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <set_modes_from_datasheet_MATRIX+0x140>)
 8000632:	2201      	movs	r2, #1
 8000634:	705a      	strb	r2, [r3, #1]

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063e:	f001 f8e3 	bl	8001808 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2102      	movs	r1, #2
 8000646:	481a      	ldr	r0, [pc, #104]	; (80006b0 <set_modes_from_datasheet_MATRIX+0x144>)
 8000648:	f001 f8de 	bl	8001808 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 800064c:	2001      	movs	r0, #1
 800064e:	f000 fdeb 	bl	8001228 <HAL_Delay>

	  HAL_SPI_Transmit(&hspi1, tx_data, 2, 2);
 8000652:	2302      	movs	r3, #2
 8000654:	2202      	movs	r2, #2
 8000656:	4915      	ldr	r1, [pc, #84]	; (80006ac <set_modes_from_datasheet_MATRIX+0x140>)
 8000658:	4816      	ldr	r0, [pc, #88]	; (80006b4 <set_modes_from_datasheet_MATRIX+0x148>)
 800065a:	f002 fb66 	bl	8002d2a <HAL_SPI_Transmit>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800065e:	2201      	movs	r2, #1
 8000660:	2102      	movs	r1, #2
 8000662:	4813      	ldr	r0, [pc, #76]	; (80006b0 <set_modes_from_datasheet_MATRIX+0x144>)
 8000664:	f001 f8d0 	bl	8001808 <HAL_GPIO_WritePin>

	  tx_data[0] = 0x0F;
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <set_modes_from_datasheet_MATRIX+0x140>)
 800066a:	220f      	movs	r2, #15
 800066c:	701a      	strb	r2, [r3, #0]
	  tx_data[1] = 0x00;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <set_modes_from_datasheet_MATRIX+0x140>)
 8000670:	2200      	movs	r2, #0
 8000672:	705a      	strb	r2, [r3, #1]



	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067c:	f001 f8c4 	bl	8001808 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2102      	movs	r1, #2
 8000684:	480a      	ldr	r0, [pc, #40]	; (80006b0 <set_modes_from_datasheet_MATRIX+0x144>)
 8000686:	f001 f8bf 	bl	8001808 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 800068a:	2001      	movs	r0, #1
 800068c:	f000 fdcc 	bl	8001228 <HAL_Delay>

	  HAL_SPI_Transmit(&hspi1, tx_data, 2, 2);
 8000690:	2302      	movs	r3, #2
 8000692:	2202      	movs	r2, #2
 8000694:	4905      	ldr	r1, [pc, #20]	; (80006ac <set_modes_from_datasheet_MATRIX+0x140>)
 8000696:	4807      	ldr	r0, [pc, #28]	; (80006b4 <set_modes_from_datasheet_MATRIX+0x148>)
 8000698:	f002 fb47 	bl	8002d2a <HAL_SPI_Transmit>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800069c:	2201      	movs	r2, #1
 800069e:	2102      	movs	r1, #2
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <set_modes_from_datasheet_MATRIX+0x144>)
 80006a2:	f001 f8b1 	bl	8001808 <HAL_GPIO_WritePin>



}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000244 	.word	0x20000244
 80006b0:	48000400 	.word	0x48000400
 80006b4:	200000c4 	.word	0x200000c4

080006b8 <set_number>:
{
	set_led (7,128); //achtes bit der linken Zahl
}

void set_number(int first, int second)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b0cb      	sub	sp, #300	; 0x12c
 80006bc:	af00      	add	r7, sp, #0
 80006be:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80006c2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80006c6:	6018      	str	r0, [r3, #0]
 80006c8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80006cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80006d0:	6019      	str	r1, [r3, #0]
	int annen[10][7];

	for (int i = 0; i < 7; i++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80006d8:	e04d      	b.n	8000776 <set_number+0xbe>
	{
		annen[second][i] = leftDigit[second][i] << 4;
 80006da:	492c      	ldr	r1, [pc, #176]	; (800078c <set_number+0xd4>)
 80006dc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80006e0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4613      	mov	r3, r2
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	1a9b      	subs	r3, r3, r2
 80006ec:	18ca      	adds	r2, r1, r3
 80006ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	0118      	lsls	r0, r3, #4
 80006f8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80006fc:	f5a3 718e 	sub.w	r1, r3, #284	; 0x11c
 8000700:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000704:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	4613      	mov	r3, r2
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	1a9b      	subs	r3, r3, r2
 8000710:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000714:	4413      	add	r3, r2
 8000716:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
		set_led(i, leftDigit[first][i] + annen[second][i]);
 800071a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800071e:	b2dc      	uxtb	r4, r3
 8000720:	491a      	ldr	r1, [pc, #104]	; (800078c <set_number+0xd4>)
 8000722:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000726:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4613      	mov	r3, r2
 800072e:	00db      	lsls	r3, r3, #3
 8000730:	1a9b      	subs	r3, r3, r2
 8000732:	18ca      	adds	r2, r1, r3
 8000734:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000738:	4413      	add	r3, r2
 800073a:	7819      	ldrb	r1, [r3, #0]
 800073c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000740:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8000744:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000748:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4613      	mov	r3, r2
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	1a9b      	subs	r3, r3, r2
 8000754:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000758:	4413      	add	r3, r2
 800075a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	440b      	add	r3, r1
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4619      	mov	r1, r3
 8000766:	4620      	mov	r0, r4
 8000768:	f000 f812 	bl	8000790 <set_led>
	for (int i = 0; i < 7; i++)
 800076c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000770:	3301      	adds	r3, #1
 8000772:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000776:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800077a:	2b06      	cmp	r3, #6
 800077c:	ddad      	ble.n	80006da <set_number+0x22>
	}
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8000786:	46bd      	mov	sp, r7
 8000788:	bd90      	pop	{r4, r7, pc}
 800078a:	bf00      	nop
 800078c:	20000000 	.word	0x20000000

08000790 <set_led>:

void set_led (uint8_t col, uint8_t row)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	460a      	mov	r2, r1
 800079a:	71fb      	strb	r3, [r7, #7]
 800079c:	4613      	mov	r3, r2
 800079e:	71bb      	strb	r3, [r7, #6]
	 tx_data[0] = col + 1; //Reihe der Matrix von 0 bis 7 decimal
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	3301      	adds	r3, #1
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <set_led+0x5c>)
 80007a8:	701a      	strb	r2, [r3, #0]
	 tx_data[1] = row; //Spalte der Matrix diese ist in decimal to bit anzuschreiben von 0 bis 255
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <set_led+0x5c>)
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	7053      	strb	r3, [r2, #1]


	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2180      	movs	r1, #128	; 0x80
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b8:	f001 f826 	bl	8001808 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2102      	movs	r1, #2
 80007c0:	480b      	ldr	r0, [pc, #44]	; (80007f0 <set_led+0x60>)
 80007c2:	f001 f821 	bl	8001808 <HAL_GPIO_WritePin>
	 HAL_Delay(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f000 fd2e 	bl	8001228 <HAL_Delay>

	 HAL_SPI_Transmit(&hspi1, tx_data, 2, 2);
 80007cc:	2302      	movs	r3, #2
 80007ce:	2202      	movs	r2, #2
 80007d0:	4906      	ldr	r1, [pc, #24]	; (80007ec <set_led+0x5c>)
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <set_led+0x64>)
 80007d4:	f002 faa9 	bl	8002d2a <HAL_SPI_Transmit>

	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80007d8:	2201      	movs	r2, #1
 80007da:	2102      	movs	r1, #2
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <set_led+0x60>)
 80007de:	f001 f813 	bl	8001808 <HAL_GPIO_WritePin>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000244 	.word	0x20000244
 80007f0:	48000400 	.word	0x48000400
 80007f4:	200000c4 	.word	0x200000c4

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 fcda 	bl	80011b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f86d 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000806:	f000 f96b 	bl	8000ae0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800080a:	f000 f909 	bl	8000a20 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800080e:	f000 f8c9 	bl	80009a4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000812:	f000 f935 	bl	8000a80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //set_modes_from_datasheet_MATRIX();
  set_modes_from_datasheet_MATRIX();
 8000816:	f7ff fea9 	bl	800056c <set_modes_from_datasheet_MATRIX>

  //set_degree_symbol();

  for (int i = 1; i <= 8; i++)
 800081a:	2301      	movs	r3, #1
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	e028      	b.n	8000872 <main+0x7a>
  	{
	  	  tx_data[0] = i;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	b2da      	uxtb	r2, r3
 8000824:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <main+0xbc>)
 8000826:	701a      	strb	r2, [r3, #0]
	 	  tx_data[1] = 0x00;
 8000828:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <main+0xbc>)
 800082a:	2200      	movs	r2, #0
 800082c:	705a      	strb	r2, [r3, #1]

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000836:	f000 ffe7 	bl	8001808 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2102      	movs	r1, #2
 800083e:	481e      	ldr	r0, [pc, #120]	; (80008b8 <main+0xc0>)
 8000840:	f000 ffe2 	bl	8001808 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f000 fcef 	bl	8001228 <HAL_Delay>

	  HAL_SPI_Transmit(&hspi1, tx_data, 2, 2);
 800084a:	2302      	movs	r3, #2
 800084c:	2202      	movs	r2, #2
 800084e:	4919      	ldr	r1, [pc, #100]	; (80008b4 <main+0xbc>)
 8000850:	481a      	ldr	r0, [pc, #104]	; (80008bc <main+0xc4>)
 8000852:	f002 fa6a 	bl	8002d2a <HAL_SPI_Transmit>


	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000856:	2201      	movs	r2, #1
 8000858:	2102      	movs	r1, #2
 800085a:	4817      	ldr	r0, [pc, #92]	; (80008b8 <main+0xc0>)
 800085c:	f000 ffd4 	bl	8001808 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000860:	2201      	movs	r2, #1
 8000862:	2180      	movs	r1, #128	; 0x80
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f000 ffce 	bl	8001808 <HAL_GPIO_WritePin>
  for (int i = 1; i <= 8; i++)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3301      	adds	r3, #1
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b08      	cmp	r3, #8
 8000876:	ddd3      	ble.n	8000820 <main+0x28>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000878:	f004 f90e 	bl	8004a98 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (32, sizeof(int), &uartQueue_attributes);
 800087c:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <main+0xc8>)
 800087e:	2104      	movs	r1, #4
 8000880:	2020      	movs	r0, #32
 8000882:	f004 fa00 	bl	8004c86 <osMessageQueueNew>
 8000886:	4603      	mov	r3, r0
 8000888:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <main+0xcc>)
 800088a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of showNumber */
  showNumberHandle = osThreadNew(showNumberStart, NULL, &showNumber_attributes);
 800088c:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <main+0xd0>)
 800088e:	2100      	movs	r1, #0
 8000890:	480e      	ldr	r0, [pc, #56]	; (80008cc <main+0xd4>)
 8000892:	f004 f94b 	bl	8004b2c <osThreadNew>
 8000896:	4603      	mov	r3, r0
 8000898:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <main+0xd8>)
 800089a:	6013      	str	r3, [r2, #0]

  /* creation of receiveUART_tsk */
  receiveUART_tskHandle = osThreadNew(receiveUARTstart, NULL, &receiveUART_tsk_attributes);
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <main+0xdc>)
 800089e:	2100      	movs	r1, #0
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <main+0xe0>)
 80008a2:	f004 f943 	bl	8004b2c <osThreadNew>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <main+0xe4>)
 80008aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008ac:	f004 f918 	bl	8004ae0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <main+0xb8>
 80008b2:	bf00      	nop
 80008b4:	20000244 	.word	0x20000244
 80008b8:	48000400 	.word	0x48000400
 80008bc:	200000c4 	.word	0x200000c4
 80008c0:	080083f4 	.word	0x080083f4
 80008c4:	20000240 	.word	0x20000240
 80008c8:	080083ac 	.word	0x080083ac
 80008cc:	08000b75 	.word	0x08000b75
 80008d0:	20000238 	.word	0x20000238
 80008d4:	080083d0 	.word	0x080083d0
 80008d8:	08000bf5 	.word	0x08000bf5
 80008dc:	2000023c 	.word	0x2000023c

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b096      	sub	sp, #88	; 0x58
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2244      	movs	r2, #68	; 0x44
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f007 f854 	bl	800799c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000902:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000906:	f000 ffb5 	bl	8001874 <HAL_PWREx_ControlVoltageScaling>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000910:	f000 f99c 	bl	8000c4c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000914:	f000 ff90 	bl	8001838 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000918:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <SystemClock_Config+0xc0>)
 800091a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800091e:	4a20      	ldr	r2, [pc, #128]	; (80009a0 <SystemClock_Config+0xc0>)
 8000920:	f023 0318 	bic.w	r3, r3, #24
 8000924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000928:	2314      	movs	r3, #20
 800092a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800092c:	2301      	movs	r3, #1
 800092e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000938:	2360      	movs	r3, #96	; 0x60
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093c:	2302      	movs	r3, #2
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000940:	2301      	movs	r3, #1
 8000942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000944:	2301      	movs	r3, #1
 8000946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000948:	2310      	movs	r3, #16
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800094c:	2307      	movs	r3, #7
 800094e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000950:	2302      	movs	r3, #2
 8000952:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000954:	2302      	movs	r3, #2
 8000956:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4618      	mov	r0, r3
 800095e:	f000 ffdf 	bl	8001920 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000968:	f000 f970 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2303      	movs	r3, #3
 8000972:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	2101      	movs	r1, #1
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fbdf 	bl	8002148 <HAL_RCC_ClockConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000990:	f000 f95c 	bl	8000c4c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000994:	f002 f824 	bl	80029e0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000998:	bf00      	nop
 800099a:	3758      	adds	r7, #88	; 0x58
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000

080009a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_SPI1_Init+0x74>)
 80009aa:	4a1c      	ldr	r2, [pc, #112]	; (8000a1c <MX_SPI1_Init+0x78>)
 80009ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_SPI1_Init+0x74>)
 80009b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_SPI1_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_SPI1_Init+0x74>)
 80009be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_SPI1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_SPI1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_SPI1_Init+0x74>)
 80009d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_SPI1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_SPI1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_SPI1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_SPI1_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_SPI1_Init+0x74>)
 80009f2:	2207      	movs	r2, #7
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_SPI1_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_SPI1_Init+0x74>)
 80009fe:	2208      	movs	r2, #8
 8000a00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_SPI1_Init+0x74>)
 8000a04:	f002 f8ee 	bl	8002be4 <HAL_SPI_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a0e:	f000 f91d 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000c4 	.word	0x200000c4
 8000a1c:	40013000 	.word	0x40013000

08000a20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_USART1_UART_Init+0x58>)
 8000a26:	4a15      	ldr	r2, [pc, #84]	; (8000a7c <MX_USART1_UART_Init+0x5c>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_USART1_UART_Init+0x58>)
 8000a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_USART1_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_USART1_UART_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_USART1_UART_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_USART1_UART_Init+0x58>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <MX_USART1_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_USART1_UART_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <MX_USART1_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_USART1_UART_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_USART1_UART_Init+0x58>)
 8000a64:	f002 fe9c 	bl	80037a0 <HAL_UART_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a6e:	f000 f8ed 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000128 	.word	0x20000128
 8000a7c:	40013800 	.word	0x40013800

08000a80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000a86:	4a15      	ldr	r2, [pc, #84]	; (8000adc <MX_USART2_UART_Init+0x5c>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000ac4:	f002 fe6c 	bl	80037a0 <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ace:	f000 f8bd 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200001b0 	.word	0x200001b0
 8000adc:	40004400 	.word	0x40004400

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <MX_GPIO_Init+0x8c>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	4a1c      	ldr	r2, [pc, #112]	; (8000b6c <MX_GPIO_Init+0x8c>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_GPIO_Init+0x8c>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_GPIO_Init+0x8c>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <MX_GPIO_Init+0x8c>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_GPIO_Init+0x8c>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_GPIO_Init+0x8c>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <MX_GPIO_Init+0x8c>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_GPIO_Init+0x8c>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2102      	movs	r1, #2
 8000b42:	480b      	ldr	r0, [pc, #44]	; (8000b70 <MX_GPIO_Init+0x90>)
 8000b44:	f000 fe60 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4804      	ldr	r0, [pc, #16]	; (8000b70 <MX_GPIO_Init+0x90>)
 8000b60:	f000 fce8 	bl	8001534 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	48000400 	.word	0x48000400

08000b74 <showNumberStart>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_showNumberStart */
void showNumberStart(void *argument)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	int num;
	osMessageQueueGet(uartQueueHandle, &num, NULL, osWaitForever);
 8000b7c:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <showNumberStart+0x70>)
 8000b7e:	6818      	ldr	r0, [r3, #0]
 8000b80:	f107 011c 	add.w	r1, r7, #28
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f004 f94f 	bl	8004e2c <osMessageQueueGet>
    set_number(num/10, num%10);
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <showNumberStart+0x74>)
 8000b92:	fb82 1203 	smull	r1, r2, r2, r3
 8000b96:	1092      	asrs	r2, r2, #2
 8000b98:	17db      	asrs	r3, r3, #31
 8000b9a:	1ad0      	subs	r0, r2, r3
 8000b9c:	69fa      	ldr	r2, [r7, #28]
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <showNumberStart+0x74>)
 8000ba0:	fb83 1302 	smull	r1, r3, r3, r2
 8000ba4:	1099      	asrs	r1, r3, #2
 8000ba6:	17d3      	asrs	r3, r2, #31
 8000ba8:	1ac9      	subs	r1, r1, r3
 8000baa:	460b      	mov	r3, r1
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	440b      	add	r3, r1
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	1ad1      	subs	r1, r2, r3
 8000bb4:	f7ff fd80 	bl	80006b8 <set_number>
    set_led(7, 128);
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	2007      	movs	r0, #7
 8000bbc:	f7ff fde8 	bl	8000790 <set_led>

    char str[20];
    sprintf(str, "%d", num);
 8000bc0:	69fa      	ldr	r2, [r7, #28]
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	4909      	ldr	r1, [pc, #36]	; (8000bec <showNumberStart+0x78>)
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f006 fec7 	bl	800795c <siprintf>
    transmit_string(&huart2, str);
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <showNumberStart+0x7c>)
 8000bd6:	f000 faac 	bl	8001132 <transmit_string>

    osDelay(10);
 8000bda:	200a      	movs	r0, #10
 8000bdc:	f004 f838 	bl	8004c50 <osDelay>
  {
 8000be0:	e7cc      	b.n	8000b7c <showNumberStart+0x8>
 8000be2:	bf00      	nop
 8000be4:	20000240 	.word	0x20000240
 8000be8:	66666667 	.word	0x66666667
 8000bec:	08008390 	.word	0x08008390
 8000bf0:	200001b0 	.word	0x200001b0

08000bf4 <receiveUARTstart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_receiveUARTstart */
void receiveUARTstart(void *argument)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN receiveUARTstart */
  /* Infinite loop */
  for(;;)
  {
	int num;
	num = read_data(&huart1);
 8000bfc:	4808      	ldr	r0, [pc, #32]	; (8000c20 <receiveUARTstart+0x2c>)
 8000bfe:	f000 fa33 	bl	8001068 <read_data>
 8000c02:	4603      	mov	r3, r0
 8000c04:	60fb      	str	r3, [r7, #12]

	osMessageQueuePut(uartQueueHandle, &num, 0, osWaitForever);
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <receiveUARTstart+0x30>)
 8000c08:	6818      	ldr	r0, [r3, #0]
 8000c0a:	f107 010c 	add.w	r1, r7, #12
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	2200      	movs	r2, #0
 8000c14:	f004 f8aa 	bl	8004d6c <osMessageQueuePut>

    osDelay(100);
 8000c18:	2064      	movs	r0, #100	; 0x64
 8000c1a:	f004 f819 	bl	8004c50 <osDelay>
  {
 8000c1e:	e7ed      	b.n	8000bfc <receiveUARTstart+0x8>
 8000c20:	20000128 	.word	0x20000128
 8000c24:	20000240 	.word	0x20000240

08000c28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d101      	bne.n	8000c3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c3a:	f000 fad5 	bl	80011e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40001000 	.word	0x40001000

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c62:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6613      	str	r3, [r2, #96]	; 0x60
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6593      	str	r3, [r2, #88]	; 0x58
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	210f      	movs	r1, #15
 8000c92:	f06f 0001 	mvn.w	r0, #1
 8000c96:	f000 fba3 	bl	80013e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <HAL_SPI_MspInit+0x7c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d128      	bne.n	8000d1c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <HAL_SPI_MspInit+0x80>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cce:	4a16      	ldr	r2, [pc, #88]	; (8000d28 <HAL_SPI_MspInit+0x80>)
 8000cd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_SPI_MspInit+0x80>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_SPI_MspInit+0x80>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <HAL_SPI_MspInit+0x80>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_SPI_MspInit+0x80>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8000cfa:	2382      	movs	r3, #130	; 0x82
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d18:	f000 fc0c 	bl	8001534 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40013000 	.word	0x40013000
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b0a0      	sub	sp, #128	; 0x80
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d44:	f107 0318 	add.w	r3, r7, #24
 8000d48:	2254      	movs	r2, #84	; 0x54
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f006 fe25 	bl	800799c <memset>
  if(huart->Instance==USART1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a4b      	ldr	r2, [pc, #300]	; (8000e84 <HAL_UART_MspInit+0x158>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d140      	bne.n	8000dde <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d60:	2300      	movs	r3, #0
 8000d62:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d64:	f107 0318 	add.w	r3, r7, #24
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fc43 	bl	80025f4 <HAL_RCCEx_PeriphCLKConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d74:	f7ff ff6a 	bl	8000c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d78:	4b43      	ldr	r3, [pc, #268]	; (8000e88 <HAL_UART_MspInit+0x15c>)
 8000d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d7c:	4a42      	ldr	r2, [pc, #264]	; (8000e88 <HAL_UART_MspInit+0x15c>)
 8000d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d82:	6613      	str	r3, [r2, #96]	; 0x60
 8000d84:	4b40      	ldr	r3, [pc, #256]	; (8000e88 <HAL_UART_MspInit+0x15c>)
 8000d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b3d      	ldr	r3, [pc, #244]	; (8000e88 <HAL_UART_MspInit+0x15c>)
 8000d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d94:	4a3c      	ldr	r2, [pc, #240]	; (8000e88 <HAL_UART_MspInit+0x15c>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9c:	4b3a      	ldr	r3, [pc, #232]	; (8000e88 <HAL_UART_MspInit+0x15c>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000da8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dba:	2307      	movs	r3, #7
 8000dbc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc8:	f000 fbb4 	bl	8001534 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2105      	movs	r1, #5
 8000dd0:	2025      	movs	r0, #37	; 0x25
 8000dd2:	f000 fb05 	bl	80013e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dd6:	2025      	movs	r0, #37	; 0x25
 8000dd8:	f000 fb1e 	bl	8001418 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ddc:	e04d      	b.n	8000e7a <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a2a      	ldr	r2, [pc, #168]	; (8000e8c <HAL_UART_MspInit+0x160>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d148      	bne.n	8000e7a <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df0:	f107 0318 	add.w	r3, r7, #24
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 fbfd 	bl	80025f4 <HAL_RCCEx_PeriphCLKConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000e00:	f7ff ff24 	bl	8000c4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e04:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_UART_MspInit+0x15c>)
 8000e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e08:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <HAL_UART_MspInit+0x15c>)
 8000e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_UART_MspInit+0x15c>)
 8000e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_UART_MspInit+0x15c>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e20:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <HAL_UART_MspInit+0x15c>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_UART_MspInit+0x15c>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e34:	2304      	movs	r3, #4
 8000e36:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e44:	2307      	movs	r3, #7
 8000e46:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e52:	f000 fb6f 	bl	8001534 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e76:	f000 fb5d 	bl	8001534 <HAL_GPIO_Init>
}
 8000e7a:	bf00      	nop
 8000e7c:	3780      	adds	r7, #128	; 0x80
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40013800 	.word	0x40013800
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40004400 	.word	0x40004400

08000e90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08e      	sub	sp, #56	; 0x38
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e9e:	4b34      	ldr	r3, [pc, #208]	; (8000f70 <HAL_InitTick+0xe0>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	4a33      	ldr	r2, [pc, #204]	; (8000f70 <HAL_InitTick+0xe0>)
 8000ea4:	f043 0310 	orr.w	r3, r3, #16
 8000ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eaa:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <HAL_InitTick+0xe0>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eae:	f003 0310 	and.w	r3, r3, #16
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eb6:	f107 0210 	add.w	r2, r7, #16
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 fb05 	bl	80024d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ec6:	6a3b      	ldr	r3, [r7, #32]
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d103      	bne.n	8000ed8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ed0:	f001 fad2 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8000ed4:	6378      	str	r0, [r7, #52]	; 0x34
 8000ed6:	e004      	b.n	8000ee2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ed8:	f001 face 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8000edc:	4603      	mov	r3, r0
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee4:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <HAL_InitTick+0xe4>)
 8000ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eea:	0c9b      	lsrs	r3, r3, #18
 8000eec:	3b01      	subs	r3, #1
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ef0:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <HAL_InitTick+0xe8>)
 8000ef2:	4a22      	ldr	r2, [pc, #136]	; (8000f7c <HAL_InitTick+0xec>)
 8000ef4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <HAL_InitTick+0xe8>)
 8000ef8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000efc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000efe:	4a1e      	ldr	r2, [pc, #120]	; (8000f78 <HAL_InitTick+0xe8>)
 8000f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f02:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f04:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <HAL_InitTick+0xe8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_InitTick+0xe8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_InitTick+0xe8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f16:	4818      	ldr	r0, [pc, #96]	; (8000f78 <HAL_InitTick+0xe8>)
 8000f18:	f002 f9e0 	bl	80032dc <HAL_TIM_Base_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d11b      	bne.n	8000f62 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f2a:	4813      	ldr	r0, [pc, #76]	; (8000f78 <HAL_InitTick+0xe8>)
 8000f2c:	f002 fa38 	bl	80033a0 <HAL_TIM_Base_Start_IT>
 8000f30:	4603      	mov	r3, r0
 8000f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d111      	bne.n	8000f62 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f3e:	2036      	movs	r0, #54	; 0x36
 8000f40:	f000 fa6a 	bl	8001418 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	d808      	bhi.n	8000f5c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	2036      	movs	r0, #54	; 0x36
 8000f50:	f000 fa46 	bl	80013e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_InitTick+0xf0>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e002      	b.n	8000f62 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3738      	adds	r7, #56	; 0x38
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	431bde83 	.word	0x431bde83
 8000f78:	20000248 	.word	0x20000248
 8000f7c:	40001000 	.word	0x40001000
 8000f80:	2000004c 	.word	0x2000004c

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <USART1_IRQHandler+0x10>)
 8000fb6:	f002 fd95 	bl	8003ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000128 	.word	0x20000128

08000fc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <TIM6_DAC_IRQHandler+0x10>)
 8000fca:	f002 fa3d 	bl	8003448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000248 	.word	0x20000248

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f006 fd26 	bl	8007a58 <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20010000 	.word	0x20010000
 8001038:	00000400 	.word	0x00000400
 800103c:	20000294 	.word	0x20000294
 8001040:	20001d88 	.word	0x20001d88

08001044 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <read_data>:
 * @return int  The read data as an integer value representing the percentage.
 *              If an error occurs or the input is out of range, the function
 *              returns 0.
 */
int read_data(UART_HandleTypeDef *huart)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    char buffer[4] = {0}; // Buffer to hold the input string (max 3 digits + null terminator)
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
    char c;
    int idx = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]

    // Read characters until a newline is received
    while (1) {
        HAL_UART_Receive(huart, (uint8_t*)&c, 1, HAL_MAX_DELAY);
 8001078:	f107 010f 	add.w	r1, r7, #15
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	2201      	movs	r2, #1
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f002 fc64 	bl	8003950 <HAL_UART_Receive>

        if (c == '\r' || c == '\n')
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	2b0d      	cmp	r3, #13
 800108c:	d024      	beq.n	80010d8 <read_data+0x70>
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	2b0a      	cmp	r3, #10
 8001092:	d021      	beq.n	80010d8 <read_data+0x70>
        {
            // Newline or carriage return detected, end of input
            break;
        }

        else if (c == '\b' && idx > 0)
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b08      	cmp	r3, #8
 8001098:	d10c      	bne.n	80010b4 <read_data+0x4c>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	2b00      	cmp	r3, #0
 800109e:	dd09      	ble.n	80010b4 <read_data+0x4c>
        {
            // Handle backspace
            idx--;
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	61fb      	str	r3, [r7, #28]
            buffer[idx] = '\0';
 80010a6:	f107 0210 	add.w	r2, r7, #16
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	4413      	add	r3, r2
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
 80010b2:	e010      	b.n	80010d6 <read_data+0x6e>
        }

        else if (c >= '0' && c <= '9' && idx < 3)
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2b2f      	cmp	r3, #47	; 0x2f
 80010b8:	d9de      	bls.n	8001078 <read_data+0x10>
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	2b39      	cmp	r3, #57	; 0x39
 80010be:	d8db      	bhi.n	8001078 <read_data+0x10>
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	dcd8      	bgt.n	8001078 <read_data+0x10>
        {
            // Valid digit, store it in the buffer
            buffer[idx++] = c;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	61fa      	str	r2, [r7, #28]
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	3320      	adds	r3, #32
 80010d0:	443b      	add	r3, r7
 80010d2:	f803 2c10 	strb.w	r2, [r3, #-16]
        HAL_UART_Receive(huart, (uint8_t*)&c, 1, HAL_MAX_DELAY);
 80010d6:	e7cf      	b.n	8001078 <read_data+0x10>
        }
    }

    // Null-terminate the input string
    buffer[idx] = '\0';
 80010d8:	f107 0210 	add.w	r2, r7, #16
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	4413      	add	r3, r2
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]

    // Convert the string to an integer
    int percentage = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]
    for (int i = 0; buffer[i] != '\0'; i++) {
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	e010      	b.n	8001110 <read_data+0xa8>
        percentage = percentage * 10 + (buffer[i] - '0');
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4619      	mov	r1, r3
 80010fa:	f107 0210 	add.w	r2, r7, #16
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	3b30      	subs	r3, #48	; 0x30
 8001106:	440b      	add	r3, r1
 8001108:	61bb      	str	r3, [r7, #24]
    for (int i = 0; buffer[i] != '\0'; i++) {
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3301      	adds	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	f107 0210 	add.w	r2, r7, #16
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	4413      	add	r3, r2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1e7      	bne.n	80010ee <read_data+0x86>
    }

    // Ensure the percentage is within 0-100
    if (percentage > 100) {
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	2b64      	cmp	r3, #100	; 0x64
 8001122:	dd01      	ble.n	8001128 <read_data+0xc0>
        percentage = 100;
 8001124:	2364      	movs	r3, #100	; 0x64
 8001126:	61bb      	str	r3, [r7, #24]
    }

    return percentage;
 8001128:	69bb      	ldr	r3, [r7, #24]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3720      	adds	r7, #32
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <transmit_string>:
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 * @param str Pointer to the null-terminated string to be transmitted.
 */
void transmit_string(UART_HandleTypeDef *huart, char *str)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
    // Loop through each character in the string
    while (*str != '\0')
 800113c:	e009      	b.n	8001152 <transmit_string+0x20>
    {
        // Transmit the character using HAL_UART_Transmit
        HAL_UART_Transmit(huart, (uint8_t *)str, 1, HAL_MAX_DELAY);
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	2201      	movs	r2, #1
 8001144:	6839      	ldr	r1, [r7, #0]
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f002 fb78 	bl	800383c <HAL_UART_Transmit>


        // Move to the next character
        str++;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	603b      	str	r3, [r7, #0]
    while (*str != '\0')
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f1      	bne.n	800113e <transmit_string+0xc>
    }

}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800119c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001168:	f7ff ff6c 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800116e:	490d      	ldr	r1, [pc, #52]	; (80011a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <LoopForever+0xe>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001184:	4c0a      	ldr	r4, [pc, #40]	; (80011b0 <LoopForever+0x16>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001192:	f006 fc67 	bl	8007a64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001196:	f7ff fb2f 	bl	80007f8 <main>

0800119a <LoopForever>:

LoopForever:
    b LoopForever
 800119a:	e7fe      	b.n	800119a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800119c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a4:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80011a8:	08008498 	.word	0x08008498
  ldr r2, =_sbss
 80011ac:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80011b0:	20001d84 	.word	0x20001d84

080011b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC1_IRQHandler>

080011b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011bc:	2300      	movs	r3, #0
 80011be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f000 f902 	bl	80013ca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c6:	200f      	movs	r0, #15
 80011c8:	f7ff fe62 	bl	8000e90 <HAL_InitTick>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	71fb      	strb	r3, [r7, #7]
 80011d6:	e001      	b.n	80011dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011d8:	f7ff fd3e 	bl	8000c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011dc:	79fb      	ldrb	r3, [r7, #7]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x20>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x24>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <HAL_IncTick+0x24>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000050 	.word	0x20000050
 800120c:	20000298 	.word	0x20000298

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_GetTick+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000298 	.word	0x20000298

08001228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff ffee 	bl	8001210 <HAL_GetTick>
 8001234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001240:	d005      	beq.n	800124e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_Delay+0x44>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4413      	add	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800124e:	bf00      	nop
 8001250:	f7ff ffde 	bl	8001210 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	429a      	cmp	r2, r3
 800125e:	d8f7      	bhi.n	8001250 <HAL_Delay+0x28>
  {
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000050 	.word	0x20000050

08001270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	db0b      	blt.n	80012fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 021f 	and.w	r2, r3, #31
 80012ec:	4907      	ldr	r1, [pc, #28]	; (800130c <__NVIC_EnableIRQ+0x38>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	2001      	movs	r0, #1
 80012f6:	fa00 f202 	lsl.w	r2, r0, r2
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	; (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff4c 	bl	8001270 <__NVIC_SetPriorityGrouping>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013f2:	f7ff ff61 	bl	80012b8 <__NVIC_GetPriorityGrouping>
 80013f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	68b9      	ldr	r1, [r7, #8]
 80013fc:	6978      	ldr	r0, [r7, #20]
 80013fe:	f7ff ffb1 	bl	8001364 <NVIC_EncodePriority>
 8001402:	4602      	mov	r2, r0
 8001404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff80 	bl	8001310 <__NVIC_SetPriority>
}
 8001410:	bf00      	nop
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff54 	bl	80012d4 <__NVIC_EnableIRQ>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d008      	beq.n	800145e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2204      	movs	r2, #4
 8001450:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e022      	b.n	80014a4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 020e 	bic.w	r2, r2, #14
 800146c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0201 	bic.w	r2, r2, #1
 800147c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f003 021c 	and.w	r2, r3, #28
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	2101      	movs	r1, #1
 800148c:	fa01 f202 	lsl.w	r2, r1, r2
 8001490:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d005      	beq.n	80014d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2204      	movs	r2, #4
 80014cc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	73fb      	strb	r3, [r7, #15]
 80014d2:	e029      	b.n	8001528 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 020e 	bic.w	r2, r2, #14
 80014e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f8:	f003 021c 	and.w	r2, r3, #28
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	2101      	movs	r1, #1
 8001502:	fa01 f202 	lsl.w	r2, r1, r2
 8001506:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	4798      	blx	r3
    }
  }
  return status;
 8001528:	7bfb      	ldrb	r3, [r7, #15]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001542:	e148      	b.n	80017d6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2101      	movs	r1, #1
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	fa01 f303 	lsl.w	r3, r1, r3
 8001550:	4013      	ands	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 813a 	beq.w	80017d0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b01      	cmp	r3, #1
 8001566:	d005      	beq.n	8001574 <HAL_GPIO_Init+0x40>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d130      	bne.n	80015d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015aa:	2201      	movs	r2, #1
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	f003 0201 	and.w	r2, r3, #1
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d017      	beq.n	8001612 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2203      	movs	r2, #3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d123      	bne.n	8001666 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	08da      	lsrs	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3208      	adds	r2, #8
 8001626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	220f      	movs	r2, #15
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	08da      	lsrs	r2, r3, #3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3208      	adds	r2, #8
 8001660:	6939      	ldr	r1, [r7, #16]
 8001662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	2203      	movs	r2, #3
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0203 	and.w	r2, r3, #3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 8094 	beq.w	80017d0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a8:	4b52      	ldr	r3, [pc, #328]	; (80017f4 <HAL_GPIO_Init+0x2c0>)
 80016aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ac:	4a51      	ldr	r2, [pc, #324]	; (80017f4 <HAL_GPIO_Init+0x2c0>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6613      	str	r3, [r2, #96]	; 0x60
 80016b4:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <HAL_GPIO_Init+0x2c0>)
 80016b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016c0:	4a4d      	ldr	r2, [pc, #308]	; (80017f8 <HAL_GPIO_Init+0x2c4>)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	3302      	adds	r3, #2
 80016c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	220f      	movs	r2, #15
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016ea:	d00d      	beq.n	8001708 <HAL_GPIO_Init+0x1d4>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a43      	ldr	r2, [pc, #268]	; (80017fc <HAL_GPIO_Init+0x2c8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d007      	beq.n	8001704 <HAL_GPIO_Init+0x1d0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a42      	ldr	r2, [pc, #264]	; (8001800 <HAL_GPIO_Init+0x2cc>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d101      	bne.n	8001700 <HAL_GPIO_Init+0x1cc>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e004      	b.n	800170a <HAL_GPIO_Init+0x1d6>
 8001700:	2307      	movs	r3, #7
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0x1d6>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_GPIO_Init+0x1d6>
 8001708:	2300      	movs	r3, #0
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	f002 0203 	and.w	r2, r2, #3
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	4093      	lsls	r3, r2
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800171a:	4937      	ldr	r1, [pc, #220]	; (80017f8 <HAL_GPIO_Init+0x2c4>)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001728:	4b36      	ldr	r3, [pc, #216]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800174c:	4a2d      	ldr	r2, [pc, #180]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001752:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001776:	4a23      	ldr	r2, [pc, #140]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f47f aeaf 	bne.w	8001544 <HAL_GPIO_Init+0x10>
  }
}
 80017e6:	bf00      	nop
 80017e8:	bf00      	nop
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010000 	.word	0x40010000
 80017fc:	48000400 	.word	0x48000400
 8001800:	48000800 	.word	0x48000800
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001818:	787b      	ldrb	r3, [r7, #1]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001824:	e002      	b.n	800182c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a04      	ldr	r2, [pc, #16]	; (8001854 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40007000 	.word	0x40007000

08001858 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <HAL_PWREx_GetVoltageRange+0x18>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40007000 	.word	0x40007000

08001874 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001882:	d130      	bne.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001884:	4b23      	ldr	r3, [pc, #140]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800188c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001890:	d038      	beq.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800189a:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2232      	movs	r2, #50	; 0x32
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	4a1b      	ldr	r2, [pc, #108]	; (800191c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0c9b      	lsrs	r3, r3, #18
 80018b4:	3301      	adds	r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018b8:	e002      	b.n	80018c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3b01      	subs	r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018cc:	d102      	bne.n	80018d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f2      	bne.n	80018ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018e0:	d110      	bne.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e00f      	b.n	8001906 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f2:	d007      	beq.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018fc:	4a05      	ldr	r2, [pc, #20]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001902:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40007000 	.word	0x40007000
 8001918:	20000048 	.word	0x20000048
 800191c:	431bde83 	.word	0x431bde83

08001920 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	f000 bc02 	b.w	8002138 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001934:	4b96      	ldr	r3, [pc, #600]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800193e:	4b94      	ldr	r3, [pc, #592]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80e4 	beq.w	8001b1e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <HAL_RCC_OscConfig+0x4c>
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2b0c      	cmp	r3, #12
 8001960:	f040 808b 	bne.w	8001a7a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b01      	cmp	r3, #1
 8001968:	f040 8087 	bne.w	8001a7a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800196c:	4b88      	ldr	r3, [pc, #544]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_OscConfig+0x64>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e3d9      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1a      	ldr	r2, [r3, #32]
 8001988:	4b81      	ldr	r3, [pc, #516]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	d004      	beq.n	800199e <HAL_RCC_OscConfig+0x7e>
 8001994:	4b7e      	ldr	r3, [pc, #504]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800199c:	e005      	b.n	80019aa <HAL_RCC_OscConfig+0x8a>
 800199e:	4b7c      	ldr	r3, [pc, #496]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d223      	bcs.n	80019f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fdbe 	bl	8002534 <RCC_SetFlashLatencyFromMSIRange>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e3ba      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c2:	4b73      	ldr	r3, [pc, #460]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a72      	ldr	r2, [pc, #456]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019c8:	f043 0308 	orr.w	r3, r3, #8
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b70      	ldr	r3, [pc, #448]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	496d      	ldr	r1, [pc, #436]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019e0:	4b6b      	ldr	r3, [pc, #428]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	4968      	ldr	r1, [pc, #416]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
 80019f4:	e025      	b.n	8001a42 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f6:	4b66      	ldr	r3, [pc, #408]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a65      	ldr	r2, [pc, #404]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019fc:	f043 0308 	orr.w	r3, r3, #8
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b63      	ldr	r3, [pc, #396]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4960      	ldr	r1, [pc, #384]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a14:	4b5e      	ldr	r3, [pc, #376]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	495b      	ldr	r1, [pc, #364]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fd7e 	bl	8002534 <RCC_SetFlashLatencyFromMSIRange>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e37a      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a42:	f000 fc81 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4b51      	ldr	r3, [pc, #324]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	4950      	ldr	r1, [pc, #320]	; (8001b94 <HAL_RCC_OscConfig+0x274>)
 8001a54:	5ccb      	ldrb	r3, [r1, r3]
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	4a4e      	ldr	r2, [pc, #312]	; (8001b98 <HAL_RCC_OscConfig+0x278>)
 8001a60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a62:	4b4e      	ldr	r3, [pc, #312]	; (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fa12 	bl	8000e90 <HAL_InitTick>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d052      	beq.n	8001b1c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	e35e      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d032      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a82:	4b43      	ldr	r3, [pc, #268]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a42      	ldr	r2, [pc, #264]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fbbf 	bl	8001210 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a96:	f7ff fbbb 	bl	8001210 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e347      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aa8:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab4:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a35      	ldr	r2, [pc, #212]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001aba:	f043 0308 	orr.w	r3, r3, #8
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b33      	ldr	r3, [pc, #204]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4930      	ldr	r1, [pc, #192]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ad2:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	492b      	ldr	r1, [pc, #172]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	604b      	str	r3, [r1, #4]
 8001ae6:	e01a      	b.n	8001b1e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ae8:	4b29      	ldr	r3, [pc, #164]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a28      	ldr	r2, [pc, #160]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001aee:	f023 0301 	bic.w	r3, r3, #1
 8001af2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fb8c 	bl	8001210 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001afc:	f7ff fb88 	bl	8001210 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e314      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x1dc>
 8001b1a:	e000      	b.n	8001b1e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d073      	beq.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_OscConfig+0x21c>
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	d10e      	bne.n	8001b54 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d10b      	bne.n	8001b54 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d063      	beq.n	8001c10 <HAL_RCC_OscConfig+0x2f0>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d15f      	bne.n	8001c10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e2f1      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5c:	d106      	bne.n	8001b6c <HAL_RCC_OscConfig+0x24c>
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a0b      	ldr	r2, [pc, #44]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e025      	b.n	8001bb8 <HAL_RCC_OscConfig+0x298>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b74:	d114      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x280>
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a02      	ldr	r2, [pc, #8]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e013      	b.n	8001bb8 <HAL_RCC_OscConfig+0x298>
 8001b90:	40021000 	.word	0x40021000
 8001b94:	0800840c 	.word	0x0800840c
 8001b98:	20000048 	.word	0x20000048
 8001b9c:	2000004c 	.word	0x2000004c
 8001ba0:	4ba0      	ldr	r3, [pc, #640]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a9f      	ldr	r2, [pc, #636]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b9d      	ldr	r3, [pc, #628]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a9c      	ldr	r2, [pc, #624]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d013      	beq.n	8001be8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fb26 	bl	8001210 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fb22 	bl	8001210 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e2ae      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bda:	4b92      	ldr	r3, [pc, #584]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x2a8>
 8001be6:	e014      	b.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff fb12 	bl	8001210 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fb0e 	bl	8001210 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	; 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e29a      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c02:	4b88      	ldr	r3, [pc, #544]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x2d0>
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d060      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_OscConfig+0x310>
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d119      	bne.n	8001c5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d116      	bne.n	8001c5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c30:	4b7c      	ldr	r3, [pc, #496]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_OscConfig+0x328>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e277      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b76      	ldr	r3, [pc, #472]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	061b      	lsls	r3, r3, #24
 8001c56:	4973      	ldr	r1, [pc, #460]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c5c:	e040      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d023      	beq.n	8001cae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c66:	4b6f      	ldr	r3, [pc, #444]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a6e      	ldr	r2, [pc, #440]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7ff facd 	bl	8001210 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7a:	f7ff fac9 	bl	8001210 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e255      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c8c:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b62      	ldr	r3, [pc, #392]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	061b      	lsls	r3, r3, #24
 8001ca6:	495f      	ldr	r1, [pc, #380]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
 8001cac:	e018      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cae:	4b5d      	ldr	r3, [pc, #372]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a5c      	ldr	r2, [pc, #368]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff faa9 	bl	8001210 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff faa5 	bl	8001210 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e231      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cd4:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d03c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01c      	beq.n	8001d2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf4:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cfa:	4a4a      	ldr	r2, [pc, #296]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d04:	f7ff fa84 	bl	8001210 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fa80 	bl	8001210 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e20c      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d1e:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0ef      	beq.n	8001d0c <HAL_RCC_OscConfig+0x3ec>
 8001d2c:	e01b      	b.n	8001d66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d34:	4a3b      	ldr	r2, [pc, #236]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d36:	f023 0301 	bic.w	r3, r3, #1
 8001d3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fa67 	bl	8001210 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d46:	f7ff fa63 	bl	8001210 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e1ef      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d58:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1ef      	bne.n	8001d46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80a6 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d74:	2300      	movs	r3, #0
 8001d76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d78:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10d      	bne.n	8001da0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d84:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	4a26      	ldr	r2, [pc, #152]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da0:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d118      	bne.n	8001dde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db8:	f7ff fa2a 	bl	8001210 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc0:	f7ff fa26 	bl	8001210 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1b2      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d108      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4d8>
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001df6:	e029      	b.n	8001e4c <HAL_RCC_OscConfig+0x52c>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b05      	cmp	r3, #5
 8001dfe:	d115      	bne.n	8001e2c <HAL_RCC_OscConfig+0x50c>
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e06:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e16:	4a03      	ldr	r2, [pc, #12]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e20:	e014      	b.n	8001e4c <HAL_RCC_OscConfig+0x52c>
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	4b9a      	ldr	r3, [pc, #616]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	4a99      	ldr	r2, [pc, #612]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e3c:	4b96      	ldr	r3, [pc, #600]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	4a95      	ldr	r2, [pc, #596]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d016      	beq.n	8001e82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7ff f9dc 	bl	8001210 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5c:	f7ff f9d8 	bl	8001210 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e162      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e72:	4b89      	ldr	r3, [pc, #548]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ed      	beq.n	8001e5c <HAL_RCC_OscConfig+0x53c>
 8001e80:	e015      	b.n	8001eae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7ff f9c5 	bl	8001210 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7ff f9c1 	bl	8001210 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e14b      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea0:	4b7d      	ldr	r3, [pc, #500]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ed      	bne.n	8001e8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eae:	7ffb      	ldrb	r3, [r7, #31]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b78      	ldr	r3, [pc, #480]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	4a77      	ldr	r2, [pc, #476]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d03c      	beq.n	8001f46 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01c      	beq.n	8001f0e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ed4:	4b70      	ldr	r3, [pc, #448]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eda:	4a6f      	ldr	r2, [pc, #444]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7ff f994 	bl	8001210 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eec:	f7ff f990 	bl	8001210 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e11c      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001efe:	4b66      	ldr	r3, [pc, #408]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ef      	beq.n	8001eec <HAL_RCC_OscConfig+0x5cc>
 8001f0c:	e01b      	b.n	8001f46 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f0e:	4b62      	ldr	r3, [pc, #392]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f14:	4a60      	ldr	r2, [pc, #384]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1e:	f7ff f977 	bl	8001210 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f26:	f7ff f973 	bl	8001210 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0ff      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f38:	4b57      	ldr	r3, [pc, #348]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ef      	bne.n	8001f26 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80f3 	beq.w	8002136 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	f040 80c9 	bne.w	80020ec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f5a:	4b4f      	ldr	r3, [pc, #316]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f003 0203 	and.w	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d12c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d123      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d113      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001faa:	085b      	lsrs	r3, r3, #1
 8001fac:	3b01      	subs	r3, #1
 8001fae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d109      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d06b      	beq.n	80020a0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b0c      	cmp	r3, #12
 8001fcc:	d062      	beq.n	8002094 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fce:	4b32      	ldr	r3, [pc, #200]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0ac      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fde:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a2d      	ldr	r2, [pc, #180]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fea:	f7ff f911 	bl	8001210 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7ff f90d 	bl	8001210 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e099      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002004:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002010:	4b21      	ldr	r3, [pc, #132]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	4b21      	ldr	r3, [pc, #132]	; (800209c <HAL_RCC_OscConfig+0x77c>)
 8002016:	4013      	ands	r3, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002020:	3a01      	subs	r2, #1
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	4311      	orrs	r1, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800202a:	0212      	lsls	r2, r2, #8
 800202c:	4311      	orrs	r1, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002032:	0852      	lsrs	r2, r2, #1
 8002034:	3a01      	subs	r2, #1
 8002036:	0552      	lsls	r2, r2, #21
 8002038:	4311      	orrs	r1, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800203e:	0852      	lsrs	r2, r2, #1
 8002040:	3a01      	subs	r2, #1
 8002042:	0652      	lsls	r2, r2, #25
 8002044:	4311      	orrs	r1, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800204a:	06d2      	lsls	r2, r2, #27
 800204c:	430a      	orrs	r2, r1
 800204e:	4912      	ldr	r1, [pc, #72]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8002050:	4313      	orrs	r3, r2
 8002052:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002054:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 800205a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800205e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002060:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4a0c      	ldr	r2, [pc, #48]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8002066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800206a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800206c:	f7ff f8d0 	bl	8001210 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002074:	f7ff f8cc 	bl	8001210 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e058      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002092:	e050      	b.n	8002136 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e04f      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
 8002098:	40021000 	.word	0x40021000
 800209c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d144      	bne.n	8002136 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020ac:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a23      	ldr	r2, [pc, #140]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020b8:	4b21      	ldr	r3, [pc, #132]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a20      	ldr	r2, [pc, #128]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 80020be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020c4:	f7ff f8a4 	bl	8001210 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020cc:	f7ff f8a0 	bl	8001210 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e02c      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020de:	4b18      	ldr	r3, [pc, #96]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x7ac>
 80020ea:	e024      	b.n	8002136 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d01f      	beq.n	8002132 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f2:	4b13      	ldr	r3, [pc, #76]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 80020f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7ff f887 	bl	8001210 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002106:	f7ff f883 	bl	8001210 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e00f      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f0      	bne.n	8002106 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	4905      	ldr	r1, [pc, #20]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_RCC_OscConfig+0x824>)
 800212c:	4013      	ands	r3, r2
 800212e:	60cb      	str	r3, [r1, #12]
 8002130:	e001      	b.n	8002136 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	feeefffc 	.word	0xfeeefffc

08002148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0e7      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800215c:	4b75      	ldr	r3, [pc, #468]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d910      	bls.n	800218c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b72      	ldr	r3, [pc, #456]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 0207 	bic.w	r2, r3, #7
 8002172:	4970      	ldr	r1, [pc, #448]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b6e      	ldr	r3, [pc, #440]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0cf      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d010      	beq.n	80021ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	4b66      	ldr	r3, [pc, #408]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d908      	bls.n	80021ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a8:	4b63      	ldr	r3, [pc, #396]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4960      	ldr	r1, [pc, #384]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d04c      	beq.n	8002260 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ce:	4b5a      	ldr	r3, [pc, #360]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d121      	bne.n	800221e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0a6      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e6:	4b54      	ldr	r3, [pc, #336]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d115      	bne.n	800221e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e09a      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021fe:	4b4e      	ldr	r3, [pc, #312]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e08e      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800220e:	4b4a      	ldr	r3, [pc, #296]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e086      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800221e:	4b46      	ldr	r3, [pc, #280]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f023 0203 	bic.w	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4943      	ldr	r1, [pc, #268]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	4313      	orrs	r3, r2
 800222e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002230:	f7fe ffee 	bl	8001210 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	e00a      	b.n	800224e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7fe ffea 	bl	8001210 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e06e      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 020c 	and.w	r2, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d1eb      	bne.n	8002238 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d010      	beq.n	800228e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	4b31      	ldr	r3, [pc, #196]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002278:	429a      	cmp	r2, r3
 800227a:	d208      	bcs.n	800228e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800227c:	4b2e      	ldr	r3, [pc, #184]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	492b      	ldr	r1, [pc, #172]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800228e:	4b29      	ldr	r3, [pc, #164]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d210      	bcs.n	80022be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 0207 	bic.w	r2, r3, #7
 80022a4:	4923      	ldr	r1, [pc, #140]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e036      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	4918      	ldr	r1, [pc, #96]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4910      	ldr	r1, [pc, #64]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022fc:	f000 f824 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	490b      	ldr	r1, [pc, #44]	; (800233c <HAL_RCC_ClockConfig+0x1f4>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
 8002318:	4a09      	ldr	r2, [pc, #36]	; (8002340 <HAL_RCC_ClockConfig+0x1f8>)
 800231a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <HAL_RCC_ClockConfig+0x1fc>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe fdb5 	bl	8000e90 <HAL_InitTick>
 8002326:	4603      	mov	r3, r0
 8002328:	72fb      	strb	r3, [r7, #11]

  return status;
 800232a:	7afb      	ldrb	r3, [r7, #11]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40022000 	.word	0x40022000
 8002338:	40021000 	.word	0x40021000
 800233c:	0800840c 	.word	0x0800840c
 8002340:	20000048 	.word	0x20000048
 8002344:	2000004c 	.word	0x2000004c

08002348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002356:	4b3e      	ldr	r3, [pc, #248]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002360:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x34>
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d121      	bne.n	80023ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d11e      	bne.n	80023ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800237c:	4b34      	ldr	r3, [pc, #208]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d107      	bne.n	8002398 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002388:	4b31      	ldr	r3, [pc, #196]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 800238a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	e005      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002398:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023a4:	4a2b      	ldr	r2, [pc, #172]	; (8002454 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10d      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d102      	bne.n	80023c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <HAL_RCC_GetSysClockFreq+0x110>)
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	e004      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023cc:	4b23      	ldr	r3, [pc, #140]	; (800245c <HAL_RCC_GetSysClockFreq+0x114>)
 80023ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	2b0c      	cmp	r3, #12
 80023d4:	d134      	bne.n	8002440 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0xa6>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d003      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0xac>
 80023ec:	e005      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <HAL_RCC_GetSysClockFreq+0x110>)
 80023f0:	617b      	str	r3, [r7, #20]
      break;
 80023f2:	e005      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_RCC_GetSysClockFreq+0x114>)
 80023f6:	617b      	str	r3, [r7, #20]
      break;
 80023f8:	e002      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	617b      	str	r3, [r7, #20]
      break;
 80023fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	3301      	adds	r3, #1
 800240c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	fb03 f202 	mul.w	r2, r3, r2
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	0e5b      	lsrs	r3, r3, #25
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	3301      	adds	r3, #1
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	fbb2 f3f3 	udiv	r3, r2, r3
 800243e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002440:	69bb      	ldr	r3, [r7, #24]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	08008424 	.word	0x08008424
 8002458:	00f42400 	.word	0x00f42400
 800245c:	007a1200 	.word	0x007a1200

08002460 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_RCC_GetHCLKFreq+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000048 	.word	0x20000048

08002478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800247c:	f7ff fff0 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	4904      	ldr	r1, [pc, #16]	; (80024a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000
 80024a0:	0800841c 	.word	0x0800841c

080024a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024a8:	f7ff ffda 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	0adb      	lsrs	r3, r3, #11
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4904      	ldr	r1, [pc, #16]	; (80024cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	0800841c 	.word	0x0800841c

080024d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	220f      	movs	r2, #15
 80024de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_RCC_GetClockConfig+0x5c>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0203 	and.w	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <HAL_RCC_GetClockConfig+0x5c>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <HAL_RCC_GetClockConfig+0x5c>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_GetClockConfig+0x5c>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	08db      	lsrs	r3, r3, #3
 800250a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_RCC_GetClockConfig+0x60>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0207 	and.w	r2, r3, #7
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	601a      	str	r2, [r3, #0]
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	40022000 	.word	0x40022000

08002534 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800253c:	2300      	movs	r3, #0
 800253e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002540:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800254c:	f7ff f984 	bl	8001858 <HAL_PWREx_GetVoltageRange>
 8002550:	6178      	str	r0, [r7, #20]
 8002552:	e014      	b.n	800257e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	4a24      	ldr	r2, [pc, #144]	; (80025ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800255a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255e:	6593      	str	r3, [r2, #88]	; 0x58
 8002560:	4b22      	ldr	r3, [pc, #136]	; (80025ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800256c:	f7ff f974 	bl	8001858 <HAL_PWREx_GetVoltageRange>
 8002570:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002572:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002584:	d10b      	bne.n	800259e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b80      	cmp	r3, #128	; 0x80
 800258a:	d919      	bls.n	80025c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2ba0      	cmp	r3, #160	; 0xa0
 8002590:	d902      	bls.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002592:	2302      	movs	r3, #2
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	e013      	b.n	80025c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002598:	2301      	movs	r3, #1
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	e010      	b.n	80025c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b80      	cmp	r3, #128	; 0x80
 80025a2:	d902      	bls.n	80025aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025a4:	2303      	movs	r3, #3
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	e00a      	b.n	80025c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b80      	cmp	r3, #128	; 0x80
 80025ae:	d102      	bne.n	80025b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025b0:	2302      	movs	r3, #2
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	e004      	b.n	80025c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b70      	cmp	r3, #112	; 0x70
 80025ba:	d101      	bne.n	80025c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025bc:	2301      	movs	r3, #1
 80025be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 0207 	bic.w	r2, r3, #7
 80025c8:	4909      	ldr	r1, [pc, #36]	; (80025f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025d0:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d001      	beq.n	80025e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40022000 	.word	0x40022000

080025f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025fc:	2300      	movs	r3, #0
 80025fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002600:	2300      	movs	r3, #0
 8002602:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260c:	2b00      	cmp	r3, #0
 800260e:	d031      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002614:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002618:	d01a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800261a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800261e:	d814      	bhi.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002620:	2b00      	cmp	r3, #0
 8002622:	d009      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002624:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002628:	d10f      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800262a:	4b5d      	ldr	r3, [pc, #372]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	4a5c      	ldr	r2, [pc, #368]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002636:	e00c      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3304      	adds	r3, #4
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f9de 	bl	8002a00 <RCCEx_PLLSAI1_Config>
 8002644:	4603      	mov	r3, r0
 8002646:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002648:	e003      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	74fb      	strb	r3, [r7, #19]
      break;
 800264e:	e000      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10b      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002658:	4b51      	ldr	r3, [pc, #324]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002666:	494e      	ldr	r1, [pc, #312]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800266e:	e001      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002670:	7cfb      	ldrb	r3, [r7, #19]
 8002672:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 809e 	beq.w	80027be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002686:	4b46      	ldr	r3, [pc, #280]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002696:	2300      	movs	r3, #0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00d      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269c:	4b40      	ldr	r3, [pc, #256]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	4a3f      	ldr	r2, [pc, #252]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a6:	6593      	str	r3, [r2, #88]	; 0x58
 80026a8:	4b3d      	ldr	r3, [pc, #244]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b4:	2301      	movs	r3, #1
 80026b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026b8:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a39      	ldr	r2, [pc, #228]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026c4:	f7fe fda4 	bl	8001210 <HAL_GetTick>
 80026c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026ca:	e009      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026cc:	f7fe fda0 	bl	8001210 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d902      	bls.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	74fb      	strb	r3, [r7, #19]
        break;
 80026de:	e005      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026e0:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ef      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d15a      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026f2:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01e      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	429a      	cmp	r2, r3
 800270c:	d019      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800270e:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002718:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800271a:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002720:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800272a:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800272c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002730:	4a1b      	ldr	r2, [pc, #108]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800273a:	4a19      	ldr	r2, [pc, #100]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d016      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7fe fd60 	bl	8001210 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002752:	e00b      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7fe fd5c 	bl	8001210 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d902      	bls.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	74fb      	strb	r3, [r7, #19]
            break;
 800276a:	e006      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0ec      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800277a:	7cfb      	ldrb	r3, [r7, #19]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10b      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278e:	4904      	ldr	r1, [pc, #16]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002796:	e009      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002798:	7cfb      	ldrb	r3, [r7, #19]
 800279a:	74bb      	strb	r3, [r7, #18]
 800279c:	e006      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ac:	7c7b      	ldrb	r3, [r7, #17]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d105      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b2:	4b8a      	ldr	r3, [pc, #552]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b6:	4a89      	ldr	r2, [pc, #548]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027ca:	4b84      	ldr	r3, [pc, #528]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	f023 0203 	bic.w	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4980      	ldr	r1, [pc, #512]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027ec:	4b7b      	ldr	r3, [pc, #492]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	f023 020c 	bic.w	r2, r3, #12
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	4978      	ldr	r1, [pc, #480]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0320 	and.w	r3, r3, #32
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800280e:	4b73      	ldr	r3, [pc, #460]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002814:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	496f      	ldr	r1, [pc, #444]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002830:	4b6a      	ldr	r3, [pc, #424]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	4967      	ldr	r1, [pc, #412]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002852:	4b62      	ldr	r3, [pc, #392]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002858:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	495e      	ldr	r1, [pc, #376]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002874:	4b59      	ldr	r3, [pc, #356]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	4956      	ldr	r1, [pc, #344]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002896:	4b51      	ldr	r3, [pc, #324]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	494d      	ldr	r1, [pc, #308]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d028      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028b8:	4b48      	ldr	r3, [pc, #288]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4945      	ldr	r1, [pc, #276]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028d6:	d106      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d8:	4b40      	ldr	r3, [pc, #256]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4a3f      	ldr	r2, [pc, #252]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028e2:	60d3      	str	r3, [r2, #12]
 80028e4:	e011      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028ee:	d10c      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3304      	adds	r3, #4
 80028f4:	2101      	movs	r1, #1
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f882 	bl	8002a00 <RCCEx_PLLSAI1_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002906:	7cfb      	ldrb	r3, [r7, #19]
 8002908:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d028      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002916:	4b31      	ldr	r3, [pc, #196]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002924:	492d      	ldr	r1, [pc, #180]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002930:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002934:	d106      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002936:	4b29      	ldr	r3, [pc, #164]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	4a28      	ldr	r2, [pc, #160]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800293c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002940:	60d3      	str	r3, [r2, #12]
 8002942:	e011      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002948:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800294c:	d10c      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3304      	adds	r3, #4
 8002952:	2101      	movs	r1, #1
 8002954:	4618      	mov	r0, r3
 8002956:	f000 f853 	bl	8002a00 <RCCEx_PLLSAI1_Config>
 800295a:	4603      	mov	r3, r0
 800295c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800295e:	7cfb      	ldrb	r3, [r7, #19]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01c      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	4916      	ldr	r1, [pc, #88]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002992:	d10c      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3304      	adds	r3, #4
 8002998:	2102      	movs	r1, #2
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f830 	bl	8002a00 <RCCEx_PLLSAI1_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029a4:	7cfb      	ldrb	r3, [r7, #19]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80029aa:	7cfb      	ldrb	r3, [r7, #19]
 80029ac:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029ba:	4b08      	ldr	r3, [pc, #32]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c8:	4904      	ldr	r1, [pc, #16]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000

080029e0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80029ea:	f043 0304 	orr.w	r3, r3, #4
 80029ee:	6013      	str	r3, [r2, #0]
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000

08002a00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a0e:	4b74      	ldr	r3, [pc, #464]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d018      	beq.n	8002a4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a1a:	4b71      	ldr	r3, [pc, #452]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f003 0203 	and.w	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d10d      	bne.n	8002a46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a32:	4b6b      	ldr	r3, [pc, #428]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
       ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d047      	beq.n	8002ad6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
 8002a4a:	e044      	b.n	8002ad6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d018      	beq.n	8002a86 <RCCEx_PLLSAI1_Config+0x86>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d825      	bhi.n	8002aa4 <RCCEx_PLLSAI1_Config+0xa4>
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d002      	beq.n	8002a62 <RCCEx_PLLSAI1_Config+0x62>
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d009      	beq.n	8002a74 <RCCEx_PLLSAI1_Config+0x74>
 8002a60:	e020      	b.n	8002aa4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a62:	4b5f      	ldr	r3, [pc, #380]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d11d      	bne.n	8002aaa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a72:	e01a      	b.n	8002aaa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a74:	4b5a      	ldr	r3, [pc, #360]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d116      	bne.n	8002aae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a84:	e013      	b.n	8002aae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a86:	4b56      	ldr	r3, [pc, #344]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10f      	bne.n	8002ab2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a92:	4b53      	ldr	r3, [pc, #332]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aa2:	e006      	b.n	8002ab2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa8:	e004      	b.n	8002ab4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aaa:	bf00      	nop
 8002aac:	e002      	b.n	8002ab4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aae:	bf00      	nop
 8002ab0:	e000      	b.n	8002ab4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ab2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002aba:	4b49      	ldr	r3, [pc, #292]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6819      	ldr	r1, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	430b      	orrs	r3, r1
 8002ad0:	4943      	ldr	r1, [pc, #268]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d17c      	bne.n	8002bd6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002adc:	4b40      	ldr	r3, [pc, #256]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a3f      	ldr	r2, [pc, #252]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae8:	f7fe fb92 	bl	8001210 <HAL_GetTick>
 8002aec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002aee:	e009      	b.n	8002b04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002af0:	f7fe fb8e 	bl	8001210 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d902      	bls.n	8002b04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	73fb      	strb	r3, [r7, #15]
        break;
 8002b02:	e005      	b.n	8002b10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b04:	4b36      	ldr	r3, [pc, #216]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1ef      	bne.n	8002af0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d15f      	bne.n	8002bd6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d110      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b1c:	4b30      	ldr	r3, [pc, #192]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002b24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6892      	ldr	r2, [r2, #8]
 8002b2c:	0211      	lsls	r1, r2, #8
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68d2      	ldr	r2, [r2, #12]
 8002b32:	06d2      	lsls	r2, r2, #27
 8002b34:	430a      	orrs	r2, r1
 8002b36:	492a      	ldr	r1, [pc, #168]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	610b      	str	r3, [r1, #16]
 8002b3c:	e027      	b.n	8002b8e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d112      	bne.n	8002b6a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b44:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6892      	ldr	r2, [r2, #8]
 8002b54:	0211      	lsls	r1, r2, #8
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6912      	ldr	r2, [r2, #16]
 8002b5a:	0852      	lsrs	r2, r2, #1
 8002b5c:	3a01      	subs	r2, #1
 8002b5e:	0552      	lsls	r2, r2, #21
 8002b60:	430a      	orrs	r2, r1
 8002b62:	491f      	ldr	r1, [pc, #124]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	610b      	str	r3, [r1, #16]
 8002b68:	e011      	b.n	8002b8e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6892      	ldr	r2, [r2, #8]
 8002b7a:	0211      	lsls	r1, r2, #8
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6952      	ldr	r2, [r2, #20]
 8002b80:	0852      	lsrs	r2, r2, #1
 8002b82:	3a01      	subs	r2, #1
 8002b84:	0652      	lsls	r2, r2, #25
 8002b86:	430a      	orrs	r2, r1
 8002b88:	4915      	ldr	r1, [pc, #84]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b8e:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a13      	ldr	r2, [pc, #76]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9a:	f7fe fb39 	bl	8001210 <HAL_GetTick>
 8002b9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ba0:	e009      	b.n	8002bb6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ba2:	f7fe fb35 	bl	8001210 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d902      	bls.n	8002bb6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	73fb      	strb	r3, [r7, #15]
          break;
 8002bb4:	e005      	b.n	8002bc2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0ef      	beq.n	8002ba2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d106      	bne.n	8002bd6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	4903      	ldr	r1, [pc, #12]	; (8002be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000

08002be4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e095      	b.n	8002d22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d108      	bne.n	8002c10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c06:	d009      	beq.n	8002c1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	61da      	str	r2, [r3, #28]
 8002c0e:	e005      	b.n	8002c1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fe f836 	bl	8000ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c5c:	d902      	bls.n	8002c64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	e002      	b.n	8002c6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c72:	d007      	beq.n	8002c84 <HAL_SPI_Init+0xa0>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c7c:	d002      	beq.n	8002c84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc6:	ea42 0103 	orr.w	r1, r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	0c1b      	lsrs	r3, r3, #16
 8002ce0:	f003 0204 	and.w	r2, r3, #4
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d00:	ea42 0103 	orr.w	r1, r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b088      	sub	sp, #32
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	4613      	mov	r3, r2
 8002d38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_SPI_Transmit+0x22>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e15f      	b.n	800300c <HAL_SPI_Transmit+0x2e2>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d54:	f7fe fa5c 	bl	8001210 <HAL_GetTick>
 8002d58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d002      	beq.n	8002d70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d6e:	e148      	b.n	8003002 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_SPI_Transmit+0x52>
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d80:	e13f      	b.n	8003002 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2203      	movs	r2, #3
 8002d86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	88fa      	ldrh	r2, [r7, #6]
 8002d9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	88fa      	ldrh	r2, [r7, #6]
 8002da0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dcc:	d10f      	bne.n	8002dee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ddc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d007      	beq.n	8002e0c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e14:	d94f      	bls.n	8002eb6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_SPI_Transmit+0xfa>
 8002e1e:	8afb      	ldrh	r3, [r7, #22]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d142      	bne.n	8002eaa <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	881a      	ldrh	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	1c9a      	adds	r2, r3, #2
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e48:	e02f      	b.n	8002eaa <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d112      	bne.n	8002e7e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	881a      	ldrh	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	1c9a      	adds	r2, r3, #2
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e7c:	e015      	b.n	8002eaa <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e7e:	f7fe f9c7 	bl	8001210 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d803      	bhi.n	8002e96 <HAL_SPI_Transmit+0x16c>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d102      	bne.n	8002e9c <HAL_SPI_Transmit+0x172>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d106      	bne.n	8002eaa <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002ea8:	e0ab      	b.n	8003002 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ca      	bne.n	8002e4a <HAL_SPI_Transmit+0x120>
 8002eb4:	e080      	b.n	8002fb8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_SPI_Transmit+0x19a>
 8002ebe:	8afb      	ldrh	r3, [r7, #22]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d174      	bne.n	8002fae <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d912      	bls.n	8002ef4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	881a      	ldrh	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	1c9a      	adds	r2, r3, #2
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b02      	subs	r3, #2
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ef2:	e05c      	b.n	8002fae <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	330c      	adds	r3, #12
 8002efe:	7812      	ldrb	r2, [r2, #0]
 8002f00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f1a:	e048      	b.n	8002fae <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d12b      	bne.n	8002f82 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d912      	bls.n	8002f5a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	881a      	ldrh	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	1c9a      	adds	r2, r3, #2
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b02      	subs	r3, #2
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f58:	e029      	b.n	8002fae <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	330c      	adds	r3, #12
 8002f64:	7812      	ldrb	r2, [r2, #0]
 8002f66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f80:	e015      	b.n	8002fae <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f82:	f7fe f945 	bl	8001210 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d803      	bhi.n	8002f9a <HAL_SPI_Transmit+0x270>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d102      	bne.n	8002fa0 <HAL_SPI_Transmit+0x276>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d106      	bne.n	8002fae <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002fac:	e029      	b.n	8003002 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1b1      	bne.n	8002f1c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	6839      	ldr	r1, [r7, #0]
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f947 	bl	8003250 <SPI_EndRxTxTransaction>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	77fb      	strb	r3, [r7, #31]
 8002ff8:	e003      	b.n	8003002 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800300a:	7ffb      	ldrb	r3, [r7, #31]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3720      	adds	r7, #32
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	4613      	mov	r3, r2
 8003022:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003024:	f7fe f8f4 	bl	8001210 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	4413      	add	r3, r2
 8003032:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003034:	f7fe f8ec 	bl	8001210 <HAL_GetTick>
 8003038:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800303a:	4b39      	ldr	r3, [pc, #228]	; (8003120 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	015b      	lsls	r3, r3, #5
 8003040:	0d1b      	lsrs	r3, r3, #20
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	fb02 f303 	mul.w	r3, r2, r3
 8003048:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800304a:	e054      	b.n	80030f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d050      	beq.n	80030f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003054:	f7fe f8dc 	bl	8001210 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	429a      	cmp	r2, r3
 8003062:	d902      	bls.n	800306a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d13d      	bne.n	80030e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003078:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003082:	d111      	bne.n	80030a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800308c:	d004      	beq.n	8003098 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003096:	d107      	bne.n	80030a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b0:	d10f      	bne.n	80030d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e017      	b.n	8003116 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4013      	ands	r3, r2
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	429a      	cmp	r2, r3
 8003104:	bf0c      	ite	eq
 8003106:	2301      	moveq	r3, #1
 8003108:	2300      	movne	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	429a      	cmp	r2, r3
 8003112:	d19b      	bne.n	800304c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3720      	adds	r7, #32
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000048 	.word	0x20000048

08003124 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003136:	f7fe f86b 	bl	8001210 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	4413      	add	r3, r2
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003146:	f7fe f863 	bl	8001210 <HAL_GetTick>
 800314a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	330c      	adds	r3, #12
 8003152:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003154:	4b3d      	ldr	r3, [pc, #244]	; (800324c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	00da      	lsls	r2, r3, #3
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	0d1b      	lsrs	r3, r3, #20
 8003164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800316c:	e060      	b.n	8003230 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003174:	d107      	bne.n	8003186 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d104      	bne.n	8003186 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003184:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318c:	d050      	beq.n	8003230 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800318e:	f7fe f83f 	bl	8001210 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319a:	429a      	cmp	r2, r3
 800319c:	d902      	bls.n	80031a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d13d      	bne.n	8003220 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031bc:	d111      	bne.n	80031e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c6:	d004      	beq.n	80031d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d0:	d107      	bne.n	80031e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ea:	d10f      	bne.n	800320c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800320a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e010      	b.n	8003242 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	3b01      	subs	r3, #1
 800322e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4013      	ands	r3, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	d196      	bne.n	800316e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3728      	adds	r7, #40	; 0x28
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000048 	.word	0x20000048

08003250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af02      	add	r7, sp, #8
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2200      	movs	r2, #0
 8003264:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f7ff ff5b 	bl	8003124 <SPI_WaitFifoStateUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e027      	b.n	80032d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2200      	movs	r2, #0
 800328c:	2180      	movs	r1, #128	; 0x80
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7ff fec0 	bl	8003014 <SPI_WaitFlagStateUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329e:	f043 0220 	orr.w	r2, r3, #32
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e014      	b.n	80032d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f7ff ff34 	bl	8003124 <SPI_WaitFifoStateUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c6:	f043 0220 	orr.w	r2, r3, #32
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e000      	b.n	80032d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e049      	b.n	8003382 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f841 	bl	800338a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3304      	adds	r3, #4
 8003318:	4619      	mov	r1, r3
 800331a:	4610      	mov	r0, r2
 800331c:	f000 f9be 	bl	800369c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d001      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e03b      	b.n	8003430 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a19      	ldr	r2, [pc, #100]	; (800343c <HAL_TIM_Base_Start_IT+0x9c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d009      	beq.n	80033ee <HAL_TIM_Base_Start_IT+0x4e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e2:	d004      	beq.n	80033ee <HAL_TIM_Base_Start_IT+0x4e>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a15      	ldr	r2, [pc, #84]	; (8003440 <HAL_TIM_Base_Start_IT+0xa0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d115      	bne.n	800341a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	4b13      	ldr	r3, [pc, #76]	; (8003444 <HAL_TIM_Base_Start_IT+0xa4>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b06      	cmp	r3, #6
 80033fe:	d015      	beq.n	800342c <HAL_TIM_Base_Start_IT+0x8c>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003406:	d011      	beq.n	800342c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003418:	e008      	b.n	800342c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e000      	b.n	800342e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40014000 	.word	0x40014000
 8003444:	00010007 	.word	0x00010007

08003448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d020      	beq.n	80034ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01b      	beq.n	80034ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0202 	mvn.w	r2, #2
 800347c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f8e4 	bl	8003660 <HAL_TIM_IC_CaptureCallback>
 8003498:	e005      	b.n	80034a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f8d6 	bl	800364c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f8e7 	bl	8003674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d020      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01b      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0204 	mvn.w	r2, #4
 80034c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2202      	movs	r2, #2
 80034ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f8be 	bl	8003660 <HAL_TIM_IC_CaptureCallback>
 80034e4:	e005      	b.n	80034f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f8b0 	bl	800364c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f8c1 	bl	8003674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d020      	beq.n	8003544 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01b      	beq.n	8003544 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0208 	mvn.w	r2, #8
 8003514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2204      	movs	r2, #4
 800351a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f898 	bl	8003660 <HAL_TIM_IC_CaptureCallback>
 8003530:	e005      	b.n	800353e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f88a 	bl	800364c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f89b 	bl	8003674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b00      	cmp	r3, #0
 800354c:	d020      	beq.n	8003590 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01b      	beq.n	8003590 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0210 	mvn.w	r2, #16
 8003560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2208      	movs	r2, #8
 8003566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f872 	bl	8003660 <HAL_TIM_IC_CaptureCallback>
 800357c:	e005      	b.n	800358a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f864 	bl	800364c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f875 	bl	8003674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00c      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0201 	mvn.w	r2, #1
 80035ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fd fb3a 	bl	8000c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00c      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f8d0 	bl	8003778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00c      	beq.n	80035fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f8c8 	bl	800378c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00c      	beq.n	8003620 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d007      	beq.n	8003620 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f834 	bl	8003688 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00c      	beq.n	8003644 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0220 	mvn.w	r2, #32
 800363c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f890 	bl	8003764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003644:	bf00      	nop
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a2a      	ldr	r2, [pc, #168]	; (8003758 <TIM_Base_SetConfig+0xbc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d003      	beq.n	80036bc <TIM_Base_SetConfig+0x20>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ba:	d108      	bne.n	80036ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a21      	ldr	r2, [pc, #132]	; (8003758 <TIM_Base_SetConfig+0xbc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00b      	beq.n	80036ee <TIM_Base_SetConfig+0x52>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036dc:	d007      	beq.n	80036ee <TIM_Base_SetConfig+0x52>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a1e      	ldr	r2, [pc, #120]	; (800375c <TIM_Base_SetConfig+0xc0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d003      	beq.n	80036ee <TIM_Base_SetConfig+0x52>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a1d      	ldr	r2, [pc, #116]	; (8003760 <TIM_Base_SetConfig+0xc4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d108      	bne.n	8003700 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <TIM_Base_SetConfig+0xbc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d007      	beq.n	800373c <TIM_Base_SetConfig+0xa0>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a0b      	ldr	r2, [pc, #44]	; (800375c <TIM_Base_SetConfig+0xc0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d003      	beq.n	800373c <TIM_Base_SetConfig+0xa0>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <TIM_Base_SetConfig+0xc4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d103      	bne.n	8003744 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	615a      	str	r2, [r3, #20]
}
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40012c00 	.word	0x40012c00
 800375c:	40014000 	.word	0x40014000
 8003760:	40014400 	.word	0x40014400

08003764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e040      	b.n	8003834 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd fab2 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2224      	movs	r2, #36	; 0x24
 80037cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 feb2 	bl	8004550 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fc83 	bl	80040f8 <UART_SetConfig>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e01b      	b.n	8003834 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800380a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800381a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 ff31 	bl	8004694 <UART_CheckIdleState>
 8003832:	4603      	mov	r3, r0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08a      	sub	sp, #40	; 0x28
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	4613      	mov	r3, r2
 800384a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003850:	2b20      	cmp	r3, #32
 8003852:	d178      	bne.n	8003946 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_UART_Transmit+0x24>
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e071      	b.n	8003948 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2221      	movs	r2, #33	; 0x21
 8003870:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003872:	f7fd fccd 	bl	8001210 <HAL_GetTick>
 8003876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	88fa      	ldrh	r2, [r7, #6]
 800387c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	88fa      	ldrh	r2, [r7, #6]
 8003884:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003890:	d108      	bne.n	80038a4 <HAL_UART_Transmit+0x68>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d104      	bne.n	80038a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	e003      	b.n	80038ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038ac:	e030      	b.n	8003910 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2200      	movs	r2, #0
 80038b6:	2180      	movs	r1, #128	; 0x80
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 ff93 	bl	80047e4 <UART_WaitOnFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e03c      	b.n	8003948 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10b      	bne.n	80038ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	881a      	ldrh	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038e0:	b292      	uxth	r2, r2
 80038e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	3302      	adds	r3, #2
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	e008      	b.n	80038fe <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	781a      	ldrb	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	b292      	uxth	r2, r2
 80038f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	3301      	adds	r3, #1
 80038fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1c8      	bne.n	80038ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2200      	movs	r2, #0
 8003924:	2140      	movs	r1, #64	; 0x40
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 ff5c 	bl	80047e4 <UART_WaitOnFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d004      	beq.n	800393c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e005      	b.n	8003948 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e000      	b.n	8003948 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003946:	2302      	movs	r3, #2
  }
}
 8003948:	4618      	mov	r0, r3
 800394a:	3720      	adds	r7, #32
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	4613      	mov	r3, r2
 800395e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003966:	2b20      	cmp	r3, #32
 8003968:	f040 80b6 	bne.w	8003ad8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_UART_Receive+0x28>
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0ae      	b.n	8003ada <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2222      	movs	r2, #34	; 0x22
 8003988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003992:	f7fd fc3d 	bl	8001210 <HAL_GetTick>
 8003996:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	88fa      	ldrh	r2, [r7, #6]
 800399c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	88fa      	ldrh	r2, [r7, #6]
 80039a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b0:	d10e      	bne.n	80039d0 <HAL_UART_Receive+0x80>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d105      	bne.n	80039c6 <HAL_UART_Receive+0x76>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80039c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039c4:	e02d      	b.n	8003a22 <HAL_UART_Receive+0xd2>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	22ff      	movs	r2, #255	; 0xff
 80039ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039ce:	e028      	b.n	8003a22 <HAL_UART_Receive+0xd2>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10d      	bne.n	80039f4 <HAL_UART_Receive+0xa4>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d104      	bne.n	80039ea <HAL_UART_Receive+0x9a>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	22ff      	movs	r2, #255	; 0xff
 80039e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039e8:	e01b      	b.n	8003a22 <HAL_UART_Receive+0xd2>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	227f      	movs	r2, #127	; 0x7f
 80039ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039f2:	e016      	b.n	8003a22 <HAL_UART_Receive+0xd2>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039fc:	d10d      	bne.n	8003a1a <HAL_UART_Receive+0xca>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d104      	bne.n	8003a10 <HAL_UART_Receive+0xc0>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	227f      	movs	r2, #127	; 0x7f
 8003a0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a0e:	e008      	b.n	8003a22 <HAL_UART_Receive+0xd2>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	223f      	movs	r2, #63	; 0x3f
 8003a14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a18:	e003      	b.n	8003a22 <HAL_UART_Receive+0xd2>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a28:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a32:	d108      	bne.n	8003a46 <HAL_UART_Receive+0xf6>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d104      	bne.n	8003a46 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	61bb      	str	r3, [r7, #24]
 8003a44:	e003      	b.n	8003a4e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003a4e:	e037      	b.n	8003ac0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2200      	movs	r2, #0
 8003a58:	2120      	movs	r1, #32
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fec2 	bl	80047e4 <UART_WaitOnFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e033      	b.n	8003ada <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10c      	bne.n	8003a92 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	8a7b      	ldrh	r3, [r7, #18]
 8003a82:	4013      	ands	r3, r2
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	e00d      	b.n	8003aae <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	8a7b      	ldrh	r3, [r7, #18]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1c1      	bne.n	8003a50 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e000      	b.n	8003ada <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003ad8:	2302      	movs	r3, #2
  }
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b0ba      	sub	sp, #232	; 0xe8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b0e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b12:	4013      	ands	r3, r2
 8003b14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d115      	bne.n	8003b4c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00f      	beq.n	8003b4c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d009      	beq.n	8003b4c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 82ae 	beq.w	800409e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	4798      	blx	r3
      }
      return;
 8003b4a:	e2a8      	b.n	800409e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003b4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8117 	beq.w	8003d84 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003b66:	4b85      	ldr	r3, [pc, #532]	; (8003d7c <HAL_UART_IRQHandler+0x298>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 810a 	beq.w	8003d84 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d011      	beq.n	8003ba0 <HAL_UART_IRQHandler+0xbc>
 8003b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b96:	f043 0201 	orr.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d011      	beq.n	8003bd0 <HAL_UART_IRQHandler+0xec>
 8003bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00b      	beq.n	8003bd0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc6:	f043 0204 	orr.w	r2, r3, #4
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d011      	beq.n	8003c00 <HAL_UART_IRQHandler+0x11c>
 8003bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00b      	beq.n	8003c00 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2204      	movs	r2, #4
 8003bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf6:	f043 0202 	orr.w	r2, r3, #2
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d017      	beq.n	8003c3c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d105      	bne.n	8003c24 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00b      	beq.n	8003c3c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c32:	f043 0208 	orr.w	r2, r3, #8
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d012      	beq.n	8003c6e <HAL_UART_IRQHandler+0x18a>
 8003c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00c      	beq.n	8003c6e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8214 	beq.w	80040a2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00d      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	d005      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d04f      	beq.n	8003d66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fdf3 	bl	80048b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd6:	2b40      	cmp	r3, #64	; 0x40
 8003cd8:	d141      	bne.n	8003d5e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3308      	adds	r3, #8
 8003ce0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3308      	adds	r3, #8
 8003d02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1d9      	bne.n	8003cda <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d013      	beq.n	8003d56 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d32:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <HAL_UART_IRQHandler+0x29c>)
 8003d34:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fd fbb8 	bl	80014b0 <HAL_DMA_Abort_IT>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d017      	beq.n	8003d76 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d50:	4610      	mov	r0, r2
 8003d52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d54:	e00f      	b.n	8003d76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f9b8 	bl	80040cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5c:	e00b      	b.n	8003d76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f9b4 	bl	80040cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d64:	e007      	b.n	8003d76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f9b0 	bl	80040cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003d74:	e195      	b.n	80040a2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d76:	bf00      	nop
    return;
 8003d78:	e193      	b.n	80040a2 <HAL_UART_IRQHandler+0x5be>
 8003d7a:	bf00      	nop
 8003d7c:	04000120 	.word	0x04000120
 8003d80:	0800497b 	.word	0x0800497b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	f040 814e 	bne.w	800402a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 8147 	beq.w	800402a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 8140 	beq.w	800402a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2210      	movs	r2, #16
 8003db0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b40      	cmp	r3, #64	; 0x40
 8003dbe:	f040 80b8 	bne.w	8003f32 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003dce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 8167 	beq.w	80040a6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003dde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003de2:	429a      	cmp	r2, r3
 8003de4:	f080 815f 	bcs.w	80040a6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f040 8086 	bne.w	8003f10 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e32:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e3e:	e841 2300 	strex	r3, r2, [r1]
 8003e42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1da      	bne.n	8003e04 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3308      	adds	r3, #8
 8003e54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e1      	bne.n	8003e4e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3308      	adds	r3, #8
 8003e90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003eae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003eb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003eb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e3      	bne.n	8003e8a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ee0:	f023 0310 	bic.w	r3, r3, #16
 8003ee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ef2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ef4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ef8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e4      	bne.n	8003ed0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fd fa92 	bl	8001434 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	4619      	mov	r1, r3
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f8d8 	bl	80040e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f30:	e0b9      	b.n	80040a6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 80ab 	beq.w	80040aa <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003f54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80a6 	beq.w	80040aa <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f66:	e853 3f00 	ldrex	r3, [r3]
 8003f6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f80:	647b      	str	r3, [r7, #68]	; 0x44
 8003f82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f88:	e841 2300 	strex	r3, r2, [r1]
 8003f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e4      	bne.n	8003f5e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3308      	adds	r3, #8
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	e853 3f00 	ldrex	r3, [r3]
 8003fa2:	623b      	str	r3, [r7, #32]
   return(result);
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	f023 0301 	bic.w	r3, r3, #1
 8003faa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fb8:	633a      	str	r2, [r7, #48]	; 0x30
 8003fba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e3      	bne.n	8003f94 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f023 0310 	bic.w	r3, r3, #16
 8003ff4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	69b9      	ldr	r1, [r7, #24]
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	617b      	str	r3, [r7, #20]
   return(result);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e4      	bne.n	8003fe0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2202      	movs	r2, #2
 800401a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800401c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004020:	4619      	mov	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f85c 	bl	80040e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004028:	e03f      	b.n	80040aa <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800402a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800402e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00e      	beq.n	8004054 <HAL_UART_IRQHandler+0x570>
 8004036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d008      	beq.n	8004054 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800404a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 fcd4 	bl	80049fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004052:	e02d      	b.n	80040b0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00e      	beq.n	800407e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01c      	beq.n	80040ae <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3
    }
    return;
 800407c:	e017      	b.n	80040ae <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800407e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d012      	beq.n	80040b0 <HAL_UART_IRQHandler+0x5cc>
 800408a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800408e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00c      	beq.n	80040b0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fc85 	bl	80049a6 <UART_EndTransmit_IT>
    return;
 800409c:	e008      	b.n	80040b0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800409e:	bf00      	nop
 80040a0:	e006      	b.n	80040b0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80040a2:	bf00      	nop
 80040a4:	e004      	b.n	80040b0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80040a6:	bf00      	nop
 80040a8:	e002      	b.n	80040b0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80040aa:	bf00      	nop
 80040ac:	e000      	b.n	80040b0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80040ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80040b0:	37e8      	adds	r7, #232	; 0xe8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop

080040b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040fc:	b08a      	sub	sp, #40	; 0x28
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	431a      	orrs	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	431a      	orrs	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	4313      	orrs	r3, r2
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	4bb4      	ldr	r3, [pc, #720]	; (80043f8 <UART_SetConfig+0x300>)
 8004128:	4013      	ands	r3, r2
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004130:	430b      	orrs	r3, r1
 8004132:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4aa9      	ldr	r2, [pc, #676]	; (80043fc <UART_SetConfig+0x304>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004160:	4313      	orrs	r3, r2
 8004162:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004174:	430a      	orrs	r2, r1
 8004176:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4aa0      	ldr	r2, [pc, #640]	; (8004400 <UART_SetConfig+0x308>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d126      	bne.n	80041d0 <UART_SetConfig+0xd8>
 8004182:	4ba0      	ldr	r3, [pc, #640]	; (8004404 <UART_SetConfig+0x30c>)
 8004184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	2b03      	cmp	r3, #3
 800418e:	d81b      	bhi.n	80041c8 <UART_SetConfig+0xd0>
 8004190:	a201      	add	r2, pc, #4	; (adr r2, 8004198 <UART_SetConfig+0xa0>)
 8004192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004196:	bf00      	nop
 8004198:	080041a9 	.word	0x080041a9
 800419c:	080041b9 	.word	0x080041b9
 80041a0:	080041b1 	.word	0x080041b1
 80041a4:	080041c1 	.word	0x080041c1
 80041a8:	2301      	movs	r3, #1
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ae:	e080      	b.n	80042b2 <UART_SetConfig+0x1ba>
 80041b0:	2302      	movs	r3, #2
 80041b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b6:	e07c      	b.n	80042b2 <UART_SetConfig+0x1ba>
 80041b8:	2304      	movs	r3, #4
 80041ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041be:	e078      	b.n	80042b2 <UART_SetConfig+0x1ba>
 80041c0:	2308      	movs	r3, #8
 80041c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c6:	e074      	b.n	80042b2 <UART_SetConfig+0x1ba>
 80041c8:	2310      	movs	r3, #16
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ce:	e070      	b.n	80042b2 <UART_SetConfig+0x1ba>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a8c      	ldr	r2, [pc, #560]	; (8004408 <UART_SetConfig+0x310>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d138      	bne.n	800424c <UART_SetConfig+0x154>
 80041da:	4b8a      	ldr	r3, [pc, #552]	; (8004404 <UART_SetConfig+0x30c>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e0:	f003 030c 	and.w	r3, r3, #12
 80041e4:	2b0c      	cmp	r3, #12
 80041e6:	d82d      	bhi.n	8004244 <UART_SetConfig+0x14c>
 80041e8:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <UART_SetConfig+0xf8>)
 80041ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ee:	bf00      	nop
 80041f0:	08004225 	.word	0x08004225
 80041f4:	08004245 	.word	0x08004245
 80041f8:	08004245 	.word	0x08004245
 80041fc:	08004245 	.word	0x08004245
 8004200:	08004235 	.word	0x08004235
 8004204:	08004245 	.word	0x08004245
 8004208:	08004245 	.word	0x08004245
 800420c:	08004245 	.word	0x08004245
 8004210:	0800422d 	.word	0x0800422d
 8004214:	08004245 	.word	0x08004245
 8004218:	08004245 	.word	0x08004245
 800421c:	08004245 	.word	0x08004245
 8004220:	0800423d 	.word	0x0800423d
 8004224:	2300      	movs	r3, #0
 8004226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422a:	e042      	b.n	80042b2 <UART_SetConfig+0x1ba>
 800422c:	2302      	movs	r3, #2
 800422e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004232:	e03e      	b.n	80042b2 <UART_SetConfig+0x1ba>
 8004234:	2304      	movs	r3, #4
 8004236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800423a:	e03a      	b.n	80042b2 <UART_SetConfig+0x1ba>
 800423c:	2308      	movs	r3, #8
 800423e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004242:	e036      	b.n	80042b2 <UART_SetConfig+0x1ba>
 8004244:	2310      	movs	r3, #16
 8004246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424a:	e032      	b.n	80042b2 <UART_SetConfig+0x1ba>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a6a      	ldr	r2, [pc, #424]	; (80043fc <UART_SetConfig+0x304>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d12a      	bne.n	80042ac <UART_SetConfig+0x1b4>
 8004256:	4b6b      	ldr	r3, [pc, #428]	; (8004404 <UART_SetConfig+0x30c>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004260:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004264:	d01a      	beq.n	800429c <UART_SetConfig+0x1a4>
 8004266:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800426a:	d81b      	bhi.n	80042a4 <UART_SetConfig+0x1ac>
 800426c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004270:	d00c      	beq.n	800428c <UART_SetConfig+0x194>
 8004272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004276:	d815      	bhi.n	80042a4 <UART_SetConfig+0x1ac>
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <UART_SetConfig+0x18c>
 800427c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004280:	d008      	beq.n	8004294 <UART_SetConfig+0x19c>
 8004282:	e00f      	b.n	80042a4 <UART_SetConfig+0x1ac>
 8004284:	2300      	movs	r3, #0
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428a:	e012      	b.n	80042b2 <UART_SetConfig+0x1ba>
 800428c:	2302      	movs	r3, #2
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004292:	e00e      	b.n	80042b2 <UART_SetConfig+0x1ba>
 8004294:	2304      	movs	r3, #4
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429a:	e00a      	b.n	80042b2 <UART_SetConfig+0x1ba>
 800429c:	2308      	movs	r3, #8
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a2:	e006      	b.n	80042b2 <UART_SetConfig+0x1ba>
 80042a4:	2310      	movs	r3, #16
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042aa:	e002      	b.n	80042b2 <UART_SetConfig+0x1ba>
 80042ac:	2310      	movs	r3, #16
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a51      	ldr	r2, [pc, #324]	; (80043fc <UART_SetConfig+0x304>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d17a      	bne.n	80043b2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d824      	bhi.n	800430e <UART_SetConfig+0x216>
 80042c4:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <UART_SetConfig+0x1d4>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	080042f1 	.word	0x080042f1
 80042d0:	0800430f 	.word	0x0800430f
 80042d4:	080042f9 	.word	0x080042f9
 80042d8:	0800430f 	.word	0x0800430f
 80042dc:	080042ff 	.word	0x080042ff
 80042e0:	0800430f 	.word	0x0800430f
 80042e4:	0800430f 	.word	0x0800430f
 80042e8:	0800430f 	.word	0x0800430f
 80042ec:	08004307 	.word	0x08004307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042f0:	f7fe f8c2 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 80042f4:	61f8      	str	r0, [r7, #28]
        break;
 80042f6:	e010      	b.n	800431a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f8:	4b44      	ldr	r3, [pc, #272]	; (800440c <UART_SetConfig+0x314>)
 80042fa:	61fb      	str	r3, [r7, #28]
        break;
 80042fc:	e00d      	b.n	800431a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042fe:	f7fe f823 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8004302:	61f8      	str	r0, [r7, #28]
        break;
 8004304:	e009      	b.n	800431a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800430a:	61fb      	str	r3, [r7, #28]
        break;
 800430c:	e005      	b.n	800431a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004318:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 8107 	beq.w	8004530 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	4413      	add	r3, r2
 800432c:	69fa      	ldr	r2, [r7, #28]
 800432e:	429a      	cmp	r2, r3
 8004330:	d305      	bcc.n	800433e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	429a      	cmp	r2, r3
 800433c:	d903      	bls.n	8004346 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004344:	e0f4      	b.n	8004530 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	2200      	movs	r2, #0
 800434a:	461c      	mov	r4, r3
 800434c:	4615      	mov	r5, r2
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	022b      	lsls	r3, r5, #8
 8004358:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800435c:	0222      	lsls	r2, r4, #8
 800435e:	68f9      	ldr	r1, [r7, #12]
 8004360:	6849      	ldr	r1, [r1, #4]
 8004362:	0849      	lsrs	r1, r1, #1
 8004364:	2000      	movs	r0, #0
 8004366:	4688      	mov	r8, r1
 8004368:	4681      	mov	r9, r0
 800436a:	eb12 0a08 	adds.w	sl, r2, r8
 800436e:	eb43 0b09 	adc.w	fp, r3, r9
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	603b      	str	r3, [r7, #0]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004380:	4650      	mov	r0, sl
 8004382:	4659      	mov	r1, fp
 8004384:	f7fb ff74 	bl	8000270 <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4613      	mov	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004396:	d308      	bcc.n	80043aa <UART_SetConfig+0x2b2>
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800439e:	d204      	bcs.n	80043aa <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	60da      	str	r2, [r3, #12]
 80043a8:	e0c2      	b.n	8004530 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043b0:	e0be      	b.n	8004530 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ba:	d16a      	bne.n	8004492 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80043bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d834      	bhi.n	800442e <UART_SetConfig+0x336>
 80043c4:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <UART_SetConfig+0x2d4>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	08004411 	.word	0x08004411
 80043d4:	08004419 	.word	0x08004419
 80043d8:	0800442f 	.word	0x0800442f
 80043dc:	0800441f 	.word	0x0800441f
 80043e0:	0800442f 	.word	0x0800442f
 80043e4:	0800442f 	.word	0x0800442f
 80043e8:	0800442f 	.word	0x0800442f
 80043ec:	08004427 	.word	0x08004427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f0:	f7fe f842 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 80043f4:	61f8      	str	r0, [r7, #28]
        break;
 80043f6:	e020      	b.n	800443a <UART_SetConfig+0x342>
 80043f8:	efff69f3 	.word	0xefff69f3
 80043fc:	40008000 	.word	0x40008000
 8004400:	40013800 	.word	0x40013800
 8004404:	40021000 	.word	0x40021000
 8004408:	40004400 	.word	0x40004400
 800440c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004410:	f7fe f848 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 8004414:	61f8      	str	r0, [r7, #28]
        break;
 8004416:	e010      	b.n	800443a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004418:	4b4c      	ldr	r3, [pc, #304]	; (800454c <UART_SetConfig+0x454>)
 800441a:	61fb      	str	r3, [r7, #28]
        break;
 800441c:	e00d      	b.n	800443a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800441e:	f7fd ff93 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8004422:	61f8      	str	r0, [r7, #28]
        break;
 8004424:	e009      	b.n	800443a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442a:	61fb      	str	r3, [r7, #28]
        break;
 800442c:	e005      	b.n	800443a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004438:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d077      	beq.n	8004530 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	005a      	lsls	r2, r3, #1
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	441a      	add	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	fbb2 f3f3 	udiv	r3, r2, r3
 8004454:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b0f      	cmp	r3, #15
 800445a:	d916      	bls.n	800448a <UART_SetConfig+0x392>
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004462:	d212      	bcs.n	800448a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	b29b      	uxth	r3, r3
 8004468:	f023 030f 	bic.w	r3, r3, #15
 800446c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	085b      	lsrs	r3, r3, #1
 8004472:	b29b      	uxth	r3, r3
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	b29a      	uxth	r2, r3
 800447a:	8afb      	ldrh	r3, [r7, #22]
 800447c:	4313      	orrs	r3, r2
 800447e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	8afa      	ldrh	r2, [r7, #22]
 8004486:	60da      	str	r2, [r3, #12]
 8004488:	e052      	b.n	8004530 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004490:	e04e      	b.n	8004530 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004492:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004496:	2b08      	cmp	r3, #8
 8004498:	d827      	bhi.n	80044ea <UART_SetConfig+0x3f2>
 800449a:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <UART_SetConfig+0x3a8>)
 800449c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a0:	080044c5 	.word	0x080044c5
 80044a4:	080044cd 	.word	0x080044cd
 80044a8:	080044d5 	.word	0x080044d5
 80044ac:	080044eb 	.word	0x080044eb
 80044b0:	080044db 	.word	0x080044db
 80044b4:	080044eb 	.word	0x080044eb
 80044b8:	080044eb 	.word	0x080044eb
 80044bc:	080044eb 	.word	0x080044eb
 80044c0:	080044e3 	.word	0x080044e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c4:	f7fd ffd8 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 80044c8:	61f8      	str	r0, [r7, #28]
        break;
 80044ca:	e014      	b.n	80044f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044cc:	f7fd ffea 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 80044d0:	61f8      	str	r0, [r7, #28]
        break;
 80044d2:	e010      	b.n	80044f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d4:	4b1d      	ldr	r3, [pc, #116]	; (800454c <UART_SetConfig+0x454>)
 80044d6:	61fb      	str	r3, [r7, #28]
        break;
 80044d8:	e00d      	b.n	80044f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044da:	f7fd ff35 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 80044de:	61f8      	str	r0, [r7, #28]
        break;
 80044e0:	e009      	b.n	80044f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e6:	61fb      	str	r3, [r7, #28]
        break;
 80044e8:	e005      	b.n	80044f6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044f4:	bf00      	nop
    }

    if (pclk != 0U)
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d019      	beq.n	8004530 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	085a      	lsrs	r2, r3, #1
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	441a      	add	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	fbb2 f3f3 	udiv	r3, r2, r3
 800450e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2b0f      	cmp	r3, #15
 8004514:	d909      	bls.n	800452a <UART_SetConfig+0x432>
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451c:	d205      	bcs.n	800452a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60da      	str	r2, [r3, #12]
 8004528:	e002      	b.n	8004530 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800453c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004540:	4618      	mov	r0, r3
 8004542:	3728      	adds	r7, #40	; 0x28
 8004544:	46bd      	mov	sp, r7
 8004546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800454a:	bf00      	nop
 800454c:	00f42400 	.word	0x00f42400

08004550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01a      	beq.n	8004666 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800464e:	d10a      	bne.n	8004666 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	605a      	str	r2, [r3, #4]
  }
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b098      	sub	sp, #96	; 0x60
 8004698:	af02      	add	r7, sp, #8
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046a4:	f7fc fdb4 	bl	8001210 <HAL_GetTick>
 80046a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d12e      	bne.n	8004716 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046c0:	2200      	movs	r2, #0
 80046c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f88c 	bl	80047e4 <UART_WaitOnFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d021      	beq.n	8004716 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046da:	e853 3f00 	ldrex	r3, [r3]
 80046de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046e6:	653b      	str	r3, [r7, #80]	; 0x50
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f0:	647b      	str	r3, [r7, #68]	; 0x44
 80046f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e6      	bne.n	80046d2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e062      	b.n	80047dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b04      	cmp	r3, #4
 8004722:	d149      	bne.n	80047b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004724:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800472c:	2200      	movs	r2, #0
 800472e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f856 	bl	80047e4 <UART_WaitOnFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d03c      	beq.n	80047b8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	623b      	str	r3, [r7, #32]
   return(result);
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800475c:	633b      	str	r3, [r7, #48]	; 0x30
 800475e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e6      	bne.n	800473e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3308      	adds	r3, #8
 8004776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	64bb      	str	r3, [r7, #72]	; 0x48
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3308      	adds	r3, #8
 800478e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004790:	61fa      	str	r2, [r7, #28]
 8004792:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004794:	69b9      	ldr	r1, [r7, #24]
 8004796:	69fa      	ldr	r2, [r7, #28]
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	617b      	str	r3, [r7, #20]
   return(result);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e5      	bne.n	8004770 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e011      	b.n	80047dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3758      	adds	r7, #88	; 0x58
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	4613      	mov	r3, r2
 80047f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f4:	e049      	b.n	800488a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fc:	d045      	beq.n	800488a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fe:	f7fc fd07 	bl	8001210 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	429a      	cmp	r2, r3
 800480c:	d302      	bcc.n	8004814 <UART_WaitOnFlagUntilTimeout+0x30>
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e048      	b.n	80048aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d031      	beq.n	800488a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b08      	cmp	r3, #8
 8004832:	d110      	bne.n	8004856 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2208      	movs	r2, #8
 800483a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f838 	bl	80048b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2208      	movs	r2, #8
 8004846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e029      	b.n	80048aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004864:	d111      	bne.n	800488a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800486e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f81e 	bl	80048b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e00f      	b.n	80048aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	4013      	ands	r3, r2
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	429a      	cmp	r2, r3
 8004898:	bf0c      	ite	eq
 800489a:	2301      	moveq	r3, #1
 800489c:	2300      	movne	r3, #0
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	79fb      	ldrb	r3, [r7, #7]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d0a6      	beq.n	80047f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b095      	sub	sp, #84	; 0x54
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d8:	643b      	str	r3, [r7, #64]	; 0x40
 80048da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e6      	bne.n	80048ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3308      	adds	r3, #8
 80048f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	64bb      	str	r3, [r7, #72]	; 0x48
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3308      	adds	r3, #8
 800490a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800490c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800490e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e5      	bne.n	80048ec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004924:	2b01      	cmp	r3, #1
 8004926:	d118      	bne.n	800495a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	60bb      	str	r3, [r7, #8]
   return(result);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f023 0310 	bic.w	r3, r3, #16
 800493c:	647b      	str	r3, [r7, #68]	; 0x44
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	6979      	ldr	r1, [r7, #20]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	613b      	str	r3, [r7, #16]
   return(result);
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e6      	bne.n	8004928 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800496e:	bf00      	nop
 8004970:	3754      	adds	r7, #84	; 0x54
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7ff fb97 	bl	80040cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b088      	sub	sp, #32
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	e853 3f00 	ldrex	r3, [r3]
 80049ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	461a      	mov	r2, r3
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	61bb      	str	r3, [r7, #24]
 80049ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d0:	6979      	ldr	r1, [r7, #20]
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	e841 2300 	strex	r3, r2, [r1]
 80049d8:	613b      	str	r3, [r7, #16]
   return(result);
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1e6      	bne.n	80049ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2220      	movs	r2, #32
 80049e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7ff fb63 	bl	80040b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049f2:	bf00      	nop
 80049f4:	3720      	adds	r7, #32
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
	...

08004a10 <__NVIC_SetPriority>:
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	6039      	str	r1, [r7, #0]
 8004a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	db0a      	blt.n	8004a3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	490c      	ldr	r1, [pc, #48]	; (8004a5c <__NVIC_SetPriority+0x4c>)
 8004a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2e:	0112      	lsls	r2, r2, #4
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	440b      	add	r3, r1
 8004a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a38:	e00a      	b.n	8004a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	4908      	ldr	r1, [pc, #32]	; (8004a60 <__NVIC_SetPriority+0x50>)
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	3b04      	subs	r3, #4
 8004a48:	0112      	lsls	r2, r2, #4
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	761a      	strb	r2, [r3, #24]
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	e000e100 	.word	0xe000e100
 8004a60:	e000ed00 	.word	0xe000ed00

08004a64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <SysTick_Handler+0x1c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a6c:	f001 ff12 	bl	8006894 <xTaskGetSchedulerState>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d001      	beq.n	8004a7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a76:	f002 fcf7 	bl	8007468 <xPortSysTickHandler>
  }
}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	e000e010 	.word	0xe000e010

08004a84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a88:	2100      	movs	r1, #0
 8004a8a:	f06f 0004 	mvn.w	r0, #4
 8004a8e:	f7ff ffbf 	bl	8004a10 <__NVIC_SetPriority>
#endif
}
 8004a92:	bf00      	nop
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a9e:	f3ef 8305 	mrs	r3, IPSR
 8004aa2:	603b      	str	r3, [r7, #0]
  return(result);
 8004aa4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004aaa:	f06f 0305 	mvn.w	r3, #5
 8004aae:	607b      	str	r3, [r7, #4]
 8004ab0:	e00c      	b.n	8004acc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <osKernelInitialize+0x44>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d105      	bne.n	8004ac6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004aba:	4b08      	ldr	r3, [pc, #32]	; (8004adc <osKernelInitialize+0x44>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	607b      	str	r3, [r7, #4]
 8004ac4:	e002      	b.n	8004acc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004acc:	687b      	ldr	r3, [r7, #4]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	2000029c 	.word	0x2000029c

08004ae0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ae6:	f3ef 8305 	mrs	r3, IPSR
 8004aea:	603b      	str	r3, [r7, #0]
  return(result);
 8004aec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <osKernelStart+0x1a>
    stat = osErrorISR;
 8004af2:	f06f 0305 	mvn.w	r3, #5
 8004af6:	607b      	str	r3, [r7, #4]
 8004af8:	e010      	b.n	8004b1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004afa:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <osKernelStart+0x48>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d109      	bne.n	8004b16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b02:	f7ff ffbf 	bl	8004a84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b06:	4b08      	ldr	r3, [pc, #32]	; (8004b28 <osKernelStart+0x48>)
 8004b08:	2202      	movs	r2, #2
 8004b0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b0c:	f001 fa66 	bl	8005fdc <vTaskStartScheduler>
      stat = osOK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	607b      	str	r3, [r7, #4]
 8004b14:	e002      	b.n	8004b1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004b16:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b1c:	687b      	ldr	r3, [r7, #4]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	2000029c 	.word	0x2000029c

08004b2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	; 0x38
 8004b30:	af04      	add	r7, sp, #16
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b3c:	f3ef 8305 	mrs	r3, IPSR
 8004b40:	617b      	str	r3, [r7, #20]
  return(result);
 8004b42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d17e      	bne.n	8004c46 <osThreadNew+0x11a>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d07b      	beq.n	8004c46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004b4e:	2380      	movs	r3, #128	; 0x80
 8004b50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b52:	2318      	movs	r3, #24
 8004b54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b56:	2300      	movs	r3, #0
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d045      	beq.n	8004bf2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <osThreadNew+0x48>
        name = attr->name;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <osThreadNew+0x6e>
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	2b38      	cmp	r3, #56	; 0x38
 8004b8c:	d805      	bhi.n	8004b9a <osThreadNew+0x6e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <osThreadNew+0x72>
        return (NULL);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e054      	b.n	8004c48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	089b      	lsrs	r3, r3, #2
 8004bac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00e      	beq.n	8004bd4 <osThreadNew+0xa8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	2ba7      	cmp	r3, #167	; 0xa7
 8004bbc:	d90a      	bls.n	8004bd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d006      	beq.n	8004bd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <osThreadNew+0xa8>
        mem = 1;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	e010      	b.n	8004bf6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10c      	bne.n	8004bf6 <osThreadNew+0xca>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d108      	bne.n	8004bf6 <osThreadNew+0xca>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d104      	bne.n	8004bf6 <osThreadNew+0xca>
          mem = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61bb      	str	r3, [r7, #24]
 8004bf0:	e001      	b.n	8004bf6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d110      	bne.n	8004c1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c04:	9202      	str	r2, [sp, #8]
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	6a3a      	ldr	r2, [r7, #32]
 8004c10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fff6 	bl	8005c04 <xTaskCreateStatic>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	e013      	b.n	8004c46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d110      	bne.n	8004c46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	f107 0310 	add.w	r3, r7, #16
 8004c2c:	9301      	str	r3, [sp, #4]
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f001 f841 	bl	8005cbe <xTaskCreate>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d001      	beq.n	8004c46 <osThreadNew+0x11a>
            hTask = NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c46:	693b      	ldr	r3, [r7, #16]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3728      	adds	r7, #40	; 0x28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c58:	f3ef 8305 	mrs	r3, IPSR
 8004c5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <osDelay+0x1c>
    stat = osErrorISR;
 8004c64:	f06f 0305 	mvn.w	r3, #5
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	e007      	b.n	8004c7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f001 f97c 	bl	8005f74 <vTaskDelay>
    }
  }

  return (stat);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b08a      	sub	sp, #40	; 0x28
 8004c8a:	af02      	add	r7, sp, #8
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c96:	f3ef 8305 	mrs	r3, IPSR
 8004c9a:	613b      	str	r3, [r7, #16]
  return(result);
 8004c9c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d15f      	bne.n	8004d62 <osMessageQueueNew+0xdc>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d05c      	beq.n	8004d62 <osMessageQueueNew+0xdc>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d059      	beq.n	8004d62 <osMessageQueueNew+0xdc>
    mem = -1;
 8004cae:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d029      	beq.n	8004d0e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d012      	beq.n	8004ce8 <osMessageQueueNew+0x62>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	2b4f      	cmp	r3, #79	; 0x4f
 8004cc8:	d90e      	bls.n	8004ce8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695a      	ldr	r2, [r3, #20]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	fb01 f303 	mul.w	r3, r1, r3
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d302      	bcc.n	8004ce8 <osMessageQueueNew+0x62>
        mem = 1;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	e014      	b.n	8004d12 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d110      	bne.n	8004d12 <osMessageQueueNew+0x8c>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10c      	bne.n	8004d12 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d108      	bne.n	8004d12 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d104      	bne.n	8004d12 <osMessageQueueNew+0x8c>
          mem = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61bb      	str	r3, [r7, #24]
 8004d0c:	e001      	b.n	8004d12 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d10b      	bne.n	8004d30 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2100      	movs	r1, #0
 8004d22:	9100      	str	r1, [sp, #0]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 fa2e 	bl	8005188 <xQueueGenericCreateStatic>
 8004d2c:	61f8      	str	r0, [r7, #28]
 8004d2e:	e008      	b.n	8004d42 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d105      	bne.n	8004d42 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004d36:	2200      	movs	r2, #0
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fa9c 	bl	8005278 <xQueueGenericCreate>
 8004d40:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00c      	beq.n	8004d62 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e001      	b.n	8004d5a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004d5a:	6979      	ldr	r1, [r7, #20]
 8004d5c:	69f8      	ldr	r0, [r7, #28]
 8004d5e:	f000 fef3 	bl	8005b48 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004d62:	69fb      	ldr	r3, [r7, #28]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3720      	adds	r7, #32
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	603b      	str	r3, [r7, #0]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d84:	f3ef 8305 	mrs	r3, IPSR
 8004d88:	617b      	str	r3, [r7, #20]
  return(result);
 8004d8a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d028      	beq.n	8004de2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d005      	beq.n	8004da2 <osMessageQueuePut+0x36>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <osMessageQueuePut+0x36>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004da2:	f06f 0303 	mvn.w	r3, #3
 8004da6:	61fb      	str	r3, [r7, #28]
 8004da8:	e038      	b.n	8004e1c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004daa:	2300      	movs	r3, #0
 8004dac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004dae:	f107 0210 	add.w	r2, r7, #16
 8004db2:	2300      	movs	r3, #0
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	69b8      	ldr	r0, [r7, #24]
 8004db8:	f000 fbba 	bl	8005530 <xQueueGenericSendFromISR>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d003      	beq.n	8004dca <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004dc2:	f06f 0302 	mvn.w	r3, #2
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	e028      	b.n	8004e1c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d025      	beq.n	8004e1c <osMessageQueuePut+0xb0>
 8004dd0:	4b15      	ldr	r3, [pc, #84]	; (8004e28 <osMessageQueuePut+0xbc>)
 8004dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	e01c      	b.n	8004e1c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <osMessageQueuePut+0x82>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d103      	bne.n	8004df6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004dee:	f06f 0303 	mvn.w	r3, #3
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	e012      	b.n	8004e1c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004df6:	2300      	movs	r3, #0
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	69b8      	ldr	r0, [r7, #24]
 8004dfe:	f000 fa99 	bl	8005334 <xQueueGenericSend>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d009      	beq.n	8004e1c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004e0e:	f06f 0301 	mvn.w	r3, #1
 8004e12:	61fb      	str	r3, [r7, #28]
 8004e14:	e002      	b.n	8004e1c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004e16:	f06f 0302 	mvn.w	r3, #2
 8004e1a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004e1c:	69fb      	ldr	r3, [r7, #28]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3720      	adds	r7, #32
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e42:	f3ef 8305 	mrs	r3, IPSR
 8004e46:	617b      	str	r3, [r7, #20]
  return(result);
 8004e48:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d028      	beq.n	8004ea0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <osMessageQueueGet+0x34>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <osMessageQueueGet+0x34>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004e60:	f06f 0303 	mvn.w	r3, #3
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	e037      	b.n	8004ed8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004e6c:	f107 0310 	add.w	r3, r7, #16
 8004e70:	461a      	mov	r2, r3
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	69b8      	ldr	r0, [r7, #24]
 8004e76:	f000 fcd7 	bl	8005828 <xQueueReceiveFromISR>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d003      	beq.n	8004e88 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004e80:	f06f 0302 	mvn.w	r3, #2
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	e027      	b.n	8004ed8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d024      	beq.n	8004ed8 <osMessageQueueGet+0xac>
 8004e8e:	4b15      	ldr	r3, [pc, #84]	; (8004ee4 <osMessageQueueGet+0xb8>)
 8004e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	e01b      	b.n	8004ed8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <osMessageQueueGet+0x80>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d103      	bne.n	8004eb4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004eac:	f06f 0303 	mvn.w	r3, #3
 8004eb0:	61fb      	str	r3, [r7, #28]
 8004eb2:	e011      	b.n	8004ed8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	69b8      	ldr	r0, [r7, #24]
 8004eba:	f000 fbd5 	bl	8005668 <xQueueReceive>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d009      	beq.n	8004ed8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004eca:	f06f 0301 	mvn.w	r3, #1
 8004ece:	61fb      	str	r3, [r7, #28]
 8004ed0:	e002      	b.n	8004ed8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004ed2:	f06f 0302 	mvn.w	r3, #2
 8004ed6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004ed8:	69fb      	ldr	r3, [r7, #28]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	e000ed04 	.word	0xe000ed04

08004ee8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4a07      	ldr	r2, [pc, #28]	; (8004f14 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ef8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4a06      	ldr	r2, [pc, #24]	; (8004f18 <vApplicationGetIdleTaskMemory+0x30>)
 8004efe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2280      	movs	r2, #128	; 0x80
 8004f04:	601a      	str	r2, [r3, #0]
}
 8004f06:	bf00      	nop
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	200002a0 	.word	0x200002a0
 8004f18:	20000348 	.word	0x20000348

08004f1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4a07      	ldr	r2, [pc, #28]	; (8004f48 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	4a06      	ldr	r2, [pc, #24]	; (8004f4c <vApplicationGetTimerTaskMemory+0x30>)
 8004f32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f3a:	601a      	str	r2, [r3, #0]
}
 8004f3c:	bf00      	nop
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	20000548 	.word	0x20000548
 8004f4c:	200005f0 	.word	0x200005f0

08004f50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f103 0208 	add.w	r2, r3, #8
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f04f 32ff 	mov.w	r2, #4294967295
 8004f68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f103 0208 	add.w	r2, r3, #8
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f103 0208 	add.w	r2, r3, #8
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004faa:	b480      	push	{r7}
 8004fac:	b085      	sub	sp, #20
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	601a      	str	r2, [r3, #0]
}
 8004fe6:	bf00      	nop
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b085      	sub	sp, #20
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005008:	d103      	bne.n	8005012 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e00c      	b.n	800502c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3308      	adds	r3, #8
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	e002      	b.n	8005020 <vListInsert+0x2e>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	429a      	cmp	r2, r3
 800502a:	d2f6      	bcs.n	800501a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	601a      	str	r2, [r3, #0]
}
 8005058:	bf00      	nop
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6892      	ldr	r2, [r2, #8]
 800507a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6852      	ldr	r2, [r2, #4]
 8005084:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	429a      	cmp	r2, r3
 800508e:	d103      	bne.n	8005098 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	1e5a      	subs	r2, r3, #1
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10a      	bne.n	80050e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050de:	bf00      	nop
 80050e0:	e7fe      	b.n	80050e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050e2:	f002 f92f 	bl	8007344 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	68f9      	ldr	r1, [r7, #12]
 80050f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050f2:	fb01 f303 	mul.w	r3, r1, r3
 80050f6:	441a      	add	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	3b01      	subs	r3, #1
 8005114:	68f9      	ldr	r1, [r7, #12]
 8005116:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005118:	fb01 f303 	mul.w	r3, r1, r3
 800511c:	441a      	add	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	22ff      	movs	r2, #255	; 0xff
 8005126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	22ff      	movs	r2, #255	; 0xff
 800512e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d114      	bne.n	8005162 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01a      	beq.n	8005176 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3310      	adds	r3, #16
 8005144:	4618      	mov	r0, r3
 8005146:	f001 f9e3 	bl	8006510 <xTaskRemoveFromEventList>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d012      	beq.n	8005176 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005150:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <xQueueGenericReset+0xcc>)
 8005152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	e009      	b.n	8005176 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3310      	adds	r3, #16
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff fef2 	bl	8004f50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3324      	adds	r3, #36	; 0x24
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff feed 	bl	8004f50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005176:	f002 f915 	bl	80073a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800517a:	2301      	movs	r3, #1
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	e000ed04 	.word	0xe000ed04

08005188 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08e      	sub	sp, #56	; 0x38
 800518c:	af02      	add	r7, sp, #8
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10a      	bne.n	80051b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051ae:	bf00      	nop
 80051b0:	e7fe      	b.n	80051b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10a      	bne.n	80051ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051ca:	bf00      	nop
 80051cc:	e7fe      	b.n	80051cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <xQueueGenericCreateStatic+0x52>
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <xQueueGenericCreateStatic+0x56>
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <xQueueGenericCreateStatic+0x58>
 80051de:	2300      	movs	r3, #0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10a      	bne.n	80051fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	623b      	str	r3, [r7, #32]
}
 80051f6:	bf00      	nop
 80051f8:	e7fe      	b.n	80051f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <xQueueGenericCreateStatic+0x7e>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <xQueueGenericCreateStatic+0x82>
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <xQueueGenericCreateStatic+0x84>
 800520a:	2300      	movs	r3, #0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	61fb      	str	r3, [r7, #28]
}
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005226:	2350      	movs	r3, #80	; 0x50
 8005228:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2b50      	cmp	r3, #80	; 0x50
 800522e:	d00a      	beq.n	8005246 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	61bb      	str	r3, [r7, #24]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005246:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800524c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00d      	beq.n	800526e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800525a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	4613      	mov	r3, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 f83f 	bl	80052ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800526e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005270:	4618      	mov	r0, r3
 8005272:	3730      	adds	r7, #48	; 0x30
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08a      	sub	sp, #40	; 0x28
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	613b      	str	r3, [r7, #16]
}
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	fb02 f303 	mul.w	r3, r2, r3
 80052aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	3350      	adds	r3, #80	; 0x50
 80052b0:	4618      	mov	r0, r3
 80052b2:	f002 f969 	bl	8007588 <pvPortMalloc>
 80052b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d011      	beq.n	80052e2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	3350      	adds	r3, #80	; 0x50
 80052c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052d0:	79fa      	ldrb	r2, [r7, #7]
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	4613      	mov	r3, r2
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 f805 	bl	80052ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052e2:	69bb      	ldr	r3, [r7, #24]
	}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3720      	adds	r7, #32
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d103      	bne.n	8005308 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e002      	b.n	800530e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800531a:	2101      	movs	r1, #1
 800531c:	69b8      	ldr	r0, [r7, #24]
 800531e:	f7ff fecb 	bl	80050b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08e      	sub	sp, #56	; 0x38
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005342:	2300      	movs	r3, #0
 8005344:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <xQueueGenericSend+0x32>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005362:	bf00      	nop
 8005364:	e7fe      	b.n	8005364 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d103      	bne.n	8005374 <xQueueGenericSend+0x40>
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <xQueueGenericSend+0x44>
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <xQueueGenericSend+0x46>
 8005378:	2300      	movs	r3, #0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10a      	bne.n	8005394 <xQueueGenericSend+0x60>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005390:	bf00      	nop
 8005392:	e7fe      	b.n	8005392 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2b02      	cmp	r3, #2
 8005398:	d103      	bne.n	80053a2 <xQueueGenericSend+0x6e>
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d101      	bne.n	80053a6 <xQueueGenericSend+0x72>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <xQueueGenericSend+0x74>
 80053a6:	2300      	movs	r3, #0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	623b      	str	r3, [r7, #32]
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053c2:	f001 fa67 	bl	8006894 <xTaskGetSchedulerState>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d102      	bne.n	80053d2 <xQueueGenericSend+0x9e>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <xQueueGenericSend+0xa2>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <xQueueGenericSend+0xa4>
 80053d6:	2300      	movs	r3, #0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10a      	bne.n	80053f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	61fb      	str	r3, [r7, #28]
}
 80053ee:	bf00      	nop
 80053f0:	e7fe      	b.n	80053f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053f2:	f001 ffa7 	bl	8007344 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fe:	429a      	cmp	r2, r3
 8005400:	d302      	bcc.n	8005408 <xQueueGenericSend+0xd4>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d129      	bne.n	800545c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800540e:	f000 fa8b 	bl	8005928 <prvCopyDataToQueue>
 8005412:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	2b00      	cmp	r3, #0
 800541a:	d010      	beq.n	800543e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	3324      	adds	r3, #36	; 0x24
 8005420:	4618      	mov	r0, r3
 8005422:	f001 f875 	bl	8006510 <xTaskRemoveFromEventList>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d013      	beq.n	8005454 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800542c:	4b3f      	ldr	r3, [pc, #252]	; (800552c <xQueueGenericSend+0x1f8>)
 800542e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	e00a      	b.n	8005454 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800543e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005444:	4b39      	ldr	r3, [pc, #228]	; (800552c <xQueueGenericSend+0x1f8>)
 8005446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005454:	f001 ffa6 	bl	80073a4 <vPortExitCritical>
				return pdPASS;
 8005458:	2301      	movs	r3, #1
 800545a:	e063      	b.n	8005524 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d103      	bne.n	800546a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005462:	f001 ff9f 	bl	80073a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005466:	2300      	movs	r3, #0
 8005468:	e05c      	b.n	8005524 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800546a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546c:	2b00      	cmp	r3, #0
 800546e:	d106      	bne.n	800547e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005470:	f107 0314 	add.w	r3, r7, #20
 8005474:	4618      	mov	r0, r3
 8005476:	f001 f8af 	bl	80065d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800547a:	2301      	movs	r3, #1
 800547c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800547e:	f001 ff91 	bl	80073a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005482:	f000 fe1b 	bl	80060bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005486:	f001 ff5d 	bl	8007344 <vPortEnterCritical>
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005490:	b25b      	sxtb	r3, r3
 8005492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005496:	d103      	bne.n	80054a0 <xQueueGenericSend+0x16c>
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054a6:	b25b      	sxtb	r3, r3
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ac:	d103      	bne.n	80054b6 <xQueueGenericSend+0x182>
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054b6:	f001 ff75 	bl	80073a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054ba:	1d3a      	adds	r2, r7, #4
 80054bc:	f107 0314 	add.w	r3, r7, #20
 80054c0:	4611      	mov	r1, r2
 80054c2:	4618      	mov	r0, r3
 80054c4:	f001 f89e 	bl	8006604 <xTaskCheckForTimeOut>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d124      	bne.n	8005518 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054d0:	f000 fb22 	bl	8005b18 <prvIsQueueFull>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d018      	beq.n	800550c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054dc:	3310      	adds	r3, #16
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	4611      	mov	r1, r2
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 ffc4 	bl	8006470 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054ea:	f000 faad 	bl	8005a48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054ee:	f000 fdf3 	bl	80060d8 <xTaskResumeAll>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f47f af7c 	bne.w	80053f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80054fa:	4b0c      	ldr	r3, [pc, #48]	; (800552c <xQueueGenericSend+0x1f8>)
 80054fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	e772      	b.n	80053f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800550c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800550e:	f000 fa9b 	bl	8005a48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005512:	f000 fde1 	bl	80060d8 <xTaskResumeAll>
 8005516:	e76c      	b.n	80053f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800551a:	f000 fa95 	bl	8005a48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800551e:	f000 fddb 	bl	80060d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005522:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005524:	4618      	mov	r0, r3
 8005526:	3738      	adds	r7, #56	; 0x38
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	e000ed04 	.word	0xe000ed04

08005530 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b090      	sub	sp, #64	; 0x40
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10a      	bne.n	800555e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800555a:	bf00      	nop
 800555c:	e7fe      	b.n	800555c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d103      	bne.n	800556c <xQueueGenericSendFromISR+0x3c>
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <xQueueGenericSendFromISR+0x40>
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <xQueueGenericSendFromISR+0x42>
 8005570:	2300      	movs	r3, #0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10a      	bne.n	800558c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005588:	bf00      	nop
 800558a:	e7fe      	b.n	800558a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d103      	bne.n	800559a <xQueueGenericSendFromISR+0x6a>
 8005592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <xQueueGenericSendFromISR+0x6e>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <xQueueGenericSendFromISR+0x70>
 800559e:	2300      	movs	r3, #0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	623b      	str	r3, [r7, #32]
}
 80055b6:	bf00      	nop
 80055b8:	e7fe      	b.n	80055b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055ba:	f001 ffa5 	bl	8007508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055be:	f3ef 8211 	mrs	r2, BASEPRI
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	61fa      	str	r2, [r7, #28]
 80055d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d302      	bcc.n	80055ec <xQueueGenericSendFromISR+0xbc>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d12f      	bne.n	800564c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005602:	f000 f991 	bl	8005928 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005606:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560e:	d112      	bne.n	8005636 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	2b00      	cmp	r3, #0
 8005616:	d016      	beq.n	8005646 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	3324      	adds	r3, #36	; 0x24
 800561c:	4618      	mov	r0, r3
 800561e:	f000 ff77 	bl	8006510 <xTaskRemoveFromEventList>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00e      	beq.n	8005646 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00b      	beq.n	8005646 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	e007      	b.n	8005646 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005636:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800563a:	3301      	adds	r3, #1
 800563c:	b2db      	uxtb	r3, r3
 800563e:	b25a      	sxtb	r2, r3
 8005640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005646:	2301      	movs	r3, #1
 8005648:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800564a:	e001      	b.n	8005650 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800564c:	2300      	movs	r3, #0
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005652:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800565a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800565c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800565e:	4618      	mov	r0, r3
 8005660:	3740      	adds	r7, #64	; 0x40
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08c      	sub	sp, #48	; 0x30
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005674:	2300      	movs	r3, #0
 8005676:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <xQueueReceive+0x30>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	623b      	str	r3, [r7, #32]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d103      	bne.n	80056a6 <xQueueReceive+0x3e>
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <xQueueReceive+0x42>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <xQueueReceive+0x44>
 80056aa:	2300      	movs	r3, #0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10a      	bne.n	80056c6 <xQueueReceive+0x5e>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	61fb      	str	r3, [r7, #28]
}
 80056c2:	bf00      	nop
 80056c4:	e7fe      	b.n	80056c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056c6:	f001 f8e5 	bl	8006894 <xTaskGetSchedulerState>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d102      	bne.n	80056d6 <xQueueReceive+0x6e>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <xQueueReceive+0x72>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <xQueueReceive+0x74>
 80056da:	2300      	movs	r3, #0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10a      	bne.n	80056f6 <xQueueReceive+0x8e>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	61bb      	str	r3, [r7, #24]
}
 80056f2:	bf00      	nop
 80056f4:	e7fe      	b.n	80056f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056f6:	f001 fe25 	bl	8007344 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01f      	beq.n	8005746 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800570a:	f000 f977 	bl	80059fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	1e5a      	subs	r2, r3, #1
 8005712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005714:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00f      	beq.n	800573e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	3310      	adds	r3, #16
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fef4 	bl	8006510 <xTaskRemoveFromEventList>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d007      	beq.n	800573e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800572e:	4b3d      	ldr	r3, [pc, #244]	; (8005824 <xQueueReceive+0x1bc>)
 8005730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800573e:	f001 fe31 	bl	80073a4 <vPortExitCritical>
				return pdPASS;
 8005742:	2301      	movs	r3, #1
 8005744:	e069      	b.n	800581a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d103      	bne.n	8005754 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800574c:	f001 fe2a 	bl	80073a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005750:	2300      	movs	r3, #0
 8005752:	e062      	b.n	800581a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800575a:	f107 0310 	add.w	r3, r7, #16
 800575e:	4618      	mov	r0, r3
 8005760:	f000 ff3a 	bl	80065d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005764:	2301      	movs	r3, #1
 8005766:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005768:	f001 fe1c 	bl	80073a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800576c:	f000 fca6 	bl	80060bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005770:	f001 fde8 	bl	8007344 <vPortEnterCritical>
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800577a:	b25b      	sxtb	r3, r3
 800577c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005780:	d103      	bne.n	800578a <xQueueReceive+0x122>
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005790:	b25b      	sxtb	r3, r3
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d103      	bne.n	80057a0 <xQueueReceive+0x138>
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057a0:	f001 fe00 	bl	80073a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057a4:	1d3a      	adds	r2, r7, #4
 80057a6:	f107 0310 	add.w	r3, r7, #16
 80057aa:	4611      	mov	r1, r2
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 ff29 	bl	8006604 <xTaskCheckForTimeOut>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d123      	bne.n	8005800 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ba:	f000 f997 	bl	8005aec <prvIsQueueEmpty>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d017      	beq.n	80057f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	3324      	adds	r3, #36	; 0x24
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	4611      	mov	r1, r2
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fe4f 	bl	8006470 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d4:	f000 f938 	bl	8005a48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057d8:	f000 fc7e 	bl	80060d8 <xTaskResumeAll>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d189      	bne.n	80056f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80057e2:	4b10      	ldr	r3, [pc, #64]	; (8005824 <xQueueReceive+0x1bc>)
 80057e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	e780      	b.n	80056f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80057f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057f6:	f000 f927 	bl	8005a48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057fa:	f000 fc6d 	bl	80060d8 <xTaskResumeAll>
 80057fe:	e77a      	b.n	80056f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005802:	f000 f921 	bl	8005a48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005806:	f000 fc67 	bl	80060d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800580a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580c:	f000 f96e 	bl	8005aec <prvIsQueueEmpty>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	f43f af6f 	beq.w	80056f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005818:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800581a:	4618      	mov	r0, r3
 800581c:	3730      	adds	r7, #48	; 0x30
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	e000ed04 	.word	0xe000ed04

08005828 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b08e      	sub	sp, #56	; 0x38
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10a      	bne.n	8005854 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	623b      	str	r3, [r7, #32]
}
 8005850:	bf00      	nop
 8005852:	e7fe      	b.n	8005852 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d103      	bne.n	8005862 <xQueueReceiveFromISR+0x3a>
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <xQueueReceiveFromISR+0x3e>
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <xQueueReceiveFromISR+0x40>
 8005866:	2300      	movs	r3, #0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	61fb      	str	r3, [r7, #28]
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005882:	f001 fe41 	bl	8007508 <vPortValidateInterruptPriority>
	__asm volatile
 8005886:	f3ef 8211 	mrs	r2, BASEPRI
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	61ba      	str	r2, [r7, #24]
 800589c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800589e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d02f      	beq.n	800590e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058b8:	68b9      	ldr	r1, [r7, #8]
 80058ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058bc:	f000 f89e 	bl	80059fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	1e5a      	subs	r2, r3, #1
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80058c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d0:	d112      	bne.n	80058f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d016      	beq.n	8005908 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	3310      	adds	r3, #16
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fe16 	bl	8006510 <xTaskRemoveFromEventList>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00e      	beq.n	8005908 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00b      	beq.n	8005908 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	e007      	b.n	8005908 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80058f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058fc:	3301      	adds	r3, #1
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	b25a      	sxtb	r2, r3
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005908:	2301      	movs	r3, #1
 800590a:	637b      	str	r3, [r7, #52]	; 0x34
 800590c:	e001      	b.n	8005912 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800590e:	2300      	movs	r3, #0
 8005910:	637b      	str	r3, [r7, #52]	; 0x34
 8005912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005914:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f383 8811 	msr	BASEPRI, r3
}
 800591c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800591e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005920:	4618      	mov	r0, r3
 8005922:	3738      	adds	r7, #56	; 0x38
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10d      	bne.n	8005962 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d14d      	bne.n	80059ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	4618      	mov	r0, r3
 8005954:	f000 ffbc 	bl	80068d0 <xTaskPriorityDisinherit>
 8005958:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	609a      	str	r2, [r3, #8]
 8005960:	e043      	b.n	80059ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d119      	bne.n	800599c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6858      	ldr	r0, [r3, #4]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	461a      	mov	r2, r3
 8005972:	68b9      	ldr	r1, [r7, #8]
 8005974:	f002 f89c 	bl	8007ab0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	441a      	add	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	429a      	cmp	r2, r3
 8005990:	d32b      	bcc.n	80059ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	605a      	str	r2, [r3, #4]
 800599a:	e026      	b.n	80059ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	68d8      	ldr	r0, [r3, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	461a      	mov	r2, r3
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	f002 f882 	bl	8007ab0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	425b      	negs	r3, r3
 80059b6:	441a      	add	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d207      	bcs.n	80059d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	425b      	negs	r3, r3
 80059d2:	441a      	add	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d105      	bne.n	80059ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80059f2:	697b      	ldr	r3, [r7, #20]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d018      	beq.n	8005a40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	441a      	add	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d303      	bcc.n	8005a30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68d9      	ldr	r1, [r3, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a38:	461a      	mov	r2, r3
 8005a3a:	6838      	ldr	r0, [r7, #0]
 8005a3c:	f002 f838 	bl	8007ab0 <memcpy>
	}
}
 8005a40:	bf00      	nop
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a50:	f001 fc78 	bl	8007344 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a5c:	e011      	b.n	8005a82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d012      	beq.n	8005a8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3324      	adds	r3, #36	; 0x24
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fd50 	bl	8006510 <xTaskRemoveFromEventList>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a76:	f000 fe27 	bl	80066c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	dce9      	bgt.n	8005a5e <prvUnlockQueue+0x16>
 8005a8a:	e000      	b.n	8005a8e <prvUnlockQueue+0x46>
					break;
 8005a8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	22ff      	movs	r2, #255	; 0xff
 8005a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a96:	f001 fc85 	bl	80073a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a9a:	f001 fc53 	bl	8007344 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aa4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005aa6:	e011      	b.n	8005acc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d012      	beq.n	8005ad6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3310      	adds	r3, #16
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fd2b 	bl	8006510 <xTaskRemoveFromEventList>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ac0:	f000 fe02 	bl	80066c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ac4:	7bbb      	ldrb	r3, [r7, #14]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005acc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	dce9      	bgt.n	8005aa8 <prvUnlockQueue+0x60>
 8005ad4:	e000      	b.n	8005ad8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ad6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	22ff      	movs	r2, #255	; 0xff
 8005adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ae0:	f001 fc60 	bl	80073a4 <vPortExitCritical>
}
 8005ae4:	bf00      	nop
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005af4:	f001 fc26 	bl	8007344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d102      	bne.n	8005b06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b00:	2301      	movs	r3, #1
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	e001      	b.n	8005b0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b0a:	f001 fc4b 	bl	80073a4 <vPortExitCritical>

	return xReturn;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b20:	f001 fc10 	bl	8007344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d102      	bne.n	8005b36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b30:	2301      	movs	r3, #1
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	e001      	b.n	8005b3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b3a:	f001 fc33 	bl	80073a4 <vPortExitCritical>

	return xReturn;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	e014      	b.n	8005b82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b58:	4a0f      	ldr	r2, [pc, #60]	; (8005b98 <vQueueAddToRegistry+0x50>)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10b      	bne.n	8005b7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b64:	490c      	ldr	r1, [pc, #48]	; (8005b98 <vQueueAddToRegistry+0x50>)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b6e:	4a0a      	ldr	r2, [pc, #40]	; (8005b98 <vQueueAddToRegistry+0x50>)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	4413      	add	r3, r2
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b7a:	e006      	b.n	8005b8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b07      	cmp	r3, #7
 8005b86:	d9e7      	bls.n	8005b58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b88:	bf00      	nop
 8005b8a:	bf00      	nop
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	200009f0 	.word	0x200009f0

08005b9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005bac:	f001 fbca 	bl	8007344 <vPortEnterCritical>
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bb6:	b25b      	sxtb	r3, r3
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d103      	bne.n	8005bc6 <vQueueWaitForMessageRestricted+0x2a>
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bcc:	b25b      	sxtb	r3, r3
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd2:	d103      	bne.n	8005bdc <vQueueWaitForMessageRestricted+0x40>
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bdc:	f001 fbe2 	bl	80073a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d106      	bne.n	8005bf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	3324      	adds	r3, #36	; 0x24
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fc61 	bl	80064b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005bf6:	6978      	ldr	r0, [r7, #20]
 8005bf8:	f7ff ff26 	bl	8005a48 <prvUnlockQueue>
	}
 8005bfc:	bf00      	nop
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08e      	sub	sp, #56	; 0x38
 8005c08:	af04      	add	r7, sp, #16
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	623b      	str	r3, [r7, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10a      	bne.n	8005c4a <xTaskCreateStatic+0x46>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	61fb      	str	r3, [r7, #28]
}
 8005c46:	bf00      	nop
 8005c48:	e7fe      	b.n	8005c48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c4a:	23a8      	movs	r3, #168	; 0xa8
 8005c4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2ba8      	cmp	r3, #168	; 0xa8
 8005c52:	d00a      	beq.n	8005c6a <xTaskCreateStatic+0x66>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	61bb      	str	r3, [r7, #24]
}
 8005c66:	bf00      	nop
 8005c68:	e7fe      	b.n	8005c68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d01e      	beq.n	8005cb0 <xTaskCreateStatic+0xac>
 8005c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d01b      	beq.n	8005cb0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	9303      	str	r3, [sp, #12]
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	9302      	str	r3, [sp, #8]
 8005c92:	f107 0314 	add.w	r3, r7, #20
 8005c96:	9301      	str	r3, [sp, #4]
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f850 	bl	8005d48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005caa:	f000 f8f3 	bl	8005e94 <prvAddNewTaskToReadyList>
 8005cae:	e001      	b.n	8005cb4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005cb4:	697b      	ldr	r3, [r7, #20]
	}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3728      	adds	r7, #40	; 0x28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b08c      	sub	sp, #48	; 0x30
 8005cc2:	af04      	add	r7, sp, #16
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	60b9      	str	r1, [r7, #8]
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005cce:	88fb      	ldrh	r3, [r7, #6]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f001 fc58 	bl	8007588 <pvPortMalloc>
 8005cd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00e      	beq.n	8005cfe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ce0:	20a8      	movs	r0, #168	; 0xa8
 8005ce2:	f001 fc51 	bl	8007588 <pvPortMalloc>
 8005ce6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8005cf4:	e005      	b.n	8005d02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005cf6:	6978      	ldr	r0, [r7, #20]
 8005cf8:	f001 fd12 	bl	8007720 <vPortFree>
 8005cfc:	e001      	b.n	8005d02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d017      	beq.n	8005d38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d10:	88fa      	ldrh	r2, [r7, #6]
 8005d12:	2300      	movs	r3, #0
 8005d14:	9303      	str	r3, [sp, #12]
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	9302      	str	r3, [sp, #8]
 8005d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68b9      	ldr	r1, [r7, #8]
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f80e 	bl	8005d48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d2c:	69f8      	ldr	r0, [r7, #28]
 8005d2e:	f000 f8b1 	bl	8005e94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d32:	2301      	movs	r3, #1
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	e002      	b.n	8005d3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d38:	f04f 33ff 	mov.w	r3, #4294967295
 8005d3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
	}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3720      	adds	r7, #32
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	461a      	mov	r2, r3
 8005d60:	21a5      	movs	r1, #165	; 0xa5
 8005d62:	f001 fe1b 	bl	800799c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d70:	3b01      	subs	r3, #1
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	f023 0307 	bic.w	r3, r3, #7
 8005d7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	617b      	str	r3, [r7, #20]
}
 8005d9c:	bf00      	nop
 8005d9e:	e7fe      	b.n	8005d9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d01f      	beq.n	8005de6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005da6:	2300      	movs	r3, #0
 8005da8:	61fb      	str	r3, [r7, #28]
 8005daa:	e012      	b.n	8005dd2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	4413      	add	r3, r2
 8005db2:	7819      	ldrb	r1, [r3, #0]
 8005db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	4413      	add	r3, r2
 8005dba:	3334      	adds	r3, #52	; 0x34
 8005dbc:	460a      	mov	r2, r1
 8005dbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d006      	beq.n	8005dda <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	61fb      	str	r3, [r7, #28]
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	2b0f      	cmp	r3, #15
 8005dd6:	d9e9      	bls.n	8005dac <prvInitialiseNewTask+0x64>
 8005dd8:	e000      	b.n	8005ddc <prvInitialiseNewTask+0x94>
			{
				break;
 8005dda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005de4:	e003      	b.n	8005dee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	2b37      	cmp	r3, #55	; 0x37
 8005df2:	d901      	bls.n	8005df8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005df4:	2337      	movs	r3, #55	; 0x37
 8005df6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	2200      	movs	r2, #0
 8005e08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff f8be 	bl	8004f90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e16:	3318      	adds	r3, #24
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff f8b9 	bl	8004f90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	3354      	adds	r3, #84	; 0x54
 8005e48:	224c      	movs	r2, #76	; 0x4c
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f001 fda5 	bl	800799c <memset>
 8005e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e54:	4a0c      	ldr	r2, [pc, #48]	; (8005e88 <prvInitialiseNewTask+0x140>)
 8005e56:	659a      	str	r2, [r3, #88]	; 0x58
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	4a0c      	ldr	r2, [pc, #48]	; (8005e8c <prvInitialiseNewTask+0x144>)
 8005e5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	4a0b      	ldr	r2, [pc, #44]	; (8005e90 <prvInitialiseNewTask+0x148>)
 8005e62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	69b8      	ldr	r0, [r7, #24]
 8005e6a:	f001 f941 	bl	80070f0 <pxPortInitialiseStack>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e80:	bf00      	nop
 8005e82:	3720      	adds	r7, #32
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20001c3c 	.word	0x20001c3c
 8005e8c:	20001ca4 	.word	0x20001ca4
 8005e90:	20001d0c 	.word	0x20001d0c

08005e94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e9c:	f001 fa52 	bl	8007344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ea0:	4b2d      	ldr	r3, [pc, #180]	; (8005f58 <prvAddNewTaskToReadyList+0xc4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	4a2c      	ldr	r2, [pc, #176]	; (8005f58 <prvAddNewTaskToReadyList+0xc4>)
 8005ea8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005eaa:	4b2c      	ldr	r3, [pc, #176]	; (8005f5c <prvAddNewTaskToReadyList+0xc8>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005eb2:	4a2a      	ldr	r2, [pc, #168]	; (8005f5c <prvAddNewTaskToReadyList+0xc8>)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005eb8:	4b27      	ldr	r3, [pc, #156]	; (8005f58 <prvAddNewTaskToReadyList+0xc4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d110      	bne.n	8005ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ec0:	f000 fc26 	bl	8006710 <prvInitialiseTaskLists>
 8005ec4:	e00d      	b.n	8005ee2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ec6:	4b26      	ldr	r3, [pc, #152]	; (8005f60 <prvAddNewTaskToReadyList+0xcc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d109      	bne.n	8005ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ece:	4b23      	ldr	r3, [pc, #140]	; (8005f5c <prvAddNewTaskToReadyList+0xc8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d802      	bhi.n	8005ee2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005edc:	4a1f      	ldr	r2, [pc, #124]	; (8005f5c <prvAddNewTaskToReadyList+0xc8>)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ee2:	4b20      	ldr	r3, [pc, #128]	; (8005f64 <prvAddNewTaskToReadyList+0xd0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	4a1e      	ldr	r2, [pc, #120]	; (8005f64 <prvAddNewTaskToReadyList+0xd0>)
 8005eea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005eec:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <prvAddNewTaskToReadyList+0xd0>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef8:	4b1b      	ldr	r3, [pc, #108]	; (8005f68 <prvAddNewTaskToReadyList+0xd4>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d903      	bls.n	8005f08 <prvAddNewTaskToReadyList+0x74>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	4a18      	ldr	r2, [pc, #96]	; (8005f68 <prvAddNewTaskToReadyList+0xd4>)
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4a15      	ldr	r2, [pc, #84]	; (8005f6c <prvAddNewTaskToReadyList+0xd8>)
 8005f16:	441a      	add	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4610      	mov	r0, r2
 8005f20:	f7ff f843 	bl	8004faa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f24:	f001 fa3e 	bl	80073a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f28:	4b0d      	ldr	r3, [pc, #52]	; (8005f60 <prvAddNewTaskToReadyList+0xcc>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00e      	beq.n	8005f4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f30:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <prvAddNewTaskToReadyList+0xc8>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d207      	bcs.n	8005f4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f3e:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <prvAddNewTaskToReadyList+0xdc>)
 8005f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f4e:	bf00      	nop
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000f04 	.word	0x20000f04
 8005f5c:	20000a30 	.word	0x20000a30
 8005f60:	20000f10 	.word	0x20000f10
 8005f64:	20000f20 	.word	0x20000f20
 8005f68:	20000f0c 	.word	0x20000f0c
 8005f6c:	20000a34 	.word	0x20000a34
 8005f70:	e000ed04 	.word	0xe000ed04

08005f74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d017      	beq.n	8005fb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f86:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <vTaskDelay+0x60>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <vTaskDelay+0x30>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	60bb      	str	r3, [r7, #8]
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005fa4:	f000 f88a 	bl	80060bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005fa8:	2100      	movs	r1, #0
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fcfe 	bl	80069ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005fb0:	f000 f892 	bl	80060d8 <xTaskResumeAll>
 8005fb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d107      	bne.n	8005fcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005fbc:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <vTaskDelay+0x64>)
 8005fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20000f2c 	.word	0x20000f2c
 8005fd8:	e000ed04 	.word	0xe000ed04

08005fdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08a      	sub	sp, #40	; 0x28
 8005fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005fea:	463a      	mov	r2, r7
 8005fec:	1d39      	adds	r1, r7, #4
 8005fee:	f107 0308 	add.w	r3, r7, #8
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fe ff78 	bl	8004ee8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	9202      	str	r2, [sp, #8]
 8006000:	9301      	str	r3, [sp, #4]
 8006002:	2300      	movs	r3, #0
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	2300      	movs	r3, #0
 8006008:	460a      	mov	r2, r1
 800600a:	4924      	ldr	r1, [pc, #144]	; (800609c <vTaskStartScheduler+0xc0>)
 800600c:	4824      	ldr	r0, [pc, #144]	; (80060a0 <vTaskStartScheduler+0xc4>)
 800600e:	f7ff fdf9 	bl	8005c04 <xTaskCreateStatic>
 8006012:	4603      	mov	r3, r0
 8006014:	4a23      	ldr	r2, [pc, #140]	; (80060a4 <vTaskStartScheduler+0xc8>)
 8006016:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006018:	4b22      	ldr	r3, [pc, #136]	; (80060a4 <vTaskStartScheduler+0xc8>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006020:	2301      	movs	r3, #1
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	e001      	b.n	800602a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006026:	2300      	movs	r3, #0
 8006028:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d102      	bne.n	8006036 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006030:	f000 fd10 	bl	8006a54 <xTimerCreateTimerTask>
 8006034:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d11b      	bne.n	8006074 <vTaskStartScheduler+0x98>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	613b      	str	r3, [r7, #16]
}
 800604e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006050:	4b15      	ldr	r3, [pc, #84]	; (80060a8 <vTaskStartScheduler+0xcc>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3354      	adds	r3, #84	; 0x54
 8006056:	4a15      	ldr	r2, [pc, #84]	; (80060ac <vTaskStartScheduler+0xd0>)
 8006058:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800605a:	4b15      	ldr	r3, [pc, #84]	; (80060b0 <vTaskStartScheduler+0xd4>)
 800605c:	f04f 32ff 	mov.w	r2, #4294967295
 8006060:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006062:	4b14      	ldr	r3, [pc, #80]	; (80060b4 <vTaskStartScheduler+0xd8>)
 8006064:	2201      	movs	r2, #1
 8006066:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006068:	4b13      	ldr	r3, [pc, #76]	; (80060b8 <vTaskStartScheduler+0xdc>)
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800606e:	f001 f8c7 	bl	8007200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006072:	e00e      	b.n	8006092 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	d10a      	bne.n	8006092 <vTaskStartScheduler+0xb6>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	60fb      	str	r3, [r7, #12]
}
 800608e:	bf00      	nop
 8006090:	e7fe      	b.n	8006090 <vTaskStartScheduler+0xb4>
}
 8006092:	bf00      	nop
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	08008394 	.word	0x08008394
 80060a0:	080066e1 	.word	0x080066e1
 80060a4:	20000f28 	.word	0x20000f28
 80060a8:	20000a30 	.word	0x20000a30
 80060ac:	200000a4 	.word	0x200000a4
 80060b0:	20000f24 	.word	0x20000f24
 80060b4:	20000f10 	.word	0x20000f10
 80060b8:	20000f08 	.word	0x20000f08

080060bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80060c0:	4b04      	ldr	r3, [pc, #16]	; (80060d4 <vTaskSuspendAll+0x18>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3301      	adds	r3, #1
 80060c6:	4a03      	ldr	r2, [pc, #12]	; (80060d4 <vTaskSuspendAll+0x18>)
 80060c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80060ca:	bf00      	nop
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	20000f2c 	.word	0x20000f2c

080060d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060de:	2300      	movs	r3, #0
 80060e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060e6:	4b42      	ldr	r3, [pc, #264]	; (80061f0 <xTaskResumeAll+0x118>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10a      	bne.n	8006104 <xTaskResumeAll+0x2c>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	603b      	str	r3, [r7, #0]
}
 8006100:	bf00      	nop
 8006102:	e7fe      	b.n	8006102 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006104:	f001 f91e 	bl	8007344 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006108:	4b39      	ldr	r3, [pc, #228]	; (80061f0 <xTaskResumeAll+0x118>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3b01      	subs	r3, #1
 800610e:	4a38      	ldr	r2, [pc, #224]	; (80061f0 <xTaskResumeAll+0x118>)
 8006110:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006112:	4b37      	ldr	r3, [pc, #220]	; (80061f0 <xTaskResumeAll+0x118>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d162      	bne.n	80061e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800611a:	4b36      	ldr	r3, [pc, #216]	; (80061f4 <xTaskResumeAll+0x11c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d05e      	beq.n	80061e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006122:	e02f      	b.n	8006184 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006124:	4b34      	ldr	r3, [pc, #208]	; (80061f8 <xTaskResumeAll+0x120>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3318      	adds	r3, #24
 8006130:	4618      	mov	r0, r3
 8006132:	f7fe ff97 	bl	8005064 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3304      	adds	r3, #4
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe ff92 	bl	8005064 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006144:	4b2d      	ldr	r3, [pc, #180]	; (80061fc <xTaskResumeAll+0x124>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d903      	bls.n	8006154 <xTaskResumeAll+0x7c>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	4a2a      	ldr	r2, [pc, #168]	; (80061fc <xTaskResumeAll+0x124>)
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4a27      	ldr	r2, [pc, #156]	; (8006200 <xTaskResumeAll+0x128>)
 8006162:	441a      	add	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3304      	adds	r3, #4
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f7fe ff1d 	bl	8004faa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006174:	4b23      	ldr	r3, [pc, #140]	; (8006204 <xTaskResumeAll+0x12c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617a:	429a      	cmp	r2, r3
 800617c:	d302      	bcc.n	8006184 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800617e:	4b22      	ldr	r3, [pc, #136]	; (8006208 <xTaskResumeAll+0x130>)
 8006180:	2201      	movs	r2, #1
 8006182:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006184:	4b1c      	ldr	r3, [pc, #112]	; (80061f8 <xTaskResumeAll+0x120>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1cb      	bne.n	8006124 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006192:	f000 fb5f 	bl	8006854 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006196:	4b1d      	ldr	r3, [pc, #116]	; (800620c <xTaskResumeAll+0x134>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d010      	beq.n	80061c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061a2:	f000 f847 	bl	8006234 <xTaskIncrementTick>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80061ac:	4b16      	ldr	r3, [pc, #88]	; (8006208 <xTaskResumeAll+0x130>)
 80061ae:	2201      	movs	r2, #1
 80061b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1f1      	bne.n	80061a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80061be:	4b13      	ldr	r3, [pc, #76]	; (800620c <xTaskResumeAll+0x134>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061c4:	4b10      	ldr	r3, [pc, #64]	; (8006208 <xTaskResumeAll+0x130>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d009      	beq.n	80061e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061cc:	2301      	movs	r3, #1
 80061ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061d0:	4b0f      	ldr	r3, [pc, #60]	; (8006210 <xTaskResumeAll+0x138>)
 80061d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061e0:	f001 f8e0 	bl	80073a4 <vPortExitCritical>

	return xAlreadyYielded;
 80061e4:	68bb      	ldr	r3, [r7, #8]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000f2c 	.word	0x20000f2c
 80061f4:	20000f04 	.word	0x20000f04
 80061f8:	20000ec4 	.word	0x20000ec4
 80061fc:	20000f0c 	.word	0x20000f0c
 8006200:	20000a34 	.word	0x20000a34
 8006204:	20000a30 	.word	0x20000a30
 8006208:	20000f18 	.word	0x20000f18
 800620c:	20000f14 	.word	0x20000f14
 8006210:	e000ed04 	.word	0xe000ed04

08006214 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800621a:	4b05      	ldr	r3, [pc, #20]	; (8006230 <xTaskGetTickCount+0x1c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006220:	687b      	ldr	r3, [r7, #4]
}
 8006222:	4618      	mov	r0, r3
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	20000f08 	.word	0x20000f08

08006234 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800623a:	2300      	movs	r3, #0
 800623c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800623e:	4b4f      	ldr	r3, [pc, #316]	; (800637c <xTaskIncrementTick+0x148>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f040 808f 	bne.w	8006366 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006248:	4b4d      	ldr	r3, [pc, #308]	; (8006380 <xTaskIncrementTick+0x14c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3301      	adds	r3, #1
 800624e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006250:	4a4b      	ldr	r2, [pc, #300]	; (8006380 <xTaskIncrementTick+0x14c>)
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d120      	bne.n	800629e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800625c:	4b49      	ldr	r3, [pc, #292]	; (8006384 <xTaskIncrementTick+0x150>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <xTaskIncrementTick+0x48>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	603b      	str	r3, [r7, #0]
}
 8006278:	bf00      	nop
 800627a:	e7fe      	b.n	800627a <xTaskIncrementTick+0x46>
 800627c:	4b41      	ldr	r3, [pc, #260]	; (8006384 <xTaskIncrementTick+0x150>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	4b41      	ldr	r3, [pc, #260]	; (8006388 <xTaskIncrementTick+0x154>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a3f      	ldr	r2, [pc, #252]	; (8006384 <xTaskIncrementTick+0x150>)
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	4a3f      	ldr	r2, [pc, #252]	; (8006388 <xTaskIncrementTick+0x154>)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	4b3e      	ldr	r3, [pc, #248]	; (800638c <xTaskIncrementTick+0x158>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3301      	adds	r3, #1
 8006296:	4a3d      	ldr	r2, [pc, #244]	; (800638c <xTaskIncrementTick+0x158>)
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	f000 fadb 	bl	8006854 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800629e:	4b3c      	ldr	r3, [pc, #240]	; (8006390 <xTaskIncrementTick+0x15c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d349      	bcc.n	800633c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062a8:	4b36      	ldr	r3, [pc, #216]	; (8006384 <xTaskIncrementTick+0x150>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d104      	bne.n	80062bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062b2:	4b37      	ldr	r3, [pc, #220]	; (8006390 <xTaskIncrementTick+0x15c>)
 80062b4:	f04f 32ff 	mov.w	r2, #4294967295
 80062b8:	601a      	str	r2, [r3, #0]
					break;
 80062ba:	e03f      	b.n	800633c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062bc:	4b31      	ldr	r3, [pc, #196]	; (8006384 <xTaskIncrementTick+0x150>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d203      	bcs.n	80062dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062d4:	4a2e      	ldr	r2, [pc, #184]	; (8006390 <xTaskIncrementTick+0x15c>)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062da:	e02f      	b.n	800633c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	3304      	adds	r3, #4
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe febf 	bl	8005064 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d004      	beq.n	80062f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	3318      	adds	r3, #24
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fe feb6 	bl	8005064 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fc:	4b25      	ldr	r3, [pc, #148]	; (8006394 <xTaskIncrementTick+0x160>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	429a      	cmp	r2, r3
 8006302:	d903      	bls.n	800630c <xTaskIncrementTick+0xd8>
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	4a22      	ldr	r2, [pc, #136]	; (8006394 <xTaskIncrementTick+0x160>)
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4a1f      	ldr	r2, [pc, #124]	; (8006398 <xTaskIncrementTick+0x164>)
 800631a:	441a      	add	r2, r3
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	3304      	adds	r3, #4
 8006320:	4619      	mov	r1, r3
 8006322:	4610      	mov	r0, r2
 8006324:	f7fe fe41 	bl	8004faa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632c:	4b1b      	ldr	r3, [pc, #108]	; (800639c <xTaskIncrementTick+0x168>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	429a      	cmp	r2, r3
 8006334:	d3b8      	bcc.n	80062a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006336:	2301      	movs	r3, #1
 8006338:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800633a:	e7b5      	b.n	80062a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800633c:	4b17      	ldr	r3, [pc, #92]	; (800639c <xTaskIncrementTick+0x168>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006342:	4915      	ldr	r1, [pc, #84]	; (8006398 <xTaskIncrementTick+0x164>)
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	440b      	add	r3, r1
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d901      	bls.n	8006358 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006354:	2301      	movs	r3, #1
 8006356:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006358:	4b11      	ldr	r3, [pc, #68]	; (80063a0 <xTaskIncrementTick+0x16c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d007      	beq.n	8006370 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006360:	2301      	movs	r3, #1
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	e004      	b.n	8006370 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006366:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <xTaskIncrementTick+0x170>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3301      	adds	r3, #1
 800636c:	4a0d      	ldr	r2, [pc, #52]	; (80063a4 <xTaskIncrementTick+0x170>)
 800636e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006370:	697b      	ldr	r3, [r7, #20]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20000f2c 	.word	0x20000f2c
 8006380:	20000f08 	.word	0x20000f08
 8006384:	20000ebc 	.word	0x20000ebc
 8006388:	20000ec0 	.word	0x20000ec0
 800638c:	20000f1c 	.word	0x20000f1c
 8006390:	20000f24 	.word	0x20000f24
 8006394:	20000f0c 	.word	0x20000f0c
 8006398:	20000a34 	.word	0x20000a34
 800639c:	20000a30 	.word	0x20000a30
 80063a0:	20000f18 	.word	0x20000f18
 80063a4:	20000f14 	.word	0x20000f14

080063a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063ae:	4b2a      	ldr	r3, [pc, #168]	; (8006458 <vTaskSwitchContext+0xb0>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063b6:	4b29      	ldr	r3, [pc, #164]	; (800645c <vTaskSwitchContext+0xb4>)
 80063b8:	2201      	movs	r2, #1
 80063ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063bc:	e046      	b.n	800644c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80063be:	4b27      	ldr	r3, [pc, #156]	; (800645c <vTaskSwitchContext+0xb4>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c4:	4b26      	ldr	r3, [pc, #152]	; (8006460 <vTaskSwitchContext+0xb8>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	e010      	b.n	80063ee <vTaskSwitchContext+0x46>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10a      	bne.n	80063e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	607b      	str	r3, [r7, #4]
}
 80063e4:	bf00      	nop
 80063e6:	e7fe      	b.n	80063e6 <vTaskSwitchContext+0x3e>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	491d      	ldr	r1, [pc, #116]	; (8006464 <vTaskSwitchContext+0xbc>)
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	440b      	add	r3, r1
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0e4      	beq.n	80063cc <vTaskSwitchContext+0x24>
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4613      	mov	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4a15      	ldr	r2, [pc, #84]	; (8006464 <vTaskSwitchContext+0xbc>)
 800640e:	4413      	add	r3, r2
 8006410:	60bb      	str	r3, [r7, #8]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	605a      	str	r2, [r3, #4]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	3308      	adds	r3, #8
 8006424:	429a      	cmp	r2, r3
 8006426:	d104      	bne.n	8006432 <vTaskSwitchContext+0x8a>
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	605a      	str	r2, [r3, #4]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4a0b      	ldr	r2, [pc, #44]	; (8006468 <vTaskSwitchContext+0xc0>)
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	4a08      	ldr	r2, [pc, #32]	; (8006460 <vTaskSwitchContext+0xb8>)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006442:	4b09      	ldr	r3, [pc, #36]	; (8006468 <vTaskSwitchContext+0xc0>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3354      	adds	r3, #84	; 0x54
 8006448:	4a08      	ldr	r2, [pc, #32]	; (800646c <vTaskSwitchContext+0xc4>)
 800644a:	6013      	str	r3, [r2, #0]
}
 800644c:	bf00      	nop
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	20000f2c 	.word	0x20000f2c
 800645c:	20000f18 	.word	0x20000f18
 8006460:	20000f0c 	.word	0x20000f0c
 8006464:	20000a34 	.word	0x20000a34
 8006468:	20000a30 	.word	0x20000a30
 800646c:	200000a4 	.word	0x200000a4

08006470 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10a      	bne.n	8006496 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	60fb      	str	r3, [r7, #12]
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006496:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <vTaskPlaceOnEventList+0x44>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3318      	adds	r3, #24
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7fe fda7 	bl	8004ff2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064a4:	2101      	movs	r1, #1
 80064a6:	6838      	ldr	r0, [r7, #0]
 80064a8:	f000 fa80 	bl	80069ac <prvAddCurrentTaskToDelayedList>
}
 80064ac:	bf00      	nop
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	20000a30 	.word	0x20000a30

080064b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10a      	bne.n	80064e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	617b      	str	r3, [r7, #20]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064e0:	4b0a      	ldr	r3, [pc, #40]	; (800650c <vTaskPlaceOnEventListRestricted+0x54>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3318      	adds	r3, #24
 80064e6:	4619      	mov	r1, r3
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7fe fd5e 	bl	8004faa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80064f4:	f04f 33ff 	mov.w	r3, #4294967295
 80064f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	68b8      	ldr	r0, [r7, #8]
 80064fe:	f000 fa55 	bl	80069ac <prvAddCurrentTaskToDelayedList>
	}
 8006502:	bf00      	nop
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000a30 	.word	0x20000a30

08006510 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10a      	bne.n	800653c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	60fb      	str	r3, [r7, #12]
}
 8006538:	bf00      	nop
 800653a:	e7fe      	b.n	800653a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	3318      	adds	r3, #24
 8006540:	4618      	mov	r0, r3
 8006542:	f7fe fd8f 	bl	8005064 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006546:	4b1e      	ldr	r3, [pc, #120]	; (80065c0 <xTaskRemoveFromEventList+0xb0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d11d      	bne.n	800658a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	3304      	adds	r3, #4
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe fd86 	bl	8005064 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655c:	4b19      	ldr	r3, [pc, #100]	; (80065c4 <xTaskRemoveFromEventList+0xb4>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	429a      	cmp	r2, r3
 8006562:	d903      	bls.n	800656c <xTaskRemoveFromEventList+0x5c>
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	4a16      	ldr	r2, [pc, #88]	; (80065c4 <xTaskRemoveFromEventList+0xb4>)
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4a13      	ldr	r2, [pc, #76]	; (80065c8 <xTaskRemoveFromEventList+0xb8>)
 800657a:	441a      	add	r2, r3
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	3304      	adds	r3, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f7fe fd11 	bl	8004faa <vListInsertEnd>
 8006588:	e005      	b.n	8006596 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	3318      	adds	r3, #24
 800658e:	4619      	mov	r1, r3
 8006590:	480e      	ldr	r0, [pc, #56]	; (80065cc <xTaskRemoveFromEventList+0xbc>)
 8006592:	f7fe fd0a 	bl	8004faa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659a:	4b0d      	ldr	r3, [pc, #52]	; (80065d0 <xTaskRemoveFromEventList+0xc0>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d905      	bls.n	80065b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065a4:	2301      	movs	r3, #1
 80065a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065a8:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <xTaskRemoveFromEventList+0xc4>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	e001      	b.n	80065b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80065b0:	2300      	movs	r3, #0
 80065b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80065b4:	697b      	ldr	r3, [r7, #20]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20000f2c 	.word	0x20000f2c
 80065c4:	20000f0c 	.word	0x20000f0c
 80065c8:	20000a34 	.word	0x20000a34
 80065cc:	20000ec4 	.word	0x20000ec4
 80065d0:	20000a30 	.word	0x20000a30
 80065d4:	20000f18 	.word	0x20000f18

080065d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065e0:	4b06      	ldr	r3, [pc, #24]	; (80065fc <vTaskInternalSetTimeOutState+0x24>)
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065e8:	4b05      	ldr	r3, [pc, #20]	; (8006600 <vTaskInternalSetTimeOutState+0x28>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	605a      	str	r2, [r3, #4]
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	20000f1c 	.word	0x20000f1c
 8006600:	20000f08 	.word	0x20000f08

08006604 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b088      	sub	sp, #32
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10a      	bne.n	800662a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	613b      	str	r3, [r7, #16]
}
 8006626:	bf00      	nop
 8006628:	e7fe      	b.n	8006628 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10a      	bne.n	8006646 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	60fb      	str	r3, [r7, #12]
}
 8006642:	bf00      	nop
 8006644:	e7fe      	b.n	8006644 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006646:	f000 fe7d 	bl	8007344 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800664a:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <xTaskCheckForTimeOut+0xbc>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006662:	d102      	bne.n	800666a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006664:	2300      	movs	r3, #0
 8006666:	61fb      	str	r3, [r7, #28]
 8006668:	e023      	b.n	80066b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	4b15      	ldr	r3, [pc, #84]	; (80066c4 <xTaskCheckForTimeOut+0xc0>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d007      	beq.n	8006686 <xTaskCheckForTimeOut+0x82>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	429a      	cmp	r2, r3
 800667e:	d302      	bcc.n	8006686 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006680:	2301      	movs	r3, #1
 8006682:	61fb      	str	r3, [r7, #28]
 8006684:	e015      	b.n	80066b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	429a      	cmp	r2, r3
 800668e:	d20b      	bcs.n	80066a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	1ad2      	subs	r2, r2, r3
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff ff9b 	bl	80065d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066a2:	2300      	movs	r3, #0
 80066a4:	61fb      	str	r3, [r7, #28]
 80066a6:	e004      	b.n	80066b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066ae:	2301      	movs	r3, #1
 80066b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066b2:	f000 fe77 	bl	80073a4 <vPortExitCritical>

	return xReturn;
 80066b6:	69fb      	ldr	r3, [r7, #28]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3720      	adds	r7, #32
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	20000f08 	.word	0x20000f08
 80066c4:	20000f1c 	.word	0x20000f1c

080066c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066c8:	b480      	push	{r7}
 80066ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066cc:	4b03      	ldr	r3, [pc, #12]	; (80066dc <vTaskMissedYield+0x14>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
}
 80066d2:	bf00      	nop
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	20000f18 	.word	0x20000f18

080066e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066e8:	f000 f852 	bl	8006790 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066ec:	4b06      	ldr	r3, [pc, #24]	; (8006708 <prvIdleTask+0x28>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d9f9      	bls.n	80066e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80066f4:	4b05      	ldr	r3, [pc, #20]	; (800670c <prvIdleTask+0x2c>)
 80066f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006704:	e7f0      	b.n	80066e8 <prvIdleTask+0x8>
 8006706:	bf00      	nop
 8006708:	20000a34 	.word	0x20000a34
 800670c:	e000ed04 	.word	0xe000ed04

08006710 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006716:	2300      	movs	r3, #0
 8006718:	607b      	str	r3, [r7, #4]
 800671a:	e00c      	b.n	8006736 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4a12      	ldr	r2, [pc, #72]	; (8006770 <prvInitialiseTaskLists+0x60>)
 8006728:	4413      	add	r3, r2
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe fc10 	bl	8004f50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3301      	adds	r3, #1
 8006734:	607b      	str	r3, [r7, #4]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b37      	cmp	r3, #55	; 0x37
 800673a:	d9ef      	bls.n	800671c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800673c:	480d      	ldr	r0, [pc, #52]	; (8006774 <prvInitialiseTaskLists+0x64>)
 800673e:	f7fe fc07 	bl	8004f50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006742:	480d      	ldr	r0, [pc, #52]	; (8006778 <prvInitialiseTaskLists+0x68>)
 8006744:	f7fe fc04 	bl	8004f50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006748:	480c      	ldr	r0, [pc, #48]	; (800677c <prvInitialiseTaskLists+0x6c>)
 800674a:	f7fe fc01 	bl	8004f50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800674e:	480c      	ldr	r0, [pc, #48]	; (8006780 <prvInitialiseTaskLists+0x70>)
 8006750:	f7fe fbfe 	bl	8004f50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006754:	480b      	ldr	r0, [pc, #44]	; (8006784 <prvInitialiseTaskLists+0x74>)
 8006756:	f7fe fbfb 	bl	8004f50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800675a:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <prvInitialiseTaskLists+0x78>)
 800675c:	4a05      	ldr	r2, [pc, #20]	; (8006774 <prvInitialiseTaskLists+0x64>)
 800675e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006760:	4b0a      	ldr	r3, [pc, #40]	; (800678c <prvInitialiseTaskLists+0x7c>)
 8006762:	4a05      	ldr	r2, [pc, #20]	; (8006778 <prvInitialiseTaskLists+0x68>)
 8006764:	601a      	str	r2, [r3, #0]
}
 8006766:	bf00      	nop
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20000a34 	.word	0x20000a34
 8006774:	20000e94 	.word	0x20000e94
 8006778:	20000ea8 	.word	0x20000ea8
 800677c:	20000ec4 	.word	0x20000ec4
 8006780:	20000ed8 	.word	0x20000ed8
 8006784:	20000ef0 	.word	0x20000ef0
 8006788:	20000ebc 	.word	0x20000ebc
 800678c:	20000ec0 	.word	0x20000ec0

08006790 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006796:	e019      	b.n	80067cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006798:	f000 fdd4 	bl	8007344 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800679c:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <prvCheckTasksWaitingTermination+0x50>)
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3304      	adds	r3, #4
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fe fc5b 	bl	8005064 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067ae:	4b0d      	ldr	r3, [pc, #52]	; (80067e4 <prvCheckTasksWaitingTermination+0x54>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	4a0b      	ldr	r2, [pc, #44]	; (80067e4 <prvCheckTasksWaitingTermination+0x54>)
 80067b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067b8:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <prvCheckTasksWaitingTermination+0x58>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3b01      	subs	r3, #1
 80067be:	4a0a      	ldr	r2, [pc, #40]	; (80067e8 <prvCheckTasksWaitingTermination+0x58>)
 80067c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067c2:	f000 fdef 	bl	80073a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f810 	bl	80067ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067cc:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <prvCheckTasksWaitingTermination+0x58>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e1      	bne.n	8006798 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000ed8 	.word	0x20000ed8
 80067e4:	20000f04 	.word	0x20000f04
 80067e8:	20000eec 	.word	0x20000eec

080067ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3354      	adds	r3, #84	; 0x54
 80067f8:	4618      	mov	r0, r3
 80067fa:	f001 f8d7 	bl	80079ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006804:	2b00      	cmp	r3, #0
 8006806:	d108      	bne.n	800681a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680c:	4618      	mov	r0, r3
 800680e:	f000 ff87 	bl	8007720 <vPortFree>
				vPortFree( pxTCB );
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 ff84 	bl	8007720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006818:	e018      	b.n	800684c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006820:	2b01      	cmp	r3, #1
 8006822:	d103      	bne.n	800682c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 ff7b 	bl	8007720 <vPortFree>
	}
 800682a:	e00f      	b.n	800684c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006832:	2b02      	cmp	r3, #2
 8006834:	d00a      	beq.n	800684c <prvDeleteTCB+0x60>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	60fb      	str	r3, [r7, #12]
}
 8006848:	bf00      	nop
 800684a:	e7fe      	b.n	800684a <prvDeleteTCB+0x5e>
	}
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800685a:	4b0c      	ldr	r3, [pc, #48]	; (800688c <prvResetNextTaskUnblockTime+0x38>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d104      	bne.n	800686e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006864:	4b0a      	ldr	r3, [pc, #40]	; (8006890 <prvResetNextTaskUnblockTime+0x3c>)
 8006866:	f04f 32ff 	mov.w	r2, #4294967295
 800686a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800686c:	e008      	b.n	8006880 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800686e:	4b07      	ldr	r3, [pc, #28]	; (800688c <prvResetNextTaskUnblockTime+0x38>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	4a04      	ldr	r2, [pc, #16]	; (8006890 <prvResetNextTaskUnblockTime+0x3c>)
 800687e:	6013      	str	r3, [r2, #0]
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	20000ebc 	.word	0x20000ebc
 8006890:	20000f24 	.word	0x20000f24

08006894 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800689a:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <xTaskGetSchedulerState+0x34>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d102      	bne.n	80068a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068a2:	2301      	movs	r3, #1
 80068a4:	607b      	str	r3, [r7, #4]
 80068a6:	e008      	b.n	80068ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068a8:	4b08      	ldr	r3, [pc, #32]	; (80068cc <xTaskGetSchedulerState+0x38>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d102      	bne.n	80068b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068b0:	2302      	movs	r3, #2
 80068b2:	607b      	str	r3, [r7, #4]
 80068b4:	e001      	b.n	80068ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068b6:	2300      	movs	r3, #0
 80068b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068ba:	687b      	ldr	r3, [r7, #4]
	}
 80068bc:	4618      	mov	r0, r3
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	20000f10 	.word	0x20000f10
 80068cc:	20000f2c 	.word	0x20000f2c

080068d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068dc:	2300      	movs	r3, #0
 80068de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d056      	beq.n	8006994 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80068e6:	4b2e      	ldr	r3, [pc, #184]	; (80069a0 <xTaskPriorityDisinherit+0xd0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d00a      	beq.n	8006906 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	60fb      	str	r3, [r7, #12]
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10a      	bne.n	8006924 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	60bb      	str	r3, [r7, #8]
}
 8006920:	bf00      	nop
 8006922:	e7fe      	b.n	8006922 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006928:	1e5a      	subs	r2, r3, #1
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006936:	429a      	cmp	r2, r3
 8006938:	d02c      	beq.n	8006994 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693e:	2b00      	cmp	r3, #0
 8006940:	d128      	bne.n	8006994 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	3304      	adds	r3, #4
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe fb8c 	bl	8005064 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006958:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006964:	4b0f      	ldr	r3, [pc, #60]	; (80069a4 <xTaskPriorityDisinherit+0xd4>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d903      	bls.n	8006974 <xTaskPriorityDisinherit+0xa4>
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	4a0c      	ldr	r2, [pc, #48]	; (80069a4 <xTaskPriorityDisinherit+0xd4>)
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4a09      	ldr	r2, [pc, #36]	; (80069a8 <xTaskPriorityDisinherit+0xd8>)
 8006982:	441a      	add	r2, r3
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	3304      	adds	r3, #4
 8006988:	4619      	mov	r1, r3
 800698a:	4610      	mov	r0, r2
 800698c:	f7fe fb0d 	bl	8004faa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006990:	2301      	movs	r3, #1
 8006992:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006994:	697b      	ldr	r3, [r7, #20]
	}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20000a30 	.word	0x20000a30
 80069a4:	20000f0c 	.word	0x20000f0c
 80069a8:	20000a34 	.word	0x20000a34

080069ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069b6:	4b21      	ldr	r3, [pc, #132]	; (8006a3c <prvAddCurrentTaskToDelayedList+0x90>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069bc:	4b20      	ldr	r3, [pc, #128]	; (8006a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3304      	adds	r3, #4
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fe fb4e 	bl	8005064 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ce:	d10a      	bne.n	80069e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d007      	beq.n	80069e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069d6:	4b1a      	ldr	r3, [pc, #104]	; (8006a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3304      	adds	r3, #4
 80069dc:	4619      	mov	r1, r3
 80069de:	4819      	ldr	r0, [pc, #100]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x98>)
 80069e0:	f7fe fae3 	bl	8004faa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069e4:	e026      	b.n	8006a34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4413      	add	r3, r2
 80069ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069ee:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d209      	bcs.n	8006a12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069fe:	4b12      	ldr	r3, [pc, #72]	; (8006a48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4b0f      	ldr	r3, [pc, #60]	; (8006a40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3304      	adds	r3, #4
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	f7fe faf1 	bl	8004ff2 <vListInsert>
}
 8006a10:	e010      	b.n	8006a34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a12:	4b0e      	ldr	r3, [pc, #56]	; (8006a4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4610      	mov	r0, r2
 8006a20:	f7fe fae7 	bl	8004ff2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a24:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d202      	bcs.n	8006a34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a2e:	4a08      	ldr	r2, [pc, #32]	; (8006a50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	6013      	str	r3, [r2, #0]
}
 8006a34:	bf00      	nop
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	20000f08 	.word	0x20000f08
 8006a40:	20000a30 	.word	0x20000a30
 8006a44:	20000ef0 	.word	0x20000ef0
 8006a48:	20000ec0 	.word	0x20000ec0
 8006a4c:	20000ebc 	.word	0x20000ebc
 8006a50:	20000f24 	.word	0x20000f24

08006a54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b08a      	sub	sp, #40	; 0x28
 8006a58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a5e:	f000 fb07 	bl	8007070 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a62:	4b1c      	ldr	r3, [pc, #112]	; (8006ad4 <xTimerCreateTimerTask+0x80>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d021      	beq.n	8006aae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a72:	1d3a      	adds	r2, r7, #4
 8006a74:	f107 0108 	add.w	r1, r7, #8
 8006a78:	f107 030c 	add.w	r3, r7, #12
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fe fa4d 	bl	8004f1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a82:	6879      	ldr	r1, [r7, #4]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	9202      	str	r2, [sp, #8]
 8006a8a:	9301      	str	r3, [sp, #4]
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	2300      	movs	r3, #0
 8006a92:	460a      	mov	r2, r1
 8006a94:	4910      	ldr	r1, [pc, #64]	; (8006ad8 <xTimerCreateTimerTask+0x84>)
 8006a96:	4811      	ldr	r0, [pc, #68]	; (8006adc <xTimerCreateTimerTask+0x88>)
 8006a98:	f7ff f8b4 	bl	8005c04 <xTaskCreateStatic>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	4a10      	ldr	r2, [pc, #64]	; (8006ae0 <xTimerCreateTimerTask+0x8c>)
 8006aa0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006aa2:	4b0f      	ldr	r3, [pc, #60]	; (8006ae0 <xTimerCreateTimerTask+0x8c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10a      	bne.n	8006aca <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	613b      	str	r3, [r7, #16]
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006aca:	697b      	ldr	r3, [r7, #20]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	20000f60 	.word	0x20000f60
 8006ad8:	0800839c 	.word	0x0800839c
 8006adc:	08006c19 	.word	0x08006c19
 8006ae0:	20000f64 	.word	0x20000f64

08006ae4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b08a      	sub	sp, #40	; 0x28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	623b      	str	r3, [r7, #32]
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b12:	4b1a      	ldr	r3, [pc, #104]	; (8006b7c <xTimerGenericCommand+0x98>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d02a      	beq.n	8006b70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2b05      	cmp	r3, #5
 8006b2a:	dc18      	bgt.n	8006b5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b2c:	f7ff feb2 	bl	8006894 <xTaskGetSchedulerState>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d109      	bne.n	8006b4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b36:	4b11      	ldr	r3, [pc, #68]	; (8006b7c <xTimerGenericCommand+0x98>)
 8006b38:	6818      	ldr	r0, [r3, #0]
 8006b3a:	f107 0110 	add.w	r1, r7, #16
 8006b3e:	2300      	movs	r3, #0
 8006b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b42:	f7fe fbf7 	bl	8005334 <xQueueGenericSend>
 8006b46:	6278      	str	r0, [r7, #36]	; 0x24
 8006b48:	e012      	b.n	8006b70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b4a:	4b0c      	ldr	r3, [pc, #48]	; (8006b7c <xTimerGenericCommand+0x98>)
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	f107 0110 	add.w	r1, r7, #16
 8006b52:	2300      	movs	r3, #0
 8006b54:	2200      	movs	r2, #0
 8006b56:	f7fe fbed 	bl	8005334 <xQueueGenericSend>
 8006b5a:	6278      	str	r0, [r7, #36]	; 0x24
 8006b5c:	e008      	b.n	8006b70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b5e:	4b07      	ldr	r3, [pc, #28]	; (8006b7c <xTimerGenericCommand+0x98>)
 8006b60:	6818      	ldr	r0, [r3, #0]
 8006b62:	f107 0110 	add.w	r1, r7, #16
 8006b66:	2300      	movs	r3, #0
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	f7fe fce1 	bl	8005530 <xQueueGenericSendFromISR>
 8006b6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3728      	adds	r7, #40	; 0x28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000f60 	.word	0x20000f60

08006b80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af02      	add	r7, sp, #8
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b8a:	4b22      	ldr	r3, [pc, #136]	; (8006c14 <prvProcessExpiredTimer+0x94>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	3304      	adds	r3, #4
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fe fa63 	bl	8005064 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d022      	beq.n	8006bf2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	699a      	ldr	r2, [r3, #24]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	18d1      	adds	r1, r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	6978      	ldr	r0, [r7, #20]
 8006bba:	f000 f8d1 	bl	8006d60 <prvInsertTimerInActiveList>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01f      	beq.n	8006c04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	2100      	movs	r1, #0
 8006bce:	6978      	ldr	r0, [r7, #20]
 8006bd0:	f7ff ff88 	bl	8006ae4 <xTimerGenericCommand>
 8006bd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d113      	bne.n	8006c04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	60fb      	str	r3, [r7, #12]
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bf8:	f023 0301 	bic.w	r3, r3, #1
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	6978      	ldr	r0, [r7, #20]
 8006c0a:	4798      	blx	r3
}
 8006c0c:	bf00      	nop
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	20000f58 	.word	0x20000f58

08006c18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c20:	f107 0308 	add.w	r3, r7, #8
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 f857 	bl	8006cd8 <prvGetNextExpireTime>
 8006c2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 f803 	bl	8006c3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c36:	f000 f8d5 	bl	8006de4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c3a:	e7f1      	b.n	8006c20 <prvTimerTask+0x8>

08006c3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c46:	f7ff fa39 	bl	80060bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c4a:	f107 0308 	add.w	r3, r7, #8
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 f866 	bl	8006d20 <prvSampleTimeNow>
 8006c54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d130      	bne.n	8006cbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10a      	bne.n	8006c78 <prvProcessTimerOrBlockTask+0x3c>
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d806      	bhi.n	8006c78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c6a:	f7ff fa35 	bl	80060d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c6e:	68f9      	ldr	r1, [r7, #12]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7ff ff85 	bl	8006b80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c76:	e024      	b.n	8006cc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d008      	beq.n	8006c90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c7e:	4b13      	ldr	r3, [pc, #76]	; (8006ccc <prvProcessTimerOrBlockTask+0x90>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <prvProcessTimerOrBlockTask+0x50>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e000      	b.n	8006c8e <prvProcessTimerOrBlockTask+0x52>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c90:	4b0f      	ldr	r3, [pc, #60]	; (8006cd0 <prvProcessTimerOrBlockTask+0x94>)
 8006c92:	6818      	ldr	r0, [r3, #0]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	f7fe ff7d 	bl	8005b9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ca2:	f7ff fa19 	bl	80060d8 <xTaskResumeAll>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006cac:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <prvProcessTimerOrBlockTask+0x98>)
 8006cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	f3bf 8f6f 	isb	sy
}
 8006cbc:	e001      	b.n	8006cc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006cbe:	f7ff fa0b 	bl	80060d8 <xTaskResumeAll>
}
 8006cc2:	bf00      	nop
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000f5c 	.word	0x20000f5c
 8006cd0:	20000f60 	.word	0x20000f60
 8006cd4:	e000ed04 	.word	0xe000ed04

08006cd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ce0:	4b0e      	ldr	r3, [pc, #56]	; (8006d1c <prvGetNextExpireTime+0x44>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <prvGetNextExpireTime+0x16>
 8006cea:	2201      	movs	r2, #1
 8006cec:	e000      	b.n	8006cf0 <prvGetNextExpireTime+0x18>
 8006cee:	2200      	movs	r2, #0
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d105      	bne.n	8006d08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cfc:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <prvGetNextExpireTime+0x44>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	e001      	b.n	8006d0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	20000f58 	.word	0x20000f58

08006d20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d28:	f7ff fa74 	bl	8006214 <xTaskGetTickCount>
 8006d2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <prvSampleTimeNow+0x3c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d205      	bcs.n	8006d44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d38:	f000 f936 	bl	8006fa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	e002      	b.n	8006d4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d4a:	4a04      	ldr	r2, [pc, #16]	; (8006d5c <prvSampleTimeNow+0x3c>)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d50:	68fb      	ldr	r3, [r7, #12]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000f68 	.word	0x20000f68

08006d60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d812      	bhi.n	8006dac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	1ad2      	subs	r2, r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d302      	bcc.n	8006d9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d94:	2301      	movs	r3, #1
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	e01b      	b.n	8006dd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d9a:	4b10      	ldr	r3, [pc, #64]	; (8006ddc <prvInsertTimerInActiveList+0x7c>)
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3304      	adds	r3, #4
 8006da2:	4619      	mov	r1, r3
 8006da4:	4610      	mov	r0, r2
 8006da6:	f7fe f924 	bl	8004ff2 <vListInsert>
 8006daa:	e012      	b.n	8006dd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d206      	bcs.n	8006dc2 <prvInsertTimerInActiveList+0x62>
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d302      	bcc.n	8006dc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	617b      	str	r3, [r7, #20]
 8006dc0:	e007      	b.n	8006dd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dc2:	4b07      	ldr	r3, [pc, #28]	; (8006de0 <prvInsertTimerInActiveList+0x80>)
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4610      	mov	r0, r2
 8006dce:	f7fe f910 	bl	8004ff2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006dd2:	697b      	ldr	r3, [r7, #20]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	20000f5c 	.word	0x20000f5c
 8006de0:	20000f58 	.word	0x20000f58

08006de4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08e      	sub	sp, #56	; 0x38
 8006de8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006dea:	e0ca      	b.n	8006f82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	da18      	bge.n	8006e24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006df2:	1d3b      	adds	r3, r7, #4
 8006df4:	3304      	adds	r3, #4
 8006df6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10a      	bne.n	8006e14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	61fb      	str	r3, [r7, #28]
}
 8006e10:	bf00      	nop
 8006e12:	e7fe      	b.n	8006e12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e1a:	6850      	ldr	r0, [r2, #4]
 8006e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e1e:	6892      	ldr	r2, [r2, #8]
 8006e20:	4611      	mov	r1, r2
 8006e22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f2c0 80ab 	blt.w	8006f82 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d004      	beq.n	8006e42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fe f911 	bl	8005064 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e42:	463b      	mov	r3, r7
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7ff ff6b 	bl	8006d20 <prvSampleTimeNow>
 8006e4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b09      	cmp	r3, #9
 8006e50:	f200 8096 	bhi.w	8006f80 <prvProcessReceivedCommands+0x19c>
 8006e54:	a201      	add	r2, pc, #4	; (adr r2, 8006e5c <prvProcessReceivedCommands+0x78>)
 8006e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5a:	bf00      	nop
 8006e5c:	08006e85 	.word	0x08006e85
 8006e60:	08006e85 	.word	0x08006e85
 8006e64:	08006e85 	.word	0x08006e85
 8006e68:	08006ef9 	.word	0x08006ef9
 8006e6c:	08006f0d 	.word	0x08006f0d
 8006e70:	08006f57 	.word	0x08006f57
 8006e74:	08006e85 	.word	0x08006e85
 8006e78:	08006e85 	.word	0x08006e85
 8006e7c:	08006ef9 	.word	0x08006ef9
 8006e80:	08006f0d 	.word	0x08006f0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e8a:	f043 0301 	orr.w	r3, r3, #1
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	18d1      	adds	r1, r2, r3
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ea4:	f7ff ff5c 	bl	8006d60 <prvInsertTimerInActiveList>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d069      	beq.n	8006f82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d05e      	beq.n	8006f82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	441a      	add	r2, r3
 8006ecc:	2300      	movs	r3, #0
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ed6:	f7ff fe05 	bl	8006ae4 <xTimerGenericCommand>
 8006eda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d14f      	bne.n	8006f82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	61bb      	str	r3, [r7, #24]
}
 8006ef4:	bf00      	nop
 8006ef6:	e7fe      	b.n	8006ef6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006efe:	f023 0301 	bic.w	r3, r3, #1
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006f0a:	e03a      	b.n	8006f82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f12:	f043 0301 	orr.w	r3, r3, #1
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	617b      	str	r3, [r7, #20]
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f44:	699a      	ldr	r2, [r3, #24]
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	18d1      	adds	r1, r2, r3
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f50:	f7ff ff06 	bl	8006d60 <prvInsertTimerInActiveList>
					break;
 8006f54:	e015      	b.n	8006f82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d103      	bne.n	8006f6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f66:	f000 fbdb 	bl	8007720 <vPortFree>
 8006f6a:	e00a      	b.n	8006f82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f72:	f023 0301 	bic.w	r3, r3, #1
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f7e:	e000      	b.n	8006f82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006f80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f82:	4b08      	ldr	r3, [pc, #32]	; (8006fa4 <prvProcessReceivedCommands+0x1c0>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	1d39      	adds	r1, r7, #4
 8006f88:	2200      	movs	r2, #0
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe fb6c 	bl	8005668 <xQueueReceive>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f47f af2a 	bne.w	8006dec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006f98:	bf00      	nop
 8006f9a:	bf00      	nop
 8006f9c:	3730      	adds	r7, #48	; 0x30
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20000f60 	.word	0x20000f60

08006fa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fae:	e048      	b.n	8007042 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fb0:	4b2d      	ldr	r3, [pc, #180]	; (8007068 <prvSwitchTimerLists+0xc0>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fba:	4b2b      	ldr	r3, [pc, #172]	; (8007068 <prvSwitchTimerLists+0xc0>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7fe f84b 	bl	8005064 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d02e      	beq.n	8007042 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	4413      	add	r3, r2
 8006fec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d90e      	bls.n	8007014 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007002:	4b19      	ldr	r3, [pc, #100]	; (8007068 <prvSwitchTimerLists+0xc0>)
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3304      	adds	r3, #4
 800700a:	4619      	mov	r1, r3
 800700c:	4610      	mov	r0, r2
 800700e:	f7fd fff0 	bl	8004ff2 <vListInsert>
 8007012:	e016      	b.n	8007042 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007014:	2300      	movs	r3, #0
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	2300      	movs	r3, #0
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	2100      	movs	r1, #0
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f7ff fd60 	bl	8006ae4 <xTimerGenericCommand>
 8007024:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	603b      	str	r3, [r7, #0]
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007042:	4b09      	ldr	r3, [pc, #36]	; (8007068 <prvSwitchTimerLists+0xc0>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1b1      	bne.n	8006fb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800704c:	4b06      	ldr	r3, [pc, #24]	; (8007068 <prvSwitchTimerLists+0xc0>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007052:	4b06      	ldr	r3, [pc, #24]	; (800706c <prvSwitchTimerLists+0xc4>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a04      	ldr	r2, [pc, #16]	; (8007068 <prvSwitchTimerLists+0xc0>)
 8007058:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800705a:	4a04      	ldr	r2, [pc, #16]	; (800706c <prvSwitchTimerLists+0xc4>)
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	6013      	str	r3, [r2, #0]
}
 8007060:	bf00      	nop
 8007062:	3718      	adds	r7, #24
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20000f58 	.word	0x20000f58
 800706c:	20000f5c 	.word	0x20000f5c

08007070 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007076:	f000 f965 	bl	8007344 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800707a:	4b15      	ldr	r3, [pc, #84]	; (80070d0 <prvCheckForValidListAndQueue+0x60>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d120      	bne.n	80070c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007082:	4814      	ldr	r0, [pc, #80]	; (80070d4 <prvCheckForValidListAndQueue+0x64>)
 8007084:	f7fd ff64 	bl	8004f50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007088:	4813      	ldr	r0, [pc, #76]	; (80070d8 <prvCheckForValidListAndQueue+0x68>)
 800708a:	f7fd ff61 	bl	8004f50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800708e:	4b13      	ldr	r3, [pc, #76]	; (80070dc <prvCheckForValidListAndQueue+0x6c>)
 8007090:	4a10      	ldr	r2, [pc, #64]	; (80070d4 <prvCheckForValidListAndQueue+0x64>)
 8007092:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007094:	4b12      	ldr	r3, [pc, #72]	; (80070e0 <prvCheckForValidListAndQueue+0x70>)
 8007096:	4a10      	ldr	r2, [pc, #64]	; (80070d8 <prvCheckForValidListAndQueue+0x68>)
 8007098:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800709a:	2300      	movs	r3, #0
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	4b11      	ldr	r3, [pc, #68]	; (80070e4 <prvCheckForValidListAndQueue+0x74>)
 80070a0:	4a11      	ldr	r2, [pc, #68]	; (80070e8 <prvCheckForValidListAndQueue+0x78>)
 80070a2:	2110      	movs	r1, #16
 80070a4:	200a      	movs	r0, #10
 80070a6:	f7fe f86f 	bl	8005188 <xQueueGenericCreateStatic>
 80070aa:	4603      	mov	r3, r0
 80070ac:	4a08      	ldr	r2, [pc, #32]	; (80070d0 <prvCheckForValidListAndQueue+0x60>)
 80070ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80070b0:	4b07      	ldr	r3, [pc, #28]	; (80070d0 <prvCheckForValidListAndQueue+0x60>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <prvCheckForValidListAndQueue+0x60>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	490b      	ldr	r1, [pc, #44]	; (80070ec <prvCheckForValidListAndQueue+0x7c>)
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fe fd42 	bl	8005b48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070c4:	f000 f96e 	bl	80073a4 <vPortExitCritical>
}
 80070c8:	bf00      	nop
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20000f60 	.word	0x20000f60
 80070d4:	20000f30 	.word	0x20000f30
 80070d8:	20000f44 	.word	0x20000f44
 80070dc:	20000f58 	.word	0x20000f58
 80070e0:	20000f5c 	.word	0x20000f5c
 80070e4:	2000100c 	.word	0x2000100c
 80070e8:	20000f6c 	.word	0x20000f6c
 80070ec:	080083a4 	.word	0x080083a4

080070f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3b04      	subs	r3, #4
 8007100:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007108:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3b04      	subs	r3, #4
 800710e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f023 0201 	bic.w	r2, r3, #1
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	3b04      	subs	r3, #4
 800711e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007120:	4a0c      	ldr	r2, [pc, #48]	; (8007154 <pxPortInitialiseStack+0x64>)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3b14      	subs	r3, #20
 800712a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3b04      	subs	r3, #4
 8007136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f06f 0202 	mvn.w	r2, #2
 800713e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	3b20      	subs	r3, #32
 8007144:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007146:	68fb      	ldr	r3, [r7, #12]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	08007159 	.word	0x08007159

08007158 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007162:	4b12      	ldr	r3, [pc, #72]	; (80071ac <prvTaskExitError+0x54>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716a:	d00a      	beq.n	8007182 <prvTaskExitError+0x2a>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	60fb      	str	r3, [r7, #12]
}
 800717e:	bf00      	nop
 8007180:	e7fe      	b.n	8007180 <prvTaskExitError+0x28>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	60bb      	str	r3, [r7, #8]
}
 8007194:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007196:	bf00      	nop
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d0fc      	beq.n	8007198 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800719e:	bf00      	nop
 80071a0:	bf00      	nop
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	20000054 	.word	0x20000054

080071b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071b0:	4b07      	ldr	r3, [pc, #28]	; (80071d0 <pxCurrentTCBConst2>)
 80071b2:	6819      	ldr	r1, [r3, #0]
 80071b4:	6808      	ldr	r0, [r1, #0]
 80071b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	f380 8809 	msr	PSP, r0
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f04f 0000 	mov.w	r0, #0
 80071c6:	f380 8811 	msr	BASEPRI, r0
 80071ca:	4770      	bx	lr
 80071cc:	f3af 8000 	nop.w

080071d0 <pxCurrentTCBConst2>:
 80071d0:	20000a30 	.word	0x20000a30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop

080071d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071d8:	4808      	ldr	r0, [pc, #32]	; (80071fc <prvPortStartFirstTask+0x24>)
 80071da:	6800      	ldr	r0, [r0, #0]
 80071dc:	6800      	ldr	r0, [r0, #0]
 80071de:	f380 8808 	msr	MSP, r0
 80071e2:	f04f 0000 	mov.w	r0, #0
 80071e6:	f380 8814 	msr	CONTROL, r0
 80071ea:	b662      	cpsie	i
 80071ec:	b661      	cpsie	f
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	df00      	svc	0
 80071f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071fa:	bf00      	nop
 80071fc:	e000ed08 	.word	0xe000ed08

08007200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007206:	4b46      	ldr	r3, [pc, #280]	; (8007320 <xPortStartScheduler+0x120>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a46      	ldr	r2, [pc, #280]	; (8007324 <xPortStartScheduler+0x124>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d10a      	bne.n	8007226 <xPortStartScheduler+0x26>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	613b      	str	r3, [r7, #16]
}
 8007222:	bf00      	nop
 8007224:	e7fe      	b.n	8007224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007226:	4b3e      	ldr	r3, [pc, #248]	; (8007320 <xPortStartScheduler+0x120>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a3f      	ldr	r2, [pc, #252]	; (8007328 <xPortStartScheduler+0x128>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d10a      	bne.n	8007246 <xPortStartScheduler+0x46>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	60fb      	str	r3, [r7, #12]
}
 8007242:	bf00      	nop
 8007244:	e7fe      	b.n	8007244 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007246:	4b39      	ldr	r3, [pc, #228]	; (800732c <xPortStartScheduler+0x12c>)
 8007248:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	22ff      	movs	r2, #255	; 0xff
 8007256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	b2db      	uxtb	r3, r3
 800725e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007260:	78fb      	ldrb	r3, [r7, #3]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007268:	b2da      	uxtb	r2, r3
 800726a:	4b31      	ldr	r3, [pc, #196]	; (8007330 <xPortStartScheduler+0x130>)
 800726c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800726e:	4b31      	ldr	r3, [pc, #196]	; (8007334 <xPortStartScheduler+0x134>)
 8007270:	2207      	movs	r2, #7
 8007272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007274:	e009      	b.n	800728a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007276:	4b2f      	ldr	r3, [pc, #188]	; (8007334 <xPortStartScheduler+0x134>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3b01      	subs	r3, #1
 800727c:	4a2d      	ldr	r2, [pc, #180]	; (8007334 <xPortStartScheduler+0x134>)
 800727e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007280:	78fb      	ldrb	r3, [r7, #3]
 8007282:	b2db      	uxtb	r3, r3
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	b2db      	uxtb	r3, r3
 8007288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007292:	2b80      	cmp	r3, #128	; 0x80
 8007294:	d0ef      	beq.n	8007276 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007296:	4b27      	ldr	r3, [pc, #156]	; (8007334 <xPortStartScheduler+0x134>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f1c3 0307 	rsb	r3, r3, #7
 800729e:	2b04      	cmp	r3, #4
 80072a0:	d00a      	beq.n	80072b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	60bb      	str	r3, [r7, #8]
}
 80072b4:	bf00      	nop
 80072b6:	e7fe      	b.n	80072b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072b8:	4b1e      	ldr	r3, [pc, #120]	; (8007334 <xPortStartScheduler+0x134>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	4a1d      	ldr	r2, [pc, #116]	; (8007334 <xPortStartScheduler+0x134>)
 80072c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072c2:	4b1c      	ldr	r3, [pc, #112]	; (8007334 <xPortStartScheduler+0x134>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072ca:	4a1a      	ldr	r2, [pc, #104]	; (8007334 <xPortStartScheduler+0x134>)
 80072cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072d6:	4b18      	ldr	r3, [pc, #96]	; (8007338 <xPortStartScheduler+0x138>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a17      	ldr	r2, [pc, #92]	; (8007338 <xPortStartScheduler+0x138>)
 80072dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072e2:	4b15      	ldr	r3, [pc, #84]	; (8007338 <xPortStartScheduler+0x138>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a14      	ldr	r2, [pc, #80]	; (8007338 <xPortStartScheduler+0x138>)
 80072e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80072ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072ee:	f000 f8dd 	bl	80074ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072f2:	4b12      	ldr	r3, [pc, #72]	; (800733c <xPortStartScheduler+0x13c>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072f8:	f000 f8fc 	bl	80074f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072fc:	4b10      	ldr	r3, [pc, #64]	; (8007340 <xPortStartScheduler+0x140>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a0f      	ldr	r2, [pc, #60]	; (8007340 <xPortStartScheduler+0x140>)
 8007302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007306:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007308:	f7ff ff66 	bl	80071d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800730c:	f7ff f84c 	bl	80063a8 <vTaskSwitchContext>
	prvTaskExitError();
 8007310:	f7ff ff22 	bl	8007158 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	e000ed00 	.word	0xe000ed00
 8007324:	410fc271 	.word	0x410fc271
 8007328:	410fc270 	.word	0x410fc270
 800732c:	e000e400 	.word	0xe000e400
 8007330:	2000105c 	.word	0x2000105c
 8007334:	20001060 	.word	0x20001060
 8007338:	e000ed20 	.word	0xe000ed20
 800733c:	20000054 	.word	0x20000054
 8007340:	e000ef34 	.word	0xe000ef34

08007344 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	607b      	str	r3, [r7, #4]
}
 800735c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800735e:	4b0f      	ldr	r3, [pc, #60]	; (800739c <vPortEnterCritical+0x58>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3301      	adds	r3, #1
 8007364:	4a0d      	ldr	r2, [pc, #52]	; (800739c <vPortEnterCritical+0x58>)
 8007366:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007368:	4b0c      	ldr	r3, [pc, #48]	; (800739c <vPortEnterCritical+0x58>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d10f      	bne.n	8007390 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007370:	4b0b      	ldr	r3, [pc, #44]	; (80073a0 <vPortEnterCritical+0x5c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <vPortEnterCritical+0x4c>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	603b      	str	r3, [r7, #0]
}
 800738c:	bf00      	nop
 800738e:	e7fe      	b.n	800738e <vPortEnterCritical+0x4a>
	}
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	20000054 	.word	0x20000054
 80073a0:	e000ed04 	.word	0xe000ed04

080073a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073aa:	4b12      	ldr	r3, [pc, #72]	; (80073f4 <vPortExitCritical+0x50>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10a      	bne.n	80073c8 <vPortExitCritical+0x24>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	607b      	str	r3, [r7, #4]
}
 80073c4:	bf00      	nop
 80073c6:	e7fe      	b.n	80073c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80073c8:	4b0a      	ldr	r3, [pc, #40]	; (80073f4 <vPortExitCritical+0x50>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	4a09      	ldr	r2, [pc, #36]	; (80073f4 <vPortExitCritical+0x50>)
 80073d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073d2:	4b08      	ldr	r3, [pc, #32]	; (80073f4 <vPortExitCritical+0x50>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d105      	bne.n	80073e6 <vPortExitCritical+0x42>
 80073da:	2300      	movs	r3, #0
 80073dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	f383 8811 	msr	BASEPRI, r3
}
 80073e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	20000054 	.word	0x20000054
	...

08007400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007400:	f3ef 8009 	mrs	r0, PSP
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	4b15      	ldr	r3, [pc, #84]	; (8007460 <pxCurrentTCBConst>)
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	f01e 0f10 	tst.w	lr, #16
 8007410:	bf08      	it	eq
 8007412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741a:	6010      	str	r0, [r2, #0]
 800741c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007424:	f380 8811 	msr	BASEPRI, r0
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f7fe ffba 	bl	80063a8 <vTaskSwitchContext>
 8007434:	f04f 0000 	mov.w	r0, #0
 8007438:	f380 8811 	msr	BASEPRI, r0
 800743c:	bc09      	pop	{r0, r3}
 800743e:	6819      	ldr	r1, [r3, #0]
 8007440:	6808      	ldr	r0, [r1, #0]
 8007442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007446:	f01e 0f10 	tst.w	lr, #16
 800744a:	bf08      	it	eq
 800744c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007450:	f380 8809 	msr	PSP, r0
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	f3af 8000 	nop.w

08007460 <pxCurrentTCBConst>:
 8007460:	20000a30 	.word	0x20000a30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007464:	bf00      	nop
 8007466:	bf00      	nop

08007468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	607b      	str	r3, [r7, #4]
}
 8007480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007482:	f7fe fed7 	bl	8006234 <xTaskIncrementTick>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800748c:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <xPortSysTickHandler+0x40>)
 800748e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	2300      	movs	r3, #0
 8007496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	f383 8811 	msr	BASEPRI, r3
}
 800749e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	e000ed04 	.word	0xe000ed04

080074ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074b0:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <vPortSetupTimerInterrupt+0x34>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074b6:	4b0b      	ldr	r3, [pc, #44]	; (80074e4 <vPortSetupTimerInterrupt+0x38>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074bc:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <vPortSetupTimerInterrupt+0x3c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a0a      	ldr	r2, [pc, #40]	; (80074ec <vPortSetupTimerInterrupt+0x40>)
 80074c2:	fba2 2303 	umull	r2, r3, r2, r3
 80074c6:	099b      	lsrs	r3, r3, #6
 80074c8:	4a09      	ldr	r2, [pc, #36]	; (80074f0 <vPortSetupTimerInterrupt+0x44>)
 80074ca:	3b01      	subs	r3, #1
 80074cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074ce:	4b04      	ldr	r3, [pc, #16]	; (80074e0 <vPortSetupTimerInterrupt+0x34>)
 80074d0:	2207      	movs	r2, #7
 80074d2:	601a      	str	r2, [r3, #0]
}
 80074d4:	bf00      	nop
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	e000e010 	.word	0xe000e010
 80074e4:	e000e018 	.word	0xe000e018
 80074e8:	20000048 	.word	0x20000048
 80074ec:	10624dd3 	.word	0x10624dd3
 80074f0:	e000e014 	.word	0xe000e014

080074f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007504 <vPortEnableVFP+0x10>
 80074f8:	6801      	ldr	r1, [r0, #0]
 80074fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80074fe:	6001      	str	r1, [r0, #0]
 8007500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007502:	bf00      	nop
 8007504:	e000ed88 	.word	0xe000ed88

08007508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800750e:	f3ef 8305 	mrs	r3, IPSR
 8007512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2b0f      	cmp	r3, #15
 8007518:	d914      	bls.n	8007544 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800751a:	4a17      	ldr	r2, [pc, #92]	; (8007578 <vPortValidateInterruptPriority+0x70>)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4413      	add	r3, r2
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007524:	4b15      	ldr	r3, [pc, #84]	; (800757c <vPortValidateInterruptPriority+0x74>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	7afa      	ldrb	r2, [r7, #11]
 800752a:	429a      	cmp	r2, r3
 800752c:	d20a      	bcs.n	8007544 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	607b      	str	r3, [r7, #4]
}
 8007540:	bf00      	nop
 8007542:	e7fe      	b.n	8007542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007544:	4b0e      	ldr	r3, [pc, #56]	; (8007580 <vPortValidateInterruptPriority+0x78>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800754c:	4b0d      	ldr	r3, [pc, #52]	; (8007584 <vPortValidateInterruptPriority+0x7c>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d90a      	bls.n	800756a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	603b      	str	r3, [r7, #0]
}
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <vPortValidateInterruptPriority+0x60>
	}
 800756a:	bf00      	nop
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	e000e3f0 	.word	0xe000e3f0
 800757c:	2000105c 	.word	0x2000105c
 8007580:	e000ed0c 	.word	0xe000ed0c
 8007584:	20001060 	.word	0x20001060

08007588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08a      	sub	sp, #40	; 0x28
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007590:	2300      	movs	r3, #0
 8007592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007594:	f7fe fd92 	bl	80060bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007598:	4b5b      	ldr	r3, [pc, #364]	; (8007708 <pvPortMalloc+0x180>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075a0:	f000 f920 	bl	80077e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075a4:	4b59      	ldr	r3, [pc, #356]	; (800770c <pvPortMalloc+0x184>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f040 8093 	bne.w	80076d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d01d      	beq.n	80075f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80075b8:	2208      	movs	r2, #8
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4413      	add	r3, r2
 80075be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f003 0307 	and.w	r3, r3, #7
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d014      	beq.n	80075f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f023 0307 	bic.w	r3, r3, #7
 80075d0:	3308      	adds	r3, #8
 80075d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f003 0307 	and.w	r3, r3, #7
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <pvPortMalloc+0x6c>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	617b      	str	r3, [r7, #20]
}
 80075f0:	bf00      	nop
 80075f2:	e7fe      	b.n	80075f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d06e      	beq.n	80076d8 <pvPortMalloc+0x150>
 80075fa:	4b45      	ldr	r3, [pc, #276]	; (8007710 <pvPortMalloc+0x188>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	429a      	cmp	r2, r3
 8007602:	d869      	bhi.n	80076d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007604:	4b43      	ldr	r3, [pc, #268]	; (8007714 <pvPortMalloc+0x18c>)
 8007606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007608:	4b42      	ldr	r3, [pc, #264]	; (8007714 <pvPortMalloc+0x18c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800760e:	e004      	b.n	800761a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	429a      	cmp	r2, r3
 8007622:	d903      	bls.n	800762c <pvPortMalloc+0xa4>
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1f1      	bne.n	8007610 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800762c:	4b36      	ldr	r3, [pc, #216]	; (8007708 <pvPortMalloc+0x180>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007632:	429a      	cmp	r2, r3
 8007634:	d050      	beq.n	80076d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2208      	movs	r2, #8
 800763c:	4413      	add	r3, r2
 800763e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	6a3b      	ldr	r3, [r7, #32]
 8007646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	1ad2      	subs	r2, r2, r3
 8007650:	2308      	movs	r3, #8
 8007652:	005b      	lsls	r3, r3, #1
 8007654:	429a      	cmp	r2, r3
 8007656:	d91f      	bls.n	8007698 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4413      	add	r3, r2
 800765e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	f003 0307 	and.w	r3, r3, #7
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <pvPortMalloc+0xf8>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	613b      	str	r3, [r7, #16]
}
 800767c:	bf00      	nop
 800767e:	e7fe      	b.n	800767e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	1ad2      	subs	r2, r2, r3
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007692:	69b8      	ldr	r0, [r7, #24]
 8007694:	f000 f908 	bl	80078a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007698:	4b1d      	ldr	r3, [pc, #116]	; (8007710 <pvPortMalloc+0x188>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	4a1b      	ldr	r2, [pc, #108]	; (8007710 <pvPortMalloc+0x188>)
 80076a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076a6:	4b1a      	ldr	r3, [pc, #104]	; (8007710 <pvPortMalloc+0x188>)
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	4b1b      	ldr	r3, [pc, #108]	; (8007718 <pvPortMalloc+0x190>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d203      	bcs.n	80076ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076b2:	4b17      	ldr	r3, [pc, #92]	; (8007710 <pvPortMalloc+0x188>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a18      	ldr	r2, [pc, #96]	; (8007718 <pvPortMalloc+0x190>)
 80076b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	4b13      	ldr	r3, [pc, #76]	; (800770c <pvPortMalloc+0x184>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	431a      	orrs	r2, r3
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	2200      	movs	r2, #0
 80076cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <pvPortMalloc+0x194>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3301      	adds	r3, #1
 80076d4:	4a11      	ldr	r2, [pc, #68]	; (800771c <pvPortMalloc+0x194>)
 80076d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076d8:	f7fe fcfe 	bl	80060d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f003 0307 	and.w	r3, r3, #7
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <pvPortMalloc+0x174>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	60fb      	str	r3, [r7, #12]
}
 80076f8:	bf00      	nop
 80076fa:	e7fe      	b.n	80076fa <pvPortMalloc+0x172>
	return pvReturn;
 80076fc:	69fb      	ldr	r3, [r7, #28]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3728      	adds	r7, #40	; 0x28
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20001c24 	.word	0x20001c24
 800770c:	20001c38 	.word	0x20001c38
 8007710:	20001c28 	.word	0x20001c28
 8007714:	20001c1c 	.word	0x20001c1c
 8007718:	20001c2c 	.word	0x20001c2c
 800771c:	20001c30 	.word	0x20001c30

08007720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d04d      	beq.n	80077ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007732:	2308      	movs	r3, #8
 8007734:	425b      	negs	r3, r3
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	4413      	add	r3, r2
 800773a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	4b24      	ldr	r3, [pc, #144]	; (80077d8 <vPortFree+0xb8>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4013      	ands	r3, r2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10a      	bne.n	8007764 <vPortFree+0x44>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	60fb      	str	r3, [r7, #12]
}
 8007760:	bf00      	nop
 8007762:	e7fe      	b.n	8007762 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00a      	beq.n	8007782 <vPortFree+0x62>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	60bb      	str	r3, [r7, #8]
}
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	4b14      	ldr	r3, [pc, #80]	; (80077d8 <vPortFree+0xb8>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4013      	ands	r3, r2
 800778c:	2b00      	cmp	r3, #0
 800778e:	d01e      	beq.n	80077ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d11a      	bne.n	80077ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	4b0e      	ldr	r3, [pc, #56]	; (80077d8 <vPortFree+0xb8>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	43db      	mvns	r3, r3
 80077a2:	401a      	ands	r2, r3
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077a8:	f7fe fc88 	bl	80060bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	4b0a      	ldr	r3, [pc, #40]	; (80077dc <vPortFree+0xbc>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4413      	add	r3, r2
 80077b6:	4a09      	ldr	r2, [pc, #36]	; (80077dc <vPortFree+0xbc>)
 80077b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077ba:	6938      	ldr	r0, [r7, #16]
 80077bc:	f000 f874 	bl	80078a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80077c0:	4b07      	ldr	r3, [pc, #28]	; (80077e0 <vPortFree+0xc0>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3301      	adds	r3, #1
 80077c6:	4a06      	ldr	r2, [pc, #24]	; (80077e0 <vPortFree+0xc0>)
 80077c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80077ca:	f7fe fc85 	bl	80060d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077ce:	bf00      	nop
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	20001c38 	.word	0x20001c38
 80077dc:	20001c28 	.word	0x20001c28
 80077e0:	20001c34 	.word	0x20001c34

080077e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80077ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077f0:	4b27      	ldr	r3, [pc, #156]	; (8007890 <prvHeapInit+0xac>)
 80077f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f003 0307 	and.w	r3, r3, #7
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00c      	beq.n	8007818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	3307      	adds	r3, #7
 8007802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 0307 	bic.w	r3, r3, #7
 800780a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	4a1f      	ldr	r2, [pc, #124]	; (8007890 <prvHeapInit+0xac>)
 8007814:	4413      	add	r3, r2
 8007816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800781c:	4a1d      	ldr	r2, [pc, #116]	; (8007894 <prvHeapInit+0xb0>)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007822:	4b1c      	ldr	r3, [pc, #112]	; (8007894 <prvHeapInit+0xb0>)
 8007824:	2200      	movs	r2, #0
 8007826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	4413      	add	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007830:	2208      	movs	r2, #8
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	1a9b      	subs	r3, r3, r2
 8007836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 0307 	bic.w	r3, r3, #7
 800783e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4a15      	ldr	r2, [pc, #84]	; (8007898 <prvHeapInit+0xb4>)
 8007844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007846:	4b14      	ldr	r3, [pc, #80]	; (8007898 <prvHeapInit+0xb4>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2200      	movs	r2, #0
 800784c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800784e:	4b12      	ldr	r3, [pc, #72]	; (8007898 <prvHeapInit+0xb4>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2200      	movs	r2, #0
 8007854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	1ad2      	subs	r2, r2, r3
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007864:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <prvHeapInit+0xb4>)
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	4a0a      	ldr	r2, [pc, #40]	; (800789c <prvHeapInit+0xb8>)
 8007872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	4a09      	ldr	r2, [pc, #36]	; (80078a0 <prvHeapInit+0xbc>)
 800787a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800787c:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <prvHeapInit+0xc0>)
 800787e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007882:	601a      	str	r2, [r3, #0]
}
 8007884:	bf00      	nop
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	20001064 	.word	0x20001064
 8007894:	20001c1c 	.word	0x20001c1c
 8007898:	20001c24 	.word	0x20001c24
 800789c:	20001c2c 	.word	0x20001c2c
 80078a0:	20001c28 	.word	0x20001c28
 80078a4:	20001c38 	.word	0x20001c38

080078a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078b0:	4b28      	ldr	r3, [pc, #160]	; (8007954 <prvInsertBlockIntoFreeList+0xac>)
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	e002      	b.n	80078bc <prvInsertBlockIntoFreeList+0x14>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d8f7      	bhi.n	80078b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	4413      	add	r3, r2
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d108      	bne.n	80078ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	441a      	add	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	441a      	add	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d118      	bne.n	8007930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	4b15      	ldr	r3, [pc, #84]	; (8007958 <prvInsertBlockIntoFreeList+0xb0>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d00d      	beq.n	8007926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	441a      	add	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	e008      	b.n	8007938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007926:	4b0c      	ldr	r3, [pc, #48]	; (8007958 <prvInsertBlockIntoFreeList+0xb0>)
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	e003      	b.n	8007938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	429a      	cmp	r2, r3
 800793e:	d002      	beq.n	8007946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007946:	bf00      	nop
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	20001c1c 	.word	0x20001c1c
 8007958:	20001c24 	.word	0x20001c24

0800795c <siprintf>:
 800795c:	b40e      	push	{r1, r2, r3}
 800795e:	b500      	push	{lr}
 8007960:	b09c      	sub	sp, #112	; 0x70
 8007962:	ab1d      	add	r3, sp, #116	; 0x74
 8007964:	9002      	str	r0, [sp, #8]
 8007966:	9006      	str	r0, [sp, #24]
 8007968:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800796c:	4809      	ldr	r0, [pc, #36]	; (8007994 <siprintf+0x38>)
 800796e:	9107      	str	r1, [sp, #28]
 8007970:	9104      	str	r1, [sp, #16]
 8007972:	4909      	ldr	r1, [pc, #36]	; (8007998 <siprintf+0x3c>)
 8007974:	f853 2b04 	ldr.w	r2, [r3], #4
 8007978:	9105      	str	r1, [sp, #20]
 800797a:	6800      	ldr	r0, [r0, #0]
 800797c:	9301      	str	r3, [sp, #4]
 800797e:	a902      	add	r1, sp, #8
 8007980:	f000 f9f6 	bl	8007d70 <_svfiprintf_r>
 8007984:	9b02      	ldr	r3, [sp, #8]
 8007986:	2200      	movs	r2, #0
 8007988:	701a      	strb	r2, [r3, #0]
 800798a:	b01c      	add	sp, #112	; 0x70
 800798c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007990:	b003      	add	sp, #12
 8007992:	4770      	bx	lr
 8007994:	200000a4 	.word	0x200000a4
 8007998:	ffff0208 	.word	0xffff0208

0800799c <memset>:
 800799c:	4402      	add	r2, r0
 800799e:	4603      	mov	r3, r0
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d100      	bne.n	80079a6 <memset+0xa>
 80079a4:	4770      	bx	lr
 80079a6:	f803 1b01 	strb.w	r1, [r3], #1
 80079aa:	e7f9      	b.n	80079a0 <memset+0x4>

080079ac <_reclaim_reent>:
 80079ac:	4b29      	ldr	r3, [pc, #164]	; (8007a54 <_reclaim_reent+0xa8>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4283      	cmp	r3, r0
 80079b2:	b570      	push	{r4, r5, r6, lr}
 80079b4:	4604      	mov	r4, r0
 80079b6:	d04b      	beq.n	8007a50 <_reclaim_reent+0xa4>
 80079b8:	69c3      	ldr	r3, [r0, #28]
 80079ba:	b143      	cbz	r3, 80079ce <_reclaim_reent+0x22>
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d144      	bne.n	8007a4c <_reclaim_reent+0xa0>
 80079c2:	69e3      	ldr	r3, [r4, #28]
 80079c4:	6819      	ldr	r1, [r3, #0]
 80079c6:	b111      	cbz	r1, 80079ce <_reclaim_reent+0x22>
 80079c8:	4620      	mov	r0, r4
 80079ca:	f000 f87f 	bl	8007acc <_free_r>
 80079ce:	6961      	ldr	r1, [r4, #20]
 80079d0:	b111      	cbz	r1, 80079d8 <_reclaim_reent+0x2c>
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 f87a 	bl	8007acc <_free_r>
 80079d8:	69e1      	ldr	r1, [r4, #28]
 80079da:	b111      	cbz	r1, 80079e2 <_reclaim_reent+0x36>
 80079dc:	4620      	mov	r0, r4
 80079de:	f000 f875 	bl	8007acc <_free_r>
 80079e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80079e4:	b111      	cbz	r1, 80079ec <_reclaim_reent+0x40>
 80079e6:	4620      	mov	r0, r4
 80079e8:	f000 f870 	bl	8007acc <_free_r>
 80079ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079ee:	b111      	cbz	r1, 80079f6 <_reclaim_reent+0x4a>
 80079f0:	4620      	mov	r0, r4
 80079f2:	f000 f86b 	bl	8007acc <_free_r>
 80079f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80079f8:	b111      	cbz	r1, 8007a00 <_reclaim_reent+0x54>
 80079fa:	4620      	mov	r0, r4
 80079fc:	f000 f866 	bl	8007acc <_free_r>
 8007a00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007a02:	b111      	cbz	r1, 8007a0a <_reclaim_reent+0x5e>
 8007a04:	4620      	mov	r0, r4
 8007a06:	f000 f861 	bl	8007acc <_free_r>
 8007a0a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007a0c:	b111      	cbz	r1, 8007a14 <_reclaim_reent+0x68>
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f000 f85c 	bl	8007acc <_free_r>
 8007a14:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007a16:	b111      	cbz	r1, 8007a1e <_reclaim_reent+0x72>
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f000 f857 	bl	8007acc <_free_r>
 8007a1e:	6a23      	ldr	r3, [r4, #32]
 8007a20:	b1b3      	cbz	r3, 8007a50 <_reclaim_reent+0xa4>
 8007a22:	4620      	mov	r0, r4
 8007a24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a28:	4718      	bx	r3
 8007a2a:	5949      	ldr	r1, [r1, r5]
 8007a2c:	b941      	cbnz	r1, 8007a40 <_reclaim_reent+0x94>
 8007a2e:	3504      	adds	r5, #4
 8007a30:	69e3      	ldr	r3, [r4, #28]
 8007a32:	2d80      	cmp	r5, #128	; 0x80
 8007a34:	68d9      	ldr	r1, [r3, #12]
 8007a36:	d1f8      	bne.n	8007a2a <_reclaim_reent+0x7e>
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f000 f847 	bl	8007acc <_free_r>
 8007a3e:	e7c0      	b.n	80079c2 <_reclaim_reent+0x16>
 8007a40:	680e      	ldr	r6, [r1, #0]
 8007a42:	4620      	mov	r0, r4
 8007a44:	f000 f842 	bl	8007acc <_free_r>
 8007a48:	4631      	mov	r1, r6
 8007a4a:	e7ef      	b.n	8007a2c <_reclaim_reent+0x80>
 8007a4c:	2500      	movs	r5, #0
 8007a4e:	e7ef      	b.n	8007a30 <_reclaim_reent+0x84>
 8007a50:	bd70      	pop	{r4, r5, r6, pc}
 8007a52:	bf00      	nop
 8007a54:	200000a4 	.word	0x200000a4

08007a58 <__errno>:
 8007a58:	4b01      	ldr	r3, [pc, #4]	; (8007a60 <__errno+0x8>)
 8007a5a:	6818      	ldr	r0, [r3, #0]
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	200000a4 	.word	0x200000a4

08007a64 <__libc_init_array>:
 8007a64:	b570      	push	{r4, r5, r6, lr}
 8007a66:	4d0d      	ldr	r5, [pc, #52]	; (8007a9c <__libc_init_array+0x38>)
 8007a68:	4c0d      	ldr	r4, [pc, #52]	; (8007aa0 <__libc_init_array+0x3c>)
 8007a6a:	1b64      	subs	r4, r4, r5
 8007a6c:	10a4      	asrs	r4, r4, #2
 8007a6e:	2600      	movs	r6, #0
 8007a70:	42a6      	cmp	r6, r4
 8007a72:	d109      	bne.n	8007a88 <__libc_init_array+0x24>
 8007a74:	4d0b      	ldr	r5, [pc, #44]	; (8007aa4 <__libc_init_array+0x40>)
 8007a76:	4c0c      	ldr	r4, [pc, #48]	; (8007aa8 <__libc_init_array+0x44>)
 8007a78:	f000 fc6a 	bl	8008350 <_init>
 8007a7c:	1b64      	subs	r4, r4, r5
 8007a7e:	10a4      	asrs	r4, r4, #2
 8007a80:	2600      	movs	r6, #0
 8007a82:	42a6      	cmp	r6, r4
 8007a84:	d105      	bne.n	8007a92 <__libc_init_array+0x2e>
 8007a86:	bd70      	pop	{r4, r5, r6, pc}
 8007a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a8c:	4798      	blx	r3
 8007a8e:	3601      	adds	r6, #1
 8007a90:	e7ee      	b.n	8007a70 <__libc_init_array+0xc>
 8007a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a96:	4798      	blx	r3
 8007a98:	3601      	adds	r6, #1
 8007a9a:	e7f2      	b.n	8007a82 <__libc_init_array+0x1e>
 8007a9c:	08008490 	.word	0x08008490
 8007aa0:	08008490 	.word	0x08008490
 8007aa4:	08008490 	.word	0x08008490
 8007aa8:	08008494 	.word	0x08008494

08007aac <__retarget_lock_acquire_recursive>:
 8007aac:	4770      	bx	lr

08007aae <__retarget_lock_release_recursive>:
 8007aae:	4770      	bx	lr

08007ab0 <memcpy>:
 8007ab0:	440a      	add	r2, r1
 8007ab2:	4291      	cmp	r1, r2
 8007ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ab8:	d100      	bne.n	8007abc <memcpy+0xc>
 8007aba:	4770      	bx	lr
 8007abc:	b510      	push	{r4, lr}
 8007abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ac6:	4291      	cmp	r1, r2
 8007ac8:	d1f9      	bne.n	8007abe <memcpy+0xe>
 8007aca:	bd10      	pop	{r4, pc}

08007acc <_free_r>:
 8007acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ace:	2900      	cmp	r1, #0
 8007ad0:	d044      	beq.n	8007b5c <_free_r+0x90>
 8007ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ad6:	9001      	str	r0, [sp, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f1a1 0404 	sub.w	r4, r1, #4
 8007ade:	bfb8      	it	lt
 8007ae0:	18e4      	addlt	r4, r4, r3
 8007ae2:	f000 f8df 	bl	8007ca4 <__malloc_lock>
 8007ae6:	4a1e      	ldr	r2, [pc, #120]	; (8007b60 <_free_r+0x94>)
 8007ae8:	9801      	ldr	r0, [sp, #4]
 8007aea:	6813      	ldr	r3, [r2, #0]
 8007aec:	b933      	cbnz	r3, 8007afc <_free_r+0x30>
 8007aee:	6063      	str	r3, [r4, #4]
 8007af0:	6014      	str	r4, [r2, #0]
 8007af2:	b003      	add	sp, #12
 8007af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007af8:	f000 b8da 	b.w	8007cb0 <__malloc_unlock>
 8007afc:	42a3      	cmp	r3, r4
 8007afe:	d908      	bls.n	8007b12 <_free_r+0x46>
 8007b00:	6825      	ldr	r5, [r4, #0]
 8007b02:	1961      	adds	r1, r4, r5
 8007b04:	428b      	cmp	r3, r1
 8007b06:	bf01      	itttt	eq
 8007b08:	6819      	ldreq	r1, [r3, #0]
 8007b0a:	685b      	ldreq	r3, [r3, #4]
 8007b0c:	1949      	addeq	r1, r1, r5
 8007b0e:	6021      	streq	r1, [r4, #0]
 8007b10:	e7ed      	b.n	8007aee <_free_r+0x22>
 8007b12:	461a      	mov	r2, r3
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	b10b      	cbz	r3, 8007b1c <_free_r+0x50>
 8007b18:	42a3      	cmp	r3, r4
 8007b1a:	d9fa      	bls.n	8007b12 <_free_r+0x46>
 8007b1c:	6811      	ldr	r1, [r2, #0]
 8007b1e:	1855      	adds	r5, r2, r1
 8007b20:	42a5      	cmp	r5, r4
 8007b22:	d10b      	bne.n	8007b3c <_free_r+0x70>
 8007b24:	6824      	ldr	r4, [r4, #0]
 8007b26:	4421      	add	r1, r4
 8007b28:	1854      	adds	r4, r2, r1
 8007b2a:	42a3      	cmp	r3, r4
 8007b2c:	6011      	str	r1, [r2, #0]
 8007b2e:	d1e0      	bne.n	8007af2 <_free_r+0x26>
 8007b30:	681c      	ldr	r4, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	6053      	str	r3, [r2, #4]
 8007b36:	440c      	add	r4, r1
 8007b38:	6014      	str	r4, [r2, #0]
 8007b3a:	e7da      	b.n	8007af2 <_free_r+0x26>
 8007b3c:	d902      	bls.n	8007b44 <_free_r+0x78>
 8007b3e:	230c      	movs	r3, #12
 8007b40:	6003      	str	r3, [r0, #0]
 8007b42:	e7d6      	b.n	8007af2 <_free_r+0x26>
 8007b44:	6825      	ldr	r5, [r4, #0]
 8007b46:	1961      	adds	r1, r4, r5
 8007b48:	428b      	cmp	r3, r1
 8007b4a:	bf04      	itt	eq
 8007b4c:	6819      	ldreq	r1, [r3, #0]
 8007b4e:	685b      	ldreq	r3, [r3, #4]
 8007b50:	6063      	str	r3, [r4, #4]
 8007b52:	bf04      	itt	eq
 8007b54:	1949      	addeq	r1, r1, r5
 8007b56:	6021      	streq	r1, [r4, #0]
 8007b58:	6054      	str	r4, [r2, #4]
 8007b5a:	e7ca      	b.n	8007af2 <_free_r+0x26>
 8007b5c:	b003      	add	sp, #12
 8007b5e:	bd30      	pop	{r4, r5, pc}
 8007b60:	20001d7c 	.word	0x20001d7c

08007b64 <sbrk_aligned>:
 8007b64:	b570      	push	{r4, r5, r6, lr}
 8007b66:	4e0e      	ldr	r6, [pc, #56]	; (8007ba0 <sbrk_aligned+0x3c>)
 8007b68:	460c      	mov	r4, r1
 8007b6a:	6831      	ldr	r1, [r6, #0]
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	b911      	cbnz	r1, 8007b76 <sbrk_aligned+0x12>
 8007b70:	f000 fba6 	bl	80082c0 <_sbrk_r>
 8007b74:	6030      	str	r0, [r6, #0]
 8007b76:	4621      	mov	r1, r4
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f000 fba1 	bl	80082c0 <_sbrk_r>
 8007b7e:	1c43      	adds	r3, r0, #1
 8007b80:	d00a      	beq.n	8007b98 <sbrk_aligned+0x34>
 8007b82:	1cc4      	adds	r4, r0, #3
 8007b84:	f024 0403 	bic.w	r4, r4, #3
 8007b88:	42a0      	cmp	r0, r4
 8007b8a:	d007      	beq.n	8007b9c <sbrk_aligned+0x38>
 8007b8c:	1a21      	subs	r1, r4, r0
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f000 fb96 	bl	80082c0 <_sbrk_r>
 8007b94:	3001      	adds	r0, #1
 8007b96:	d101      	bne.n	8007b9c <sbrk_aligned+0x38>
 8007b98:	f04f 34ff 	mov.w	r4, #4294967295
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	20001d80 	.word	0x20001d80

08007ba4 <_malloc_r>:
 8007ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ba8:	1ccd      	adds	r5, r1, #3
 8007baa:	f025 0503 	bic.w	r5, r5, #3
 8007bae:	3508      	adds	r5, #8
 8007bb0:	2d0c      	cmp	r5, #12
 8007bb2:	bf38      	it	cc
 8007bb4:	250c      	movcc	r5, #12
 8007bb6:	2d00      	cmp	r5, #0
 8007bb8:	4607      	mov	r7, r0
 8007bba:	db01      	blt.n	8007bc0 <_malloc_r+0x1c>
 8007bbc:	42a9      	cmp	r1, r5
 8007bbe:	d905      	bls.n	8007bcc <_malloc_r+0x28>
 8007bc0:	230c      	movs	r3, #12
 8007bc2:	603b      	str	r3, [r7, #0]
 8007bc4:	2600      	movs	r6, #0
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ca0 <_malloc_r+0xfc>
 8007bd0:	f000 f868 	bl	8007ca4 <__malloc_lock>
 8007bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8007bd8:	461c      	mov	r4, r3
 8007bda:	bb5c      	cbnz	r4, 8007c34 <_malloc_r+0x90>
 8007bdc:	4629      	mov	r1, r5
 8007bde:	4638      	mov	r0, r7
 8007be0:	f7ff ffc0 	bl	8007b64 <sbrk_aligned>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	4604      	mov	r4, r0
 8007be8:	d155      	bne.n	8007c96 <_malloc_r+0xf2>
 8007bea:	f8d8 4000 	ldr.w	r4, [r8]
 8007bee:	4626      	mov	r6, r4
 8007bf0:	2e00      	cmp	r6, #0
 8007bf2:	d145      	bne.n	8007c80 <_malloc_r+0xdc>
 8007bf4:	2c00      	cmp	r4, #0
 8007bf6:	d048      	beq.n	8007c8a <_malloc_r+0xe6>
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4638      	mov	r0, r7
 8007bfe:	eb04 0903 	add.w	r9, r4, r3
 8007c02:	f000 fb5d 	bl	80082c0 <_sbrk_r>
 8007c06:	4581      	cmp	r9, r0
 8007c08:	d13f      	bne.n	8007c8a <_malloc_r+0xe6>
 8007c0a:	6821      	ldr	r1, [r4, #0]
 8007c0c:	1a6d      	subs	r5, r5, r1
 8007c0e:	4629      	mov	r1, r5
 8007c10:	4638      	mov	r0, r7
 8007c12:	f7ff ffa7 	bl	8007b64 <sbrk_aligned>
 8007c16:	3001      	adds	r0, #1
 8007c18:	d037      	beq.n	8007c8a <_malloc_r+0xe6>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	442b      	add	r3, r5
 8007c1e:	6023      	str	r3, [r4, #0]
 8007c20:	f8d8 3000 	ldr.w	r3, [r8]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d038      	beq.n	8007c9a <_malloc_r+0xf6>
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	42a2      	cmp	r2, r4
 8007c2c:	d12b      	bne.n	8007c86 <_malloc_r+0xe2>
 8007c2e:	2200      	movs	r2, #0
 8007c30:	605a      	str	r2, [r3, #4]
 8007c32:	e00f      	b.n	8007c54 <_malloc_r+0xb0>
 8007c34:	6822      	ldr	r2, [r4, #0]
 8007c36:	1b52      	subs	r2, r2, r5
 8007c38:	d41f      	bmi.n	8007c7a <_malloc_r+0xd6>
 8007c3a:	2a0b      	cmp	r2, #11
 8007c3c:	d917      	bls.n	8007c6e <_malloc_r+0xca>
 8007c3e:	1961      	adds	r1, r4, r5
 8007c40:	42a3      	cmp	r3, r4
 8007c42:	6025      	str	r5, [r4, #0]
 8007c44:	bf18      	it	ne
 8007c46:	6059      	strne	r1, [r3, #4]
 8007c48:	6863      	ldr	r3, [r4, #4]
 8007c4a:	bf08      	it	eq
 8007c4c:	f8c8 1000 	streq.w	r1, [r8]
 8007c50:	5162      	str	r2, [r4, r5]
 8007c52:	604b      	str	r3, [r1, #4]
 8007c54:	4638      	mov	r0, r7
 8007c56:	f104 060b 	add.w	r6, r4, #11
 8007c5a:	f000 f829 	bl	8007cb0 <__malloc_unlock>
 8007c5e:	f026 0607 	bic.w	r6, r6, #7
 8007c62:	1d23      	adds	r3, r4, #4
 8007c64:	1af2      	subs	r2, r6, r3
 8007c66:	d0ae      	beq.n	8007bc6 <_malloc_r+0x22>
 8007c68:	1b9b      	subs	r3, r3, r6
 8007c6a:	50a3      	str	r3, [r4, r2]
 8007c6c:	e7ab      	b.n	8007bc6 <_malloc_r+0x22>
 8007c6e:	42a3      	cmp	r3, r4
 8007c70:	6862      	ldr	r2, [r4, #4]
 8007c72:	d1dd      	bne.n	8007c30 <_malloc_r+0x8c>
 8007c74:	f8c8 2000 	str.w	r2, [r8]
 8007c78:	e7ec      	b.n	8007c54 <_malloc_r+0xb0>
 8007c7a:	4623      	mov	r3, r4
 8007c7c:	6864      	ldr	r4, [r4, #4]
 8007c7e:	e7ac      	b.n	8007bda <_malloc_r+0x36>
 8007c80:	4634      	mov	r4, r6
 8007c82:	6876      	ldr	r6, [r6, #4]
 8007c84:	e7b4      	b.n	8007bf0 <_malloc_r+0x4c>
 8007c86:	4613      	mov	r3, r2
 8007c88:	e7cc      	b.n	8007c24 <_malloc_r+0x80>
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	603b      	str	r3, [r7, #0]
 8007c8e:	4638      	mov	r0, r7
 8007c90:	f000 f80e 	bl	8007cb0 <__malloc_unlock>
 8007c94:	e797      	b.n	8007bc6 <_malloc_r+0x22>
 8007c96:	6025      	str	r5, [r4, #0]
 8007c98:	e7dc      	b.n	8007c54 <_malloc_r+0xb0>
 8007c9a:	605b      	str	r3, [r3, #4]
 8007c9c:	deff      	udf	#255	; 0xff
 8007c9e:	bf00      	nop
 8007ca0:	20001d7c 	.word	0x20001d7c

08007ca4 <__malloc_lock>:
 8007ca4:	4801      	ldr	r0, [pc, #4]	; (8007cac <__malloc_lock+0x8>)
 8007ca6:	f7ff bf01 	b.w	8007aac <__retarget_lock_acquire_recursive>
 8007caa:	bf00      	nop
 8007cac:	20001d78 	.word	0x20001d78

08007cb0 <__malloc_unlock>:
 8007cb0:	4801      	ldr	r0, [pc, #4]	; (8007cb8 <__malloc_unlock+0x8>)
 8007cb2:	f7ff befc 	b.w	8007aae <__retarget_lock_release_recursive>
 8007cb6:	bf00      	nop
 8007cb8:	20001d78 	.word	0x20001d78

08007cbc <__ssputs_r>:
 8007cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc0:	688e      	ldr	r6, [r1, #8]
 8007cc2:	461f      	mov	r7, r3
 8007cc4:	42be      	cmp	r6, r7
 8007cc6:	680b      	ldr	r3, [r1, #0]
 8007cc8:	4682      	mov	sl, r0
 8007cca:	460c      	mov	r4, r1
 8007ccc:	4690      	mov	r8, r2
 8007cce:	d82c      	bhi.n	8007d2a <__ssputs_r+0x6e>
 8007cd0:	898a      	ldrh	r2, [r1, #12]
 8007cd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cd6:	d026      	beq.n	8007d26 <__ssputs_r+0x6a>
 8007cd8:	6965      	ldr	r5, [r4, #20]
 8007cda:	6909      	ldr	r1, [r1, #16]
 8007cdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ce0:	eba3 0901 	sub.w	r9, r3, r1
 8007ce4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ce8:	1c7b      	adds	r3, r7, #1
 8007cea:	444b      	add	r3, r9
 8007cec:	106d      	asrs	r5, r5, #1
 8007cee:	429d      	cmp	r5, r3
 8007cf0:	bf38      	it	cc
 8007cf2:	461d      	movcc	r5, r3
 8007cf4:	0553      	lsls	r3, r2, #21
 8007cf6:	d527      	bpl.n	8007d48 <__ssputs_r+0x8c>
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	f7ff ff53 	bl	8007ba4 <_malloc_r>
 8007cfe:	4606      	mov	r6, r0
 8007d00:	b360      	cbz	r0, 8007d5c <__ssputs_r+0xa0>
 8007d02:	6921      	ldr	r1, [r4, #16]
 8007d04:	464a      	mov	r2, r9
 8007d06:	f7ff fed3 	bl	8007ab0 <memcpy>
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d14:	81a3      	strh	r3, [r4, #12]
 8007d16:	6126      	str	r6, [r4, #16]
 8007d18:	6165      	str	r5, [r4, #20]
 8007d1a:	444e      	add	r6, r9
 8007d1c:	eba5 0509 	sub.w	r5, r5, r9
 8007d20:	6026      	str	r6, [r4, #0]
 8007d22:	60a5      	str	r5, [r4, #8]
 8007d24:	463e      	mov	r6, r7
 8007d26:	42be      	cmp	r6, r7
 8007d28:	d900      	bls.n	8007d2c <__ssputs_r+0x70>
 8007d2a:	463e      	mov	r6, r7
 8007d2c:	6820      	ldr	r0, [r4, #0]
 8007d2e:	4632      	mov	r2, r6
 8007d30:	4641      	mov	r1, r8
 8007d32:	f000 faab 	bl	800828c <memmove>
 8007d36:	68a3      	ldr	r3, [r4, #8]
 8007d38:	1b9b      	subs	r3, r3, r6
 8007d3a:	60a3      	str	r3, [r4, #8]
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	4433      	add	r3, r6
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	2000      	movs	r0, #0
 8007d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d48:	462a      	mov	r2, r5
 8007d4a:	f000 fac9 	bl	80082e0 <_realloc_r>
 8007d4e:	4606      	mov	r6, r0
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d1e0      	bne.n	8007d16 <__ssputs_r+0x5a>
 8007d54:	6921      	ldr	r1, [r4, #16]
 8007d56:	4650      	mov	r0, sl
 8007d58:	f7ff feb8 	bl	8007acc <_free_r>
 8007d5c:	230c      	movs	r3, #12
 8007d5e:	f8ca 3000 	str.w	r3, [sl]
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d68:	81a3      	strh	r3, [r4, #12]
 8007d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6e:	e7e9      	b.n	8007d44 <__ssputs_r+0x88>

08007d70 <_svfiprintf_r>:
 8007d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d74:	4698      	mov	r8, r3
 8007d76:	898b      	ldrh	r3, [r1, #12]
 8007d78:	061b      	lsls	r3, r3, #24
 8007d7a:	b09d      	sub	sp, #116	; 0x74
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	460d      	mov	r5, r1
 8007d80:	4614      	mov	r4, r2
 8007d82:	d50e      	bpl.n	8007da2 <_svfiprintf_r+0x32>
 8007d84:	690b      	ldr	r3, [r1, #16]
 8007d86:	b963      	cbnz	r3, 8007da2 <_svfiprintf_r+0x32>
 8007d88:	2140      	movs	r1, #64	; 0x40
 8007d8a:	f7ff ff0b 	bl	8007ba4 <_malloc_r>
 8007d8e:	6028      	str	r0, [r5, #0]
 8007d90:	6128      	str	r0, [r5, #16]
 8007d92:	b920      	cbnz	r0, 8007d9e <_svfiprintf_r+0x2e>
 8007d94:	230c      	movs	r3, #12
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9c:	e0d0      	b.n	8007f40 <_svfiprintf_r+0x1d0>
 8007d9e:	2340      	movs	r3, #64	; 0x40
 8007da0:	616b      	str	r3, [r5, #20]
 8007da2:	2300      	movs	r3, #0
 8007da4:	9309      	str	r3, [sp, #36]	; 0x24
 8007da6:	2320      	movs	r3, #32
 8007da8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8007db0:	2330      	movs	r3, #48	; 0x30
 8007db2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007f58 <_svfiprintf_r+0x1e8>
 8007db6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dba:	f04f 0901 	mov.w	r9, #1
 8007dbe:	4623      	mov	r3, r4
 8007dc0:	469a      	mov	sl, r3
 8007dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dc6:	b10a      	cbz	r2, 8007dcc <_svfiprintf_r+0x5c>
 8007dc8:	2a25      	cmp	r2, #37	; 0x25
 8007dca:	d1f9      	bne.n	8007dc0 <_svfiprintf_r+0x50>
 8007dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8007dd0:	d00b      	beq.n	8007dea <_svfiprintf_r+0x7a>
 8007dd2:	465b      	mov	r3, fp
 8007dd4:	4622      	mov	r2, r4
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	4638      	mov	r0, r7
 8007dda:	f7ff ff6f 	bl	8007cbc <__ssputs_r>
 8007dde:	3001      	adds	r0, #1
 8007de0:	f000 80a9 	beq.w	8007f36 <_svfiprintf_r+0x1c6>
 8007de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007de6:	445a      	add	r2, fp
 8007de8:	9209      	str	r2, [sp, #36]	; 0x24
 8007dea:	f89a 3000 	ldrb.w	r3, [sl]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 80a1 	beq.w	8007f36 <_svfiprintf_r+0x1c6>
 8007df4:	2300      	movs	r3, #0
 8007df6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dfe:	f10a 0a01 	add.w	sl, sl, #1
 8007e02:	9304      	str	r3, [sp, #16]
 8007e04:	9307      	str	r3, [sp, #28]
 8007e06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e0a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e0c:	4654      	mov	r4, sl
 8007e0e:	2205      	movs	r2, #5
 8007e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e14:	4850      	ldr	r0, [pc, #320]	; (8007f58 <_svfiprintf_r+0x1e8>)
 8007e16:	f7f8 f9db 	bl	80001d0 <memchr>
 8007e1a:	9a04      	ldr	r2, [sp, #16]
 8007e1c:	b9d8      	cbnz	r0, 8007e56 <_svfiprintf_r+0xe6>
 8007e1e:	06d0      	lsls	r0, r2, #27
 8007e20:	bf44      	itt	mi
 8007e22:	2320      	movmi	r3, #32
 8007e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e28:	0711      	lsls	r1, r2, #28
 8007e2a:	bf44      	itt	mi
 8007e2c:	232b      	movmi	r3, #43	; 0x2b
 8007e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e32:	f89a 3000 	ldrb.w	r3, [sl]
 8007e36:	2b2a      	cmp	r3, #42	; 0x2a
 8007e38:	d015      	beq.n	8007e66 <_svfiprintf_r+0xf6>
 8007e3a:	9a07      	ldr	r2, [sp, #28]
 8007e3c:	4654      	mov	r4, sl
 8007e3e:	2000      	movs	r0, #0
 8007e40:	f04f 0c0a 	mov.w	ip, #10
 8007e44:	4621      	mov	r1, r4
 8007e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e4a:	3b30      	subs	r3, #48	; 0x30
 8007e4c:	2b09      	cmp	r3, #9
 8007e4e:	d94d      	bls.n	8007eec <_svfiprintf_r+0x17c>
 8007e50:	b1b0      	cbz	r0, 8007e80 <_svfiprintf_r+0x110>
 8007e52:	9207      	str	r2, [sp, #28]
 8007e54:	e014      	b.n	8007e80 <_svfiprintf_r+0x110>
 8007e56:	eba0 0308 	sub.w	r3, r0, r8
 8007e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	9304      	str	r3, [sp, #16]
 8007e62:	46a2      	mov	sl, r4
 8007e64:	e7d2      	b.n	8007e0c <_svfiprintf_r+0x9c>
 8007e66:	9b03      	ldr	r3, [sp, #12]
 8007e68:	1d19      	adds	r1, r3, #4
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	9103      	str	r1, [sp, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	bfbb      	ittet	lt
 8007e72:	425b      	neglt	r3, r3
 8007e74:	f042 0202 	orrlt.w	r2, r2, #2
 8007e78:	9307      	strge	r3, [sp, #28]
 8007e7a:	9307      	strlt	r3, [sp, #28]
 8007e7c:	bfb8      	it	lt
 8007e7e:	9204      	strlt	r2, [sp, #16]
 8007e80:	7823      	ldrb	r3, [r4, #0]
 8007e82:	2b2e      	cmp	r3, #46	; 0x2e
 8007e84:	d10c      	bne.n	8007ea0 <_svfiprintf_r+0x130>
 8007e86:	7863      	ldrb	r3, [r4, #1]
 8007e88:	2b2a      	cmp	r3, #42	; 0x2a
 8007e8a:	d134      	bne.n	8007ef6 <_svfiprintf_r+0x186>
 8007e8c:	9b03      	ldr	r3, [sp, #12]
 8007e8e:	1d1a      	adds	r2, r3, #4
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	9203      	str	r2, [sp, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	bfb8      	it	lt
 8007e98:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e9c:	3402      	adds	r4, #2
 8007e9e:	9305      	str	r3, [sp, #20]
 8007ea0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007f68 <_svfiprintf_r+0x1f8>
 8007ea4:	7821      	ldrb	r1, [r4, #0]
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	4650      	mov	r0, sl
 8007eaa:	f7f8 f991 	bl	80001d0 <memchr>
 8007eae:	b138      	cbz	r0, 8007ec0 <_svfiprintf_r+0x150>
 8007eb0:	9b04      	ldr	r3, [sp, #16]
 8007eb2:	eba0 000a 	sub.w	r0, r0, sl
 8007eb6:	2240      	movs	r2, #64	; 0x40
 8007eb8:	4082      	lsls	r2, r0
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	3401      	adds	r4, #1
 8007ebe:	9304      	str	r3, [sp, #16]
 8007ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec4:	4825      	ldr	r0, [pc, #148]	; (8007f5c <_svfiprintf_r+0x1ec>)
 8007ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eca:	2206      	movs	r2, #6
 8007ecc:	f7f8 f980 	bl	80001d0 <memchr>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d038      	beq.n	8007f46 <_svfiprintf_r+0x1d6>
 8007ed4:	4b22      	ldr	r3, [pc, #136]	; (8007f60 <_svfiprintf_r+0x1f0>)
 8007ed6:	bb1b      	cbnz	r3, 8007f20 <_svfiprintf_r+0x1b0>
 8007ed8:	9b03      	ldr	r3, [sp, #12]
 8007eda:	3307      	adds	r3, #7
 8007edc:	f023 0307 	bic.w	r3, r3, #7
 8007ee0:	3308      	adds	r3, #8
 8007ee2:	9303      	str	r3, [sp, #12]
 8007ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee6:	4433      	add	r3, r6
 8007ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8007eea:	e768      	b.n	8007dbe <_svfiprintf_r+0x4e>
 8007eec:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	e7a6      	b.n	8007e44 <_svfiprintf_r+0xd4>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	3401      	adds	r4, #1
 8007efa:	9305      	str	r3, [sp, #20]
 8007efc:	4619      	mov	r1, r3
 8007efe:	f04f 0c0a 	mov.w	ip, #10
 8007f02:	4620      	mov	r0, r4
 8007f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f08:	3a30      	subs	r2, #48	; 0x30
 8007f0a:	2a09      	cmp	r2, #9
 8007f0c:	d903      	bls.n	8007f16 <_svfiprintf_r+0x1a6>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0c6      	beq.n	8007ea0 <_svfiprintf_r+0x130>
 8007f12:	9105      	str	r1, [sp, #20]
 8007f14:	e7c4      	b.n	8007ea0 <_svfiprintf_r+0x130>
 8007f16:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e7f0      	b.n	8007f02 <_svfiprintf_r+0x192>
 8007f20:	ab03      	add	r3, sp, #12
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	462a      	mov	r2, r5
 8007f26:	4b0f      	ldr	r3, [pc, #60]	; (8007f64 <_svfiprintf_r+0x1f4>)
 8007f28:	a904      	add	r1, sp, #16
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	f3af 8000 	nop.w
 8007f30:	1c42      	adds	r2, r0, #1
 8007f32:	4606      	mov	r6, r0
 8007f34:	d1d6      	bne.n	8007ee4 <_svfiprintf_r+0x174>
 8007f36:	89ab      	ldrh	r3, [r5, #12]
 8007f38:	065b      	lsls	r3, r3, #25
 8007f3a:	f53f af2d 	bmi.w	8007d98 <_svfiprintf_r+0x28>
 8007f3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f40:	b01d      	add	sp, #116	; 0x74
 8007f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f46:	ab03      	add	r3, sp, #12
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	462a      	mov	r2, r5
 8007f4c:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <_svfiprintf_r+0x1f4>)
 8007f4e:	a904      	add	r1, sp, #16
 8007f50:	4638      	mov	r0, r7
 8007f52:	f000 f879 	bl	8008048 <_printf_i>
 8007f56:	e7eb      	b.n	8007f30 <_svfiprintf_r+0x1c0>
 8007f58:	08008454 	.word	0x08008454
 8007f5c:	0800845e 	.word	0x0800845e
 8007f60:	00000000 	.word	0x00000000
 8007f64:	08007cbd 	.word	0x08007cbd
 8007f68:	0800845a 	.word	0x0800845a

08007f6c <_printf_common>:
 8007f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f70:	4616      	mov	r6, r2
 8007f72:	4699      	mov	r9, r3
 8007f74:	688a      	ldr	r2, [r1, #8]
 8007f76:	690b      	ldr	r3, [r1, #16]
 8007f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	bfb8      	it	lt
 8007f80:	4613      	movlt	r3, r2
 8007f82:	6033      	str	r3, [r6, #0]
 8007f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f88:	4607      	mov	r7, r0
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	b10a      	cbz	r2, 8007f92 <_printf_common+0x26>
 8007f8e:	3301      	adds	r3, #1
 8007f90:	6033      	str	r3, [r6, #0]
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	0699      	lsls	r1, r3, #26
 8007f96:	bf42      	ittt	mi
 8007f98:	6833      	ldrmi	r3, [r6, #0]
 8007f9a:	3302      	addmi	r3, #2
 8007f9c:	6033      	strmi	r3, [r6, #0]
 8007f9e:	6825      	ldr	r5, [r4, #0]
 8007fa0:	f015 0506 	ands.w	r5, r5, #6
 8007fa4:	d106      	bne.n	8007fb4 <_printf_common+0x48>
 8007fa6:	f104 0a19 	add.w	sl, r4, #25
 8007faa:	68e3      	ldr	r3, [r4, #12]
 8007fac:	6832      	ldr	r2, [r6, #0]
 8007fae:	1a9b      	subs	r3, r3, r2
 8007fb0:	42ab      	cmp	r3, r5
 8007fb2:	dc26      	bgt.n	8008002 <_printf_common+0x96>
 8007fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fb8:	1e13      	subs	r3, r2, #0
 8007fba:	6822      	ldr	r2, [r4, #0]
 8007fbc:	bf18      	it	ne
 8007fbe:	2301      	movne	r3, #1
 8007fc0:	0692      	lsls	r2, r2, #26
 8007fc2:	d42b      	bmi.n	800801c <_printf_common+0xb0>
 8007fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fc8:	4649      	mov	r1, r9
 8007fca:	4638      	mov	r0, r7
 8007fcc:	47c0      	blx	r8
 8007fce:	3001      	adds	r0, #1
 8007fd0:	d01e      	beq.n	8008010 <_printf_common+0xa4>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	6922      	ldr	r2, [r4, #16]
 8007fd6:	f003 0306 	and.w	r3, r3, #6
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	bf02      	ittt	eq
 8007fde:	68e5      	ldreq	r5, [r4, #12]
 8007fe0:	6833      	ldreq	r3, [r6, #0]
 8007fe2:	1aed      	subeq	r5, r5, r3
 8007fe4:	68a3      	ldr	r3, [r4, #8]
 8007fe6:	bf0c      	ite	eq
 8007fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fec:	2500      	movne	r5, #0
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	bfc4      	itt	gt
 8007ff2:	1a9b      	subgt	r3, r3, r2
 8007ff4:	18ed      	addgt	r5, r5, r3
 8007ff6:	2600      	movs	r6, #0
 8007ff8:	341a      	adds	r4, #26
 8007ffa:	42b5      	cmp	r5, r6
 8007ffc:	d11a      	bne.n	8008034 <_printf_common+0xc8>
 8007ffe:	2000      	movs	r0, #0
 8008000:	e008      	b.n	8008014 <_printf_common+0xa8>
 8008002:	2301      	movs	r3, #1
 8008004:	4652      	mov	r2, sl
 8008006:	4649      	mov	r1, r9
 8008008:	4638      	mov	r0, r7
 800800a:	47c0      	blx	r8
 800800c:	3001      	adds	r0, #1
 800800e:	d103      	bne.n	8008018 <_printf_common+0xac>
 8008010:	f04f 30ff 	mov.w	r0, #4294967295
 8008014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008018:	3501      	adds	r5, #1
 800801a:	e7c6      	b.n	8007faa <_printf_common+0x3e>
 800801c:	18e1      	adds	r1, r4, r3
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	2030      	movs	r0, #48	; 0x30
 8008022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008026:	4422      	add	r2, r4
 8008028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800802c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008030:	3302      	adds	r3, #2
 8008032:	e7c7      	b.n	8007fc4 <_printf_common+0x58>
 8008034:	2301      	movs	r3, #1
 8008036:	4622      	mov	r2, r4
 8008038:	4649      	mov	r1, r9
 800803a:	4638      	mov	r0, r7
 800803c:	47c0      	blx	r8
 800803e:	3001      	adds	r0, #1
 8008040:	d0e6      	beq.n	8008010 <_printf_common+0xa4>
 8008042:	3601      	adds	r6, #1
 8008044:	e7d9      	b.n	8007ffa <_printf_common+0x8e>
	...

08008048 <_printf_i>:
 8008048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800804c:	7e0f      	ldrb	r7, [r1, #24]
 800804e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008050:	2f78      	cmp	r7, #120	; 0x78
 8008052:	4691      	mov	r9, r2
 8008054:	4680      	mov	r8, r0
 8008056:	460c      	mov	r4, r1
 8008058:	469a      	mov	sl, r3
 800805a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800805e:	d807      	bhi.n	8008070 <_printf_i+0x28>
 8008060:	2f62      	cmp	r7, #98	; 0x62
 8008062:	d80a      	bhi.n	800807a <_printf_i+0x32>
 8008064:	2f00      	cmp	r7, #0
 8008066:	f000 80d4 	beq.w	8008212 <_printf_i+0x1ca>
 800806a:	2f58      	cmp	r7, #88	; 0x58
 800806c:	f000 80c0 	beq.w	80081f0 <_printf_i+0x1a8>
 8008070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008078:	e03a      	b.n	80080f0 <_printf_i+0xa8>
 800807a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800807e:	2b15      	cmp	r3, #21
 8008080:	d8f6      	bhi.n	8008070 <_printf_i+0x28>
 8008082:	a101      	add	r1, pc, #4	; (adr r1, 8008088 <_printf_i+0x40>)
 8008084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008088:	080080e1 	.word	0x080080e1
 800808c:	080080f5 	.word	0x080080f5
 8008090:	08008071 	.word	0x08008071
 8008094:	08008071 	.word	0x08008071
 8008098:	08008071 	.word	0x08008071
 800809c:	08008071 	.word	0x08008071
 80080a0:	080080f5 	.word	0x080080f5
 80080a4:	08008071 	.word	0x08008071
 80080a8:	08008071 	.word	0x08008071
 80080ac:	08008071 	.word	0x08008071
 80080b0:	08008071 	.word	0x08008071
 80080b4:	080081f9 	.word	0x080081f9
 80080b8:	08008121 	.word	0x08008121
 80080bc:	080081b3 	.word	0x080081b3
 80080c0:	08008071 	.word	0x08008071
 80080c4:	08008071 	.word	0x08008071
 80080c8:	0800821b 	.word	0x0800821b
 80080cc:	08008071 	.word	0x08008071
 80080d0:	08008121 	.word	0x08008121
 80080d4:	08008071 	.word	0x08008071
 80080d8:	08008071 	.word	0x08008071
 80080dc:	080081bb 	.word	0x080081bb
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	1d1a      	adds	r2, r3, #4
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	602a      	str	r2, [r5, #0]
 80080e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080f0:	2301      	movs	r3, #1
 80080f2:	e09f      	b.n	8008234 <_printf_i+0x1ec>
 80080f4:	6820      	ldr	r0, [r4, #0]
 80080f6:	682b      	ldr	r3, [r5, #0]
 80080f8:	0607      	lsls	r7, r0, #24
 80080fa:	f103 0104 	add.w	r1, r3, #4
 80080fe:	6029      	str	r1, [r5, #0]
 8008100:	d501      	bpl.n	8008106 <_printf_i+0xbe>
 8008102:	681e      	ldr	r6, [r3, #0]
 8008104:	e003      	b.n	800810e <_printf_i+0xc6>
 8008106:	0646      	lsls	r6, r0, #25
 8008108:	d5fb      	bpl.n	8008102 <_printf_i+0xba>
 800810a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800810e:	2e00      	cmp	r6, #0
 8008110:	da03      	bge.n	800811a <_printf_i+0xd2>
 8008112:	232d      	movs	r3, #45	; 0x2d
 8008114:	4276      	negs	r6, r6
 8008116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800811a:	485a      	ldr	r0, [pc, #360]	; (8008284 <_printf_i+0x23c>)
 800811c:	230a      	movs	r3, #10
 800811e:	e012      	b.n	8008146 <_printf_i+0xfe>
 8008120:	682b      	ldr	r3, [r5, #0]
 8008122:	6820      	ldr	r0, [r4, #0]
 8008124:	1d19      	adds	r1, r3, #4
 8008126:	6029      	str	r1, [r5, #0]
 8008128:	0605      	lsls	r5, r0, #24
 800812a:	d501      	bpl.n	8008130 <_printf_i+0xe8>
 800812c:	681e      	ldr	r6, [r3, #0]
 800812e:	e002      	b.n	8008136 <_printf_i+0xee>
 8008130:	0641      	lsls	r1, r0, #25
 8008132:	d5fb      	bpl.n	800812c <_printf_i+0xe4>
 8008134:	881e      	ldrh	r6, [r3, #0]
 8008136:	4853      	ldr	r0, [pc, #332]	; (8008284 <_printf_i+0x23c>)
 8008138:	2f6f      	cmp	r7, #111	; 0x6f
 800813a:	bf0c      	ite	eq
 800813c:	2308      	moveq	r3, #8
 800813e:	230a      	movne	r3, #10
 8008140:	2100      	movs	r1, #0
 8008142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008146:	6865      	ldr	r5, [r4, #4]
 8008148:	60a5      	str	r5, [r4, #8]
 800814a:	2d00      	cmp	r5, #0
 800814c:	bfa2      	ittt	ge
 800814e:	6821      	ldrge	r1, [r4, #0]
 8008150:	f021 0104 	bicge.w	r1, r1, #4
 8008154:	6021      	strge	r1, [r4, #0]
 8008156:	b90e      	cbnz	r6, 800815c <_printf_i+0x114>
 8008158:	2d00      	cmp	r5, #0
 800815a:	d04b      	beq.n	80081f4 <_printf_i+0x1ac>
 800815c:	4615      	mov	r5, r2
 800815e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008162:	fb03 6711 	mls	r7, r3, r1, r6
 8008166:	5dc7      	ldrb	r7, [r0, r7]
 8008168:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800816c:	4637      	mov	r7, r6
 800816e:	42bb      	cmp	r3, r7
 8008170:	460e      	mov	r6, r1
 8008172:	d9f4      	bls.n	800815e <_printf_i+0x116>
 8008174:	2b08      	cmp	r3, #8
 8008176:	d10b      	bne.n	8008190 <_printf_i+0x148>
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	07de      	lsls	r6, r3, #31
 800817c:	d508      	bpl.n	8008190 <_printf_i+0x148>
 800817e:	6923      	ldr	r3, [r4, #16]
 8008180:	6861      	ldr	r1, [r4, #4]
 8008182:	4299      	cmp	r1, r3
 8008184:	bfde      	ittt	le
 8008186:	2330      	movle	r3, #48	; 0x30
 8008188:	f805 3c01 	strble.w	r3, [r5, #-1]
 800818c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008190:	1b52      	subs	r2, r2, r5
 8008192:	6122      	str	r2, [r4, #16]
 8008194:	f8cd a000 	str.w	sl, [sp]
 8008198:	464b      	mov	r3, r9
 800819a:	aa03      	add	r2, sp, #12
 800819c:	4621      	mov	r1, r4
 800819e:	4640      	mov	r0, r8
 80081a0:	f7ff fee4 	bl	8007f6c <_printf_common>
 80081a4:	3001      	adds	r0, #1
 80081a6:	d14a      	bne.n	800823e <_printf_i+0x1f6>
 80081a8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ac:	b004      	add	sp, #16
 80081ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	f043 0320 	orr.w	r3, r3, #32
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	4833      	ldr	r0, [pc, #204]	; (8008288 <_printf_i+0x240>)
 80081bc:	2778      	movs	r7, #120	; 0x78
 80081be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	6829      	ldr	r1, [r5, #0]
 80081c6:	061f      	lsls	r7, r3, #24
 80081c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80081cc:	d402      	bmi.n	80081d4 <_printf_i+0x18c>
 80081ce:	065f      	lsls	r7, r3, #25
 80081d0:	bf48      	it	mi
 80081d2:	b2b6      	uxthmi	r6, r6
 80081d4:	07df      	lsls	r7, r3, #31
 80081d6:	bf48      	it	mi
 80081d8:	f043 0320 	orrmi.w	r3, r3, #32
 80081dc:	6029      	str	r1, [r5, #0]
 80081de:	bf48      	it	mi
 80081e0:	6023      	strmi	r3, [r4, #0]
 80081e2:	b91e      	cbnz	r6, 80081ec <_printf_i+0x1a4>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	f023 0320 	bic.w	r3, r3, #32
 80081ea:	6023      	str	r3, [r4, #0]
 80081ec:	2310      	movs	r3, #16
 80081ee:	e7a7      	b.n	8008140 <_printf_i+0xf8>
 80081f0:	4824      	ldr	r0, [pc, #144]	; (8008284 <_printf_i+0x23c>)
 80081f2:	e7e4      	b.n	80081be <_printf_i+0x176>
 80081f4:	4615      	mov	r5, r2
 80081f6:	e7bd      	b.n	8008174 <_printf_i+0x12c>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	6826      	ldr	r6, [r4, #0]
 80081fc:	6961      	ldr	r1, [r4, #20]
 80081fe:	1d18      	adds	r0, r3, #4
 8008200:	6028      	str	r0, [r5, #0]
 8008202:	0635      	lsls	r5, r6, #24
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	d501      	bpl.n	800820c <_printf_i+0x1c4>
 8008208:	6019      	str	r1, [r3, #0]
 800820a:	e002      	b.n	8008212 <_printf_i+0x1ca>
 800820c:	0670      	lsls	r0, r6, #25
 800820e:	d5fb      	bpl.n	8008208 <_printf_i+0x1c0>
 8008210:	8019      	strh	r1, [r3, #0]
 8008212:	2300      	movs	r3, #0
 8008214:	6123      	str	r3, [r4, #16]
 8008216:	4615      	mov	r5, r2
 8008218:	e7bc      	b.n	8008194 <_printf_i+0x14c>
 800821a:	682b      	ldr	r3, [r5, #0]
 800821c:	1d1a      	adds	r2, r3, #4
 800821e:	602a      	str	r2, [r5, #0]
 8008220:	681d      	ldr	r5, [r3, #0]
 8008222:	6862      	ldr	r2, [r4, #4]
 8008224:	2100      	movs	r1, #0
 8008226:	4628      	mov	r0, r5
 8008228:	f7f7 ffd2 	bl	80001d0 <memchr>
 800822c:	b108      	cbz	r0, 8008232 <_printf_i+0x1ea>
 800822e:	1b40      	subs	r0, r0, r5
 8008230:	6060      	str	r0, [r4, #4]
 8008232:	6863      	ldr	r3, [r4, #4]
 8008234:	6123      	str	r3, [r4, #16]
 8008236:	2300      	movs	r3, #0
 8008238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800823c:	e7aa      	b.n	8008194 <_printf_i+0x14c>
 800823e:	6923      	ldr	r3, [r4, #16]
 8008240:	462a      	mov	r2, r5
 8008242:	4649      	mov	r1, r9
 8008244:	4640      	mov	r0, r8
 8008246:	47d0      	blx	sl
 8008248:	3001      	adds	r0, #1
 800824a:	d0ad      	beq.n	80081a8 <_printf_i+0x160>
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	079b      	lsls	r3, r3, #30
 8008250:	d413      	bmi.n	800827a <_printf_i+0x232>
 8008252:	68e0      	ldr	r0, [r4, #12]
 8008254:	9b03      	ldr	r3, [sp, #12]
 8008256:	4298      	cmp	r0, r3
 8008258:	bfb8      	it	lt
 800825a:	4618      	movlt	r0, r3
 800825c:	e7a6      	b.n	80081ac <_printf_i+0x164>
 800825e:	2301      	movs	r3, #1
 8008260:	4632      	mov	r2, r6
 8008262:	4649      	mov	r1, r9
 8008264:	4640      	mov	r0, r8
 8008266:	47d0      	blx	sl
 8008268:	3001      	adds	r0, #1
 800826a:	d09d      	beq.n	80081a8 <_printf_i+0x160>
 800826c:	3501      	adds	r5, #1
 800826e:	68e3      	ldr	r3, [r4, #12]
 8008270:	9903      	ldr	r1, [sp, #12]
 8008272:	1a5b      	subs	r3, r3, r1
 8008274:	42ab      	cmp	r3, r5
 8008276:	dcf2      	bgt.n	800825e <_printf_i+0x216>
 8008278:	e7eb      	b.n	8008252 <_printf_i+0x20a>
 800827a:	2500      	movs	r5, #0
 800827c:	f104 0619 	add.w	r6, r4, #25
 8008280:	e7f5      	b.n	800826e <_printf_i+0x226>
 8008282:	bf00      	nop
 8008284:	08008465 	.word	0x08008465
 8008288:	08008476 	.word	0x08008476

0800828c <memmove>:
 800828c:	4288      	cmp	r0, r1
 800828e:	b510      	push	{r4, lr}
 8008290:	eb01 0402 	add.w	r4, r1, r2
 8008294:	d902      	bls.n	800829c <memmove+0x10>
 8008296:	4284      	cmp	r4, r0
 8008298:	4623      	mov	r3, r4
 800829a:	d807      	bhi.n	80082ac <memmove+0x20>
 800829c:	1e43      	subs	r3, r0, #1
 800829e:	42a1      	cmp	r1, r4
 80082a0:	d008      	beq.n	80082b4 <memmove+0x28>
 80082a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082aa:	e7f8      	b.n	800829e <memmove+0x12>
 80082ac:	4402      	add	r2, r0
 80082ae:	4601      	mov	r1, r0
 80082b0:	428a      	cmp	r2, r1
 80082b2:	d100      	bne.n	80082b6 <memmove+0x2a>
 80082b4:	bd10      	pop	{r4, pc}
 80082b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082be:	e7f7      	b.n	80082b0 <memmove+0x24>

080082c0 <_sbrk_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4d06      	ldr	r5, [pc, #24]	; (80082dc <_sbrk_r+0x1c>)
 80082c4:	2300      	movs	r3, #0
 80082c6:	4604      	mov	r4, r0
 80082c8:	4608      	mov	r0, r1
 80082ca:	602b      	str	r3, [r5, #0]
 80082cc:	f7f8 fe84 	bl	8000fd8 <_sbrk>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_sbrk_r+0x1a>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	b103      	cbz	r3, 80082da <_sbrk_r+0x1a>
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	20001d74 	.word	0x20001d74

080082e0 <_realloc_r>:
 80082e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082e4:	4680      	mov	r8, r0
 80082e6:	4614      	mov	r4, r2
 80082e8:	460e      	mov	r6, r1
 80082ea:	b921      	cbnz	r1, 80082f6 <_realloc_r+0x16>
 80082ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082f0:	4611      	mov	r1, r2
 80082f2:	f7ff bc57 	b.w	8007ba4 <_malloc_r>
 80082f6:	b92a      	cbnz	r2, 8008304 <_realloc_r+0x24>
 80082f8:	f7ff fbe8 	bl	8007acc <_free_r>
 80082fc:	4625      	mov	r5, r4
 80082fe:	4628      	mov	r0, r5
 8008300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008304:	f000 f81b 	bl	800833e <_malloc_usable_size_r>
 8008308:	4284      	cmp	r4, r0
 800830a:	4607      	mov	r7, r0
 800830c:	d802      	bhi.n	8008314 <_realloc_r+0x34>
 800830e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008312:	d812      	bhi.n	800833a <_realloc_r+0x5a>
 8008314:	4621      	mov	r1, r4
 8008316:	4640      	mov	r0, r8
 8008318:	f7ff fc44 	bl	8007ba4 <_malloc_r>
 800831c:	4605      	mov	r5, r0
 800831e:	2800      	cmp	r0, #0
 8008320:	d0ed      	beq.n	80082fe <_realloc_r+0x1e>
 8008322:	42bc      	cmp	r4, r7
 8008324:	4622      	mov	r2, r4
 8008326:	4631      	mov	r1, r6
 8008328:	bf28      	it	cs
 800832a:	463a      	movcs	r2, r7
 800832c:	f7ff fbc0 	bl	8007ab0 <memcpy>
 8008330:	4631      	mov	r1, r6
 8008332:	4640      	mov	r0, r8
 8008334:	f7ff fbca 	bl	8007acc <_free_r>
 8008338:	e7e1      	b.n	80082fe <_realloc_r+0x1e>
 800833a:	4635      	mov	r5, r6
 800833c:	e7df      	b.n	80082fe <_realloc_r+0x1e>

0800833e <_malloc_usable_size_r>:
 800833e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008342:	1f18      	subs	r0, r3, #4
 8008344:	2b00      	cmp	r3, #0
 8008346:	bfbc      	itt	lt
 8008348:	580b      	ldrlt	r3, [r1, r0]
 800834a:	18c0      	addlt	r0, r0, r3
 800834c:	4770      	bx	lr
	...

08008350 <_init>:
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	bf00      	nop
 8008354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008356:	bc08      	pop	{r3}
 8008358:	469e      	mov	lr, r3
 800835a:	4770      	bx	lr

0800835c <_fini>:
 800835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835e:	bf00      	nop
 8008360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008362:	bc08      	pop	{r3}
 8008364:	469e      	mov	lr, r3
 8008366:	4770      	bx	lr
